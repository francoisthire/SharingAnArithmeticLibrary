include "basics/pts.ma".
include "leibniz.ma".
definition True : Prop := \forall z : Prop. (z) \to z.
definition False : Prop := \forall z : Prop. z.
definition Imp : Prop \to Prop \to Prop := \lambda x : Prop. \lambda y : Prop. (x) \to y.
definition Not : Prop \to Prop := \lambda x : Prop. (x) \to False.
definition And : Prop \to Prop \to Prop := \lambda x : Prop. \lambda y : Prop. \forall z : Prop. ((x) \to (y) \to z) \to z.
definition Or : Prop \to Prop \to Prop := \lambda x : Prop. \lambda y : Prop. \forall z : Prop. ((x) \to z) \to ((y) \to z) \to z.
definition Ex : \forall A : Type[0]. ((A) \to Prop) \to Prop := \lambda A : Type[0]. \lambda f : (A) \to Prop. \forall z : Prop. (\forall x : A. ((f) (x)) \to z) \to z.
definition I : True := \lambda z : Prop. \lambda p : z. p.
axiom eq : \forall A : Type[0]. (A) \to (A) \to Prop.
axiom refl : \forall A : Type[0]. \forall x : A. (((eq) (A)) (x)) (x).
axiom eq_ind : \forall A : Type[0]. \forall x : A. \forall P : (A) \to Prop. ((P) (x)) \to \forall y : A. ((((eq) (A)) (x)) (y)) \to (P) (y).
definition eq_rect_r : \forall A : Type[0]. \forall a : A. \forall x : A. ((((eq) (A)) (x)) (a)) \to \forall P : (A) \to Prop. ((P) (a)) \to (P) (x) := \lambda A : Type[0]. \lambda a : A. \lambda x : A. \lambda p : (((eq) (A)) (x)) (a). ((((((eq_ind) (A)) (x)) (\lambda Joker_ : A. \forall P : (A) \to Prop. ((P) (Joker_)) \to (P) (x))) (\lambda P : (A) \to Prop. \lambda auto : (P) (x). auto)) (a)) (p).
definition eq_ind_r : \forall A : Type[0]. \forall a : A. \forall P : (A) \to Prop. ((P) (a)) \to \forall x : A. ((((eq) (A)) (x)) (a)) \to (P) (x) := \lambda A : Type[0]. \lambda a : A. \lambda P : (A) \to Prop. \lambda p : (P) (a). \lambda x0 : A. \lambda p0 : (((eq) (A)) (x0)) (a). ((((((eq_rect_r) (A)) (a)) (x0)) (p0)) (\lambda x01 : A. (P) (x01))) (p).
definition rewrite_l : \forall A : Type[0]. \forall x : A. \forall P : (A) \to Prop. ((P) (x)) \to \forall y : A. ((((eq) (A)) (x)) (y)) \to (P) (y) := \lambda A : Type[0]. \lambda x : A. \lambda P : (A) \to Prop. \lambda Hx : (P) (x). \lambda y : A. \lambda Heq : (((eq) (A)) (x)) (y). ((((((eq_ind) (A)) (x)) (\lambda Joker_ : A. (P) (Joker_))) (Hx)) (y)) (Heq).
definition sym_eq : \forall A : Type[0]. \forall x : A. \forall y : A. ((((eq) (A)) (x)) (y)) \to (((eq) (A)) (y)) (x) := \lambda A : Type[0]. \lambda x : A. \lambda y : A. \lambda Heq : (((eq) (A)) (x)) (y). ((((((rewrite_l) (A)) (x)) (\lambda Joker_ : A. (((eq) (A)) (Joker_)) (x))) (((refl) (A)) (x))) (y)) (((((((rewrite_l) (A)) (x)) (\lambda Joker_ : A. (((eq) (A)) (x)) (Joker_))) (((refl) (A)) (x))) (y)) (Heq)).
definition rewrite_r : \forall A : Type[0]. \forall x : A. \forall P : (A) \to Prop. ((P) (x)) \to \forall y : A. ((((eq) (A)) (y)) (x)) \to (P) (y) := \lambda A : Type[0]. \lambda x : A. \lambda P : (A) \to Prop. \lambda Hx : (P) (x). \lambda y : A. \lambda Heq : (((eq) (A)) (y)) (x). ((((((eq_ind) (A)) (x)) (\lambda Joker_ : A. (P) (Joker_))) (Hx)) (y)) (((((sym_eq) (A)) (y)) (x)) (Heq)).
definition eq_coerc : \forall A : Prop. \forall B : Prop. (A) \to ((((eq) Prop) (A)) (B)) \to B := \lambda A : Prop. \lambda B : Prop. \lambda Ha : A. \lambda Heq : (((eq) Prop) (A)) (B). ((((((eq_ind) Prop) (A)) (\lambda x_19 : Prop. x_19)) (Ha)) (B)) (Heq).
definition trans_eq : \forall A : Type[0]. \forall x : A. \forall y : A. \forall z : A. ((((eq) (A)) (x)) (y)) \to ((((eq) (A)) (y)) (z)) \to (((eq) (A)) (x)) (z) := \lambda A : Type[0]. \lambda x : A. \lambda y : A. \lambda z : A. \lambda H1 : (((eq) (A)) (x)) (y). \lambda H2 : (((eq) (A)) (y)) (z). ((((((eq_ind_r) (A)) (y)) (\lambda x0 : A. (((eq) (A)) (x0)) (z))) (((((((rewrite_l) (A)) (x)) (\lambda Joker_ : A. (((eq) (A)) (Joker_)) (z))) (((((((rewrite_l) (A)) (x)) (\lambda Joker_ : A. (((eq) (A)) (x)) (Joker_))) (((refl) (A)) (x))) (z)) (((((((rewrite_r) (A)) (y)) (\lambda Joker_ : A. (((eq) (A)) (Joker_)) (z))) (H2)) (x)) (H1)))) (y)) (H1))) (x)) (H1).
definition eq_f : \forall A : Type[0]. \forall B : Type[0]. \forall f : (A) \to B. \forall x : A. \forall y : A. ((((eq) (A)) (x)) (y)) \to (((eq) (B)) ((f) (x))) ((f) (y)) := \lambda A : Type[0]. \lambda B : Type[0]. \lambda f : (A) \to B. \lambda x : A. \lambda y : A. \lambda H : (((eq) (A)) (x)) (y). ((((((eq_ind_r) (A)) (y)) (\lambda x0 : A. (((eq) (B)) ((f) (x0))) ((f) (y)))) (((((((rewrite_l) (A)) (x)) (\lambda Joker_ : A. (((eq) (B)) ((f) (Joker_))) ((f) (y)))) (((((((rewrite_l) (A)) (x)) (\lambda Joker_ : A. (((eq) (B)) ((f) (x))) ((f) (Joker_)))) (((refl) (B)) ((f) (x)))) (y)) (H))) (y)) (H))) (x)) (H).
definition eq_f2 : \forall A : Type[0]. \forall B : Type[0]. \forall C : Type[0]. \forall f : (A) \to (B) \to C. \forall x1 : A. \forall x2 : A. \forall y1 : B. \forall y2 : B. ((((eq) (A)) (x1)) (x2)) \to ((((eq) (B)) (y1)) (y2)) \to (((eq) (C)) (((f) (x1)) (y1))) (((f) (x2)) (y2)) := \lambda A : Type[0]. \lambda B : Type[0]. \lambda C : Type[0]. \lambda f : (A) \to (B) \to C. \lambda x1 : A. \lambda x2 : A. \lambda y1 : B. \lambda y2 : B. \lambda E1 : (((eq) (A)) (x1)) (x2). \lambda E2 : (((eq) (B)) (y1)) (y2). ((((((eq_ind_r) (A)) (x2)) (\lambda x : A. (((eq) (C)) (((f) (x)) (y1))) (((f) (x2)) (y2)))) (((((((eq_ind_r) (B)) (y2)) (\lambda x : B. (((eq) (C)) (((f) (x2)) (x))) (((f) (x2)) (y2)))) (((((((rewrite_l) (A)) (x1)) (\lambda Joker_ : A. (((eq) (C)) (((f) (Joker_)) (y2))) (((f) (x2)) (y2)))) (((((((rewrite_l) (B)) (y1)) (\lambda Joker_ : B. (((eq) (C)) (((f) (x1)) (Joker_))) (((f) (x2)) (y2)))) (((((((rewrite_l) (A)) (x1)) (\lambda Joker_ : A. (((eq) (C)) (((f) (x1)) (y1))) (((f) (Joker_)) (y2)))) (((((((rewrite_l) (B)) (y1)) (\lambda Joker_ : B. (((eq) (C)) (((f) (x1)) (y1))) (((f) (x1)) (Joker_)))) (((refl) (C)) (((f) (x1)) (y1)))) (y2)) (E2))) (x2)) (E1))) (y2)) (E2))) (x2)) (E1))) (y1)) (E2))) (x1)) (E1).
definition falsity : \forall t : Prop. (False) \to t := \lambda t : Prop. \lambda f : \forall x : Prop. x. (f) (t).
definition Not_ind : \forall A : Prop. \forall Q : Prop. (((A) \to False) \to Q) \to ((Not) (A)) \to Q := \lambda A : Prop. \lambda Q : Prop. \lambda F : ((A) \to False) \to Q. \lambda N : (Not) (A). (F) (N).
definition absurd : \forall A : Prop. (A) \to ((Not) (A)) \to False := \lambda A : Prop. \lambda H : A. \lambda Hn : (Not) (A). ((((Not_ind) (A)) (False)) (\lambda Jokerx_80 : (A) \to False. (Jokerx_80) (H))) (Hn).
definition not_to_not : \forall A : Prop. \forall B : Prop. ((A) \to B) \to ((Not) (B)) \to (Not) (A) := \lambda A : Prop. \lambda B : Prop. \lambda auto : (A) \to B. \lambda auto' : (Not) (B). \lambda auto'' : A. (((absurd) (B)) ((auto) (auto''))) (auto').
definition sym_not_eq : \forall A : Type[0]. \forall x : A. \forall y : A. ((Not) ((((eq) (A)) (x)) (y))) \to (Not) ((((eq) (A)) (y)) (x)) := \lambda A : Type[0]. \lambda x : A. \lambda y : A. \lambda auto : (Not) ((((eq) (A)) (x)) (y)). \lambda auto' : (((eq) (A)) (y)) (x). (((absurd) ((((eq) (A)) (x)) (y))) (((((((rewrite_r) (A)) (x)) (\lambda Joker_ : A. (((eq) (A)) (x)) (Joker_))) (((refl) (A)) (x))) (y)) (auto'))) (auto).
definition match_And_prop : \forall A : Prop. \forall B : Prop. \forall return_ : Prop. ((A) \to (B) \to return_) \to (((And) (A)) (B)) \to return_ := \lambda A : Prop. \lambda B : Prop. \lambda return_ : Prop. \lambda case : (A) \to (B) \to return_. \lambda and_ : ((And) (A)) (B). ((and_) (return_)) (case).
definition proj1 : \forall A : Prop. \forall B : Prop. (((And) (A)) (B)) \to A := \lambda A : Prop. \lambda B : Prop. \lambda AB : ((And) (A)) (B). (((((match_And_prop) (A)) (B)) (A)) (\lambda Jokerx_120 : A. \lambda Jokerx_119 : B. Jokerx_120)) (AB).
definition proj2 : \forall A : Prop. \forall B : Prop. (((And) (A)) (B)) \to B := \lambda A : Prop. \lambda B : Prop. \lambda AB : ((And) (A)) (B). (((((match_And_prop) (A)) (B)) (B)) (\lambda Jokerx_120 : A. \lambda Jokerx_119 : B. Jokerx_119)) (AB).
definition match_Or_prop : \forall A : Prop. \forall B : Prop. \forall return_ : Prop. ((A) \to return_) \to ((B) \to return_) \to (((Or) (A)) (B)) \to return_ := \lambda A : Prop. \lambda B : Prop. \lambda return_ : Prop. \lambda case_A : (A) \to return_. \lambda case_B : (B) \to return_. \lambda or : ((Or) (A)) (B). (((or) (return_)) (case_A)) (case_B).
definition decidable : Prop \to Prop := \lambda A : Prop. ((Or) (A)) ((Not) (A)).
definition match_ex_prop : \forall A : Type[0]. \forall P : (A) \to Prop. \forall return_ : Prop. (\forall x : A. ((P) (x)) \to return_) \to (((Ex) (A)) (P)) \to return_ := \lambda A : Type[0]. \lambda P : (A) \to Prop. \lambda return_ : Prop. \lambda case : \forall x : A. ((P) (x)) \to return_. \lambda Ex : ((Ex) (A)) (P). ((Ex) (return_)) (case).
definition reflexive : \forall A : Type[0]. ((A) \to (A) \to Prop) \to Prop := \lambda A : Type[0]. \lambda R : (A) \to (A) \to Prop. \forall x : A. ((R) (x)) (x).
definition transitive : \forall A : Type[0]. ((A) \to (A) \to Prop) \to Prop := \lambda A : Type[0]. \lambda R : (A) \to (A) \to Prop. \forall x : A. \forall y : A. \forall z : A. (((R) (x)) (y)) \to (((R) (y)) (z)) \to ((R) (x)) (z).
definition RC : \forall A : Type[0]. ((A) \to (A) \to Prop) \to (A) \to (A) \to Prop := \lambda A : Type[0]. \lambda R : (A) \to (A) \to Prop. \lambda x : A. \lambda y : A. ((Or) (((R) (x)) (y))) ((((eq) (A)) (x)) (y)).
definition RC_reflexive : \forall A : Type[0]. \forall R : (A) \to (A) \to Prop. ((reflexive) (A)) (((RC) (A)) (R)) := \lambda A : Type[0]. \lambda R : (A) \to (A) \to Prop. \lambda x : A. \lambda z : Prop. \lambda l : (((R) (x)) (x)) \to z. \lambda r : ((((eq) (A)) (x)) (x)) \to z. (r) (((refl) (A)) (x)).
definition injective : \forall A : Type[0]. \forall B : Type[0]. ((A) \to B) \to Prop := \lambda A : Type[0]. \lambda B : Type[0]. \lambda f : (A) \to B. \forall x : A. \forall y : A. ((((eq) (B)) ((f) (x))) ((f) (y))) \to (((eq) (A)) (x)) (y).
definition commutative : \forall A : Type[0]. ((A) \to (A) \to A) \to Prop := \lambda A : Type[0]. \lambda f : (A) \to (A) \to A. \forall x : A. \forall y : A. (((eq) (A)) (((f) (x)) (y))) (((f) (y)) (x)).
definition associative : \forall A : Type[0]. ((A) \to (A) \to A) \to Prop := \lambda A : Type[0]. \lambda f : (A) \to (A) \to A. \forall x : A. \forall y : A. \forall z : A. (((eq) (A)) (((f) (((f) (x)) (y))) (z))) (((f) (x)) (((f) (y)) (z))).
definition monotonic : \forall A : Type[0]. ((A) \to (A) \to Prop) \to ((A) \to A) \to Prop := \lambda A : Type[0]. \lambda R : (A) \to (A) \to Prop. \lambda f : (A) \to A. \forall x : A. \forall y : A. (((R) (x)) (y)) \to ((R) ((f) (x))) ((f) (y)).
definition distributive : \forall A : Type[0]. ((A) \to (A) \to A) \to ((A) \to (A) \to A) \to Prop := \lambda A : Type[0]. \lambda f : (A) \to (A) \to A. \lambda g : (A) \to (A) \to A. \forall x : A. \forall y : A. \forall z : A. (((eq) (A)) (((f) (x)) (((g) (y)) (z)))) (((g) (((f) (x)) (y))) (((f) (x)) (z))).
axiom bool : Type[0].
axiom true : bool.
axiom false : bool.
axiom match_bool_prop : \forall return_ : (bool) \to Prop. ((return_) (true)) \to ((return_) (false)) \to \forall z : bool. (return_) (z).
axiom match_bool_type : \forall return_ : Type[0]. (return_) \to (return_) \to (bool) \to return_.
axiom eq_match_bool_type_true : \forall return_ : Type[0]. \forall case_true : return_. \forall case_false : return_. (((leibniz) (return_)) (((((match_bool_type) (return_)) (case_true)) (case_false)) (true))) (case_true).
axiom eq_match_bool_type_false : \forall return_ : Type[0]. \forall case_true : return_. \forall case_false : return_. (((leibniz) (return_)) (((((match_bool_type) (return_)) (case_true)) (case_false)) (false))) (case_false).
definition sym_eq_match_bool_type_true : \forall return_ : Type[0]. \forall case_true : return_. \forall case_false : return_. (((leibniz) (return_)) (case_true)) (((((match_bool_type) (return_)) (case_true)) (case_false)) (true)) := \lambda return_type : Type[0]. \lambda case_true : return_type. \lambda case_false : return_type. ((((sym_leibniz) (return_type)) (((((match_bool_type) (return_type)) (case_true)) (case_false)) (true))) (case_true)) ((((eq_match_bool_type_true) (return_type)) (case_true)) (case_false)).
definition sym_eq_match_bool_type_false : \forall return_ : Type[0]. \forall case_true : return_. \forall case_false : return_. (((leibniz) (return_)) (case_false)) (((((match_bool_type) (return_)) (case_true)) (case_false)) (false)) := \lambda return_type : Type[0]. \lambda case_true : return_type. \lambda case_false : return_type. ((((sym_leibniz) (return_type)) (((((match_bool_type) (return_type)) (case_true)) (case_false)) (false))) (case_false)) ((((eq_match_bool_type_false) (return_type)) (case_true)) (case_false)).
definition bool_discr : \forall x : bool. \forall y : bool. ((((eq) (bool)) (x)) (y)) \to ((((match_bool_type) Prop) (((((match_bool_type) Prop) (\forall P : Prop. (P) \to P)) (\forall P : Prop. P)) (y))) (((((match_bool_type) Prop) (\forall P : Prop. P)) (\forall P : Prop. (P) \to P)) (y))) (x) := \lambda x : bool. \lambda y : bool. \lambda Deq : (((eq) (bool)) (x)) (y). ((((((eq_ind) (bool)) (x)) (\lambda x_13 : bool. ((((match_bool_type) Prop) (((((match_bool_type) Prop) (\forall P : Prop. (P) \to P)) (\forall P : Prop. P)) (x_13))) (((((match_bool_type) Prop) (\forall P : Prop. P)) (\forall P : Prop. (P) \to P)) (x_13))) (x))) (((((match_bool_prop) (\lambda Joker_ : bool. ((((match_bool_type) Prop) (((((match_bool_type) Prop) (\forall P : Prop. (P) \to P)) (\forall P : Prop. P)) (Joker_))) (((((match_bool_type) Prop) (\forall P : Prop. P)) (\forall P : Prop. (P) \to P)) (Joker_))) (Joker_))) ((((((sym_eq_match_bool_type_true) Prop) (((((match_bool_type) Prop) (\forall P : Prop. (P) \to P)) (\forall P : Prop. P)) (true))) (((((match_bool_type) Prop) (\forall P : Prop. P)) (\forall P : Prop. (P) \to P)) (true))) (\lambda x0 : Prop. x0)) ((((((sym_eq_match_bool_type_true) Prop) (\forall P : Prop. (P) \to P)) (\forall P : Prop. P)) (\lambda x0 : Prop. x0)) (\lambda P : Prop. \lambda DH : P. DH)))) ((((((sym_eq_match_bool_type_false) Prop) (((((match_bool_type) Prop) (\forall P : Prop. (P) \to P)) (\forall P : Prop. P)) (false))) (((((match_bool_type) Prop) (\forall P : Prop. P)) (\forall P : Prop. (P) \to P)) (false))) (\lambda x0 : Prop. x0)) ((((((sym_eq_match_bool_type_false) Prop) (\forall P : Prop. P)) (\forall P : Prop. (P) \to P)) (\lambda x0 : Prop. x0)) (\lambda P : Prop. \lambda DH : P. DH)))) (x))) (y)) (Deq).
definition not_eq_true_false : (Not) ((((eq) (bool)) (true)) (false)) := \lambda Heq : (((eq) (bool)) (true)) (false). ((((((eq_match_bool_type_false) Prop) (\forall P : Prop. (P) \to P)) (\forall P : Prop. P)) (\lambda x : Prop. x)) ((((((eq_match_bool_type_true) Prop) (((((match_bool_type) Prop) (\forall P : Prop. (P) \to P)) (\forall P : Prop. P)) (false))) (((((match_bool_type) Prop) (\forall P : Prop. P)) (\forall P : Prop. (P) \to P)) (false))) (\lambda x : Prop. x)) ((((bool_discr) (true)) (false)) (Heq)))) (False).
definition notb : (bool) \to bool := \lambda b : bool. ((((match_bool_type) (bool)) (false)) (true)) (b).
definition andb : (bool) \to (bool) \to bool := \lambda b1 : bool. \lambda b2 : bool. ((((match_bool_type) (bool)) (b2)) (false)) (b1).
definition andb_true_l : \forall b1 : bool. \forall b2 : bool. ((((eq) (bool)) (((andb) (b1)) (b2))) (true)) \to (((eq) (bool)) (b1)) (true) := \lambda b1 : bool. ((((match_bool_prop) (\lambda Joker_ : bool. \forall b2 : bool. ((((eq) (bool)) (((andb) (Joker_)) (b2))) (true)) \to (((eq) (bool)) (Joker_)) (true))) (\lambda b2 : bool. (((((sym_eq_match_bool_type_true) (bool)) (b2)) (false)) (\lambda x : bool. ((((eq) (bool)) (x)) (true)) \to (((eq) (bool)) (true)) (true))) (\lambda auto : (((eq) (bool)) (b2)) (true). ((((((rewrite_l) (bool)) (b2)) (\lambda Joker_ : bool. (((eq) (bool)) (Joker_)) (true))) (((((((rewrite_l) (bool)) (b2)) (\lambda Joker_ : bool. (((eq) (bool)) (b2)) (Joker_))) (((refl) (bool)) (b2))) (true)) (auto))) (true)) (auto)))) (\lambda Jokerb2 : bool. (((((sym_eq_match_bool_type_false) (bool)) (Jokerb2)) (false)) (\lambda x : bool. ((((eq) (bool)) (x)) (true)) \to (((eq) (bool)) (false)) (true))) (\lambda auto : (((eq) (bool)) (false)) (true). ((((((rewrite_r) (bool)) (true)) (\lambda Joker_ : bool. (((eq) (bool)) (Joker_)) (true))) (((refl) (bool)) (true))) (false)) (auto)))) (b1).
definition andb_true_r : \forall b1 : bool. \forall b2 : bool. ((((eq) (bool)) (((andb) (b1)) (b2))) (true)) \to (((eq) (bool)) (b2)) (true) := \lambda b1 : bool. \lambda b2 : bool. ((((match_bool_prop) (\lambda Joker_ : bool. ((((eq) (bool)) (((andb) (Joker_)) (b2))) (true)) \to (((eq) (bool)) (b2)) (true))) ((((((sym_eq_match_bool_type_true) (bool)) (b2)) (false)) (\lambda x : bool. ((((eq) (bool)) (x)) (true)) \to (((eq) (bool)) (b2)) (true))) (\lambda auto : (((eq) (bool)) (b2)) (true). ((((((rewrite_l) (bool)) (b2)) (\lambda Joker_ : bool. (((eq) (bool)) (b2)) (Joker_))) (((refl) (bool)) (b2))) (true)) (auto)))) ((((((sym_eq_match_bool_type_false) (bool)) (b2)) (false)) (\lambda x : bool. ((((eq) (bool)) (x)) (true)) \to (((eq) (bool)) (b2)) (true))) (((((match_bool_prop) (\lambda Joker_ : bool. ((((eq) (bool)) (false)) (true)) \to (((eq) (bool)) (Joker_)) (true))) (\lambda auto : (((eq) (bool)) (false)) (true). ((refl) (bool)) (true))) (\lambda auto : (((eq) (bool)) (false)) (true). ((((((rewrite_r) (bool)) (true)) (\lambda Joker_ : bool. (((eq) (bool)) (Joker_)) (true))) (((refl) (bool)) (true))) (false)) (auto))) (b2)))) (b1).
definition true_or_false : \forall b : bool. ((Or) ((((eq) (bool)) (b)) (true))) ((((eq) (bool)) (b)) (false)) := \lambda b : bool. ((((match_bool_prop) (\lambda Joker_ : bool. ((Or) ((((eq) (bool)) (Joker_)) (true))) ((((eq) (bool)) (Joker_)) (false)))) (\lambda z : Prop. \lambda l : ((((eq) (bool)) (true)) (true)) \to z. \lambda r : ((((eq) (bool)) (true)) (false)) \to z. (l) (((refl) (bool)) (true)))) ((((RC_reflexive) (bool)) (\lambda Joker_ : bool. \lambda Joker0 : bool. (((eq) (bool)) (false)) (true))) (false))) (b).
axiom nat : Type[0].
axiom O : nat.
axiom S : (nat) \to nat.
axiom match_nat_prop : \forall return_ : (nat) \to Prop. ((return_) (O)) \to (\forall n : nat. (return_) ((S) (n))) \to \forall z : nat. (return_) (z).
axiom match_nat_type : \forall return_ : Type[0]. (return_) \to ((nat) \to return_) \to (nat) \to return_.
axiom eq_match_nat_type_O : \forall return_type : Type[0]. \forall case_O : return_type. \forall case_S : (nat) \to return_type. (((leibniz) (return_type)) (((((match_nat_type) (return_type)) (case_O)) (case_S)) (O))) (case_O).
definition sym_eq_match_nat_type_O : \forall return_type : Type[0]. \forall case_O : return_type. \forall case_S : (nat) \to return_type. (((leibniz) (return_type)) (case_O)) (((((match_nat_type) (return_type)) (case_O)) (case_S)) (O)) := \lambda return_type : Type[0]. \lambda case_O : return_type. \lambda case_S : (nat) \to return_type. ((((sym_leibniz) (return_type)) (((((match_nat_type) (return_type)) (case_O)) (case_S)) (O))) (case_O)) ((((eq_match_nat_type_O) (return_type)) (case_O)) (case_S)).
axiom eq_match_nat_type_S : \forall return_type : Type[0]. \forall case_O : return_type. \forall case_S : (nat) \to return_type. \forall n : nat. (((leibniz) (return_type)) (((((match_nat_type) (return_type)) (case_O)) (case_S)) ((S) (n)))) ((case_S) (n)).
definition sym_eq_match_nat_type_S : \forall return_type : Type[0]. \forall case_O : return_type. \forall case_S : (nat) \to return_type. \forall n : nat. (((leibniz) (return_type)) ((case_S) (n))) (((((match_nat_type) (return_type)) (case_O)) (case_S)) ((S) (n))) := \lambda return_type : Type[0]. \lambda case_O : return_type. \lambda case_S : (nat) \to return_type. \lambda n : nat. ((((sym_leibniz) (return_type)) (((((match_nat_type) (return_type)) (case_O)) (case_S)) ((S) (n)))) ((case_S) (n))) (((((eq_match_nat_type_S) (return_type)) (case_O)) (case_S)) (n)).
axiom filter_nat_type : \forall return_ : Type[0]. ((nat) \to return_) \to (nat) \to return_.
axiom eq_filter_nat_type_O : \forall return_type : Type[0]. \forall return_ : (nat) \to return_type. (((leibniz) (return_type)) ((((filter_nat_type) (return_type)) (return_)) (O))) ((return_) (O)).
definition sym_eq_filter_nat_type_O : \forall return_type : Type[0]. \forall return_ : (nat) \to return_type. (((leibniz) (return_type)) ((return_) (O))) ((((filter_nat_type) (return_type)) (return_)) (O)) := \lambda return_type : Type[0]. \lambda return_ : (nat) \to return_type. ((((sym_leibniz) (return_type)) ((((filter_nat_type) (return_type)) (return_)) (O))) ((return_) (O))) (((eq_filter_nat_type_O) (return_type)) (return_)).
axiom eq_filter_nat_type_S : \forall return_type : Type[0]. \forall return_ : (nat) \to return_type. \forall n : nat. (((leibniz) (return_type)) ((((filter_nat_type) (return_type)) (return_)) ((S) (n)))) ((return_) ((S) (n))).
definition sym_eq_filter_nat_type_S : \forall return_type : Type[0]. \forall return_ : (nat) \to return_type. \forall n : nat. (((leibniz) (return_type)) ((return_) ((S) (n)))) ((((filter_nat_type) (return_type)) (return_)) ((S) (n))) := \lambda return_type : Type[0]. \lambda return_ : (nat) \to return_type. \lambda n : nat. ((((sym_leibniz) (return_type)) ((((filter_nat_type) (return_type)) (return_)) ((S) (n)))) ((return_) ((S) (n)))) ((((eq_filter_nat_type_S) (return_type)) (return_)) (n)).
axiom nat_ind : \forall Q : (nat) \to Prop. ((Q) (O)) \to (\forall x : nat. ((Q) (x)) \to (Q) ((S) (x))) \to \forall x : nat. (Q) (x).
definition pred : (nat) \to nat := \lambda n : nat. ((((match_nat_type) (nat)) (O)) (\lambda p : nat. p)) (n).
definition not_zero : (nat) \to Prop := \lambda n : nat. ((((match_nat_type) Prop) (False)) (\lambda p : nat. True)) (n).
axiom le : (nat) \to (nat) \to Prop.
axiom le_n : \forall n : nat. ((le) (n)) (n).
axiom le_S : \forall n : nat. \forall m : nat. (((le) (n)) (m)) \to ((le) (n)) ((S) (m)).
axiom match_le_prop : \forall n : nat. \forall return_ : (nat) \to Prop. ((return_) (n)) \to (\forall m : nat. (return_) ((S) (m))) \to \forall m : nat. (((le) (n)) (m)) \to (return_) (m).
axiom le_ind : \forall n : nat. \forall Q : (nat) \to Prop. ((Q) (n)) \to (\forall m : nat. (((le) (n)) (m)) \to ((Q) (m)) \to (Q) ((S) (m))) \to \forall m : nat. (((le) (n)) (m)) \to (Q) (m).
definition lt : (nat) \to (nat) \to Prop := \lambda n : nat. \lambda m : nat. ((le) ((S) (n))) (m).
axiom plus : (nat) \to (nat) \to nat.
axiom plus_body : (nat) \to (nat) \to nat.
axiom eq_plus : \forall n : nat. (((leibniz) ((nat) \to nat)) ((plus) (n))) ((((filter_nat_type) ((nat) \to nat)) (plus_body)) (n)).
definition sym_eq_plus : \forall n : nat. (((leibniz) ((nat) \to nat)) ((((filter_nat_type) ((nat) \to nat)) (plus_body)) (n))) ((plus) (n)) := \lambda n : nat. ((((sym_leibniz) ((nat) \to nat)) ((plus) (n))) ((((filter_nat_type) ((nat) \to nat)) (plus_body)) (n))) ((eq_plus) (n)).
axiom eq_plus_body_O : (((leibniz) ((nat) \to nat)) ((plus_body) (O))) (\lambda m : nat. m).
definition sym_eq_plus_body_O : (((leibniz) ((nat) \to nat)) (\lambda m : nat. m)) ((plus_body) (O)) := ((((sym_leibniz) ((nat) \to nat)) ((plus_body) (O))) (\lambda m : nat. m)) (eq_plus_body_O).
axiom eq_plus_body_S : \forall n : nat. (((leibniz) ((nat) \to nat)) ((plus_body) ((S) (n)))) (\lambda m : nat. (S) (((plus) (n)) (m))).
definition sym_eq_plus_body_S : \forall n : nat. (((leibniz) ((nat) \to nat)) (\lambda m : nat. (S) (((plus) (n)) (m)))) ((plus_body) ((S) (n))) := \lambda n : nat. ((((sym_leibniz) ((nat) \to nat)) ((plus_body) ((S) (n)))) (\lambda m : nat. (S) (((plus) (n)) (m)))) ((eq_plus_body_S) (n)).
axiom times : (nat) \to (nat) \to nat.
axiom times_body : (nat) \to (nat) \to nat.
axiom eq_times : \forall n : nat. (((leibniz) ((nat) \to nat)) ((times) (n))) ((((filter_nat_type) ((nat) \to nat)) (times_body)) (n)).
definition sym_eq_times : \forall n : nat. (((leibniz) ((nat) \to nat)) ((((filter_nat_type) ((nat) \to nat)) (times_body)) (n))) ((times) (n)) := \lambda n : nat. ((((sym_leibniz) ((nat) \to nat)) ((times) (n))) ((((filter_nat_type) ((nat) \to nat)) (times_body)) (n))) ((eq_times) (n)).
axiom eq_times_body_O : (((leibniz) ((nat) \to nat)) ((times_body) (O))) (\lambda m : nat. O).
definition sym_eq_times_body_O : (((leibniz) ((nat) \to nat)) (\lambda m : nat. O)) ((times_body) (O)) := ((((sym_leibniz) ((nat) \to nat)) ((times_body) (O))) (\lambda m : nat. O)) (eq_times_body_O).
axiom eq_times_body_S : \forall n : nat. (((leibniz) ((nat) \to nat)) ((times_body) ((S) (n)))) (\lambda m : nat. ((plus) (m)) (((times) (n)) (m))).
definition sym_eq_times_body_S : \forall n : nat. (((leibniz) ((nat) \to nat)) (\lambda m : nat. ((plus) (m)) (((times) (n)) (m)))) ((times_body) ((S) (n))) := \lambda n : nat. ((((sym_leibniz) ((nat) \to nat)) ((times_body) ((S) (n)))) (\lambda m : nat. ((plus) (m)) (((times) (n)) (m)))) ((eq_times_body_S) (n)).
axiom minus : (nat) \to (nat) \to nat.
axiom minus_body : (nat) \to (nat) \to nat.
axiom eq_minus : \forall n : nat. (((leibniz) ((nat) \to nat)) ((minus) (n))) ((((filter_nat_type) ((nat) \to nat)) (minus_body)) (n)).
definition sym_eq_minus : \forall n : nat. (((leibniz) ((nat) \to nat)) ((((filter_nat_type) ((nat) \to nat)) (minus_body)) (n))) ((minus) (n)) := \lambda n : nat. ((((sym_leibniz) ((nat) \to nat)) ((minus) (n))) ((((filter_nat_type) ((nat) \to nat)) (minus_body)) (n))) ((eq_minus) (n)).
axiom eq_minus_body_O : (((leibniz) ((nat) \to nat)) ((minus_body) (O))) (\lambda m : nat. O).
definition sym_eq_minus_body_O : (((leibniz) ((nat) \to nat)) (\lambda m : nat. O)) ((minus_body) (O)) := ((((sym_leibniz) ((nat) \to nat)) ((minus_body) (O))) (\lambda m : nat. O)) (eq_minus_body_O).
axiom eq_minus_body_S : \forall n : nat. (((leibniz) ((nat) \to nat)) ((minus_body) ((S) (n)))) (\lambda m : nat. ((((match_nat_type) (nat)) ((S) (n))) (\lambda q : nat. ((minus) (n)) (q))) (m)).
definition sym_eq_minus_body_S : \forall n : nat. (((leibniz) ((nat) \to nat)) (\lambda m : nat. ((((match_nat_type) (nat)) ((S) (n))) (\lambda q : nat. ((minus) (n)) (q))) (m))) ((minus_body) ((S) (n))) := \lambda n : nat. ((((sym_leibniz) ((nat) \to nat)) ((minus_body) ((S) (n)))) (\lambda m : nat. ((((match_nat_type) (nat)) ((S) (n))) (\lambda q : nat. ((minus) (n)) (q))) (m))) ((eq_minus_body_S) (n)).
definition nat_case : \forall n : nat. \forall P : (nat) \to Prop. (((((eq) (nat)) (n)) (O)) \to (P) (O)) \to (\forall m : nat. ((((eq) (nat)) (n)) ((S) (m))) \to (P) ((S) (m))) \to (P) (n) := \lambda n : nat. \lambda P : (nat) \to Prop. ((((nat_ind) (\lambda Jokerx_365 : nat. (((((eq) (nat)) (Jokerx_365)) (O)) \to (P) (O)) \to (\forall m : nat. ((((eq) (nat)) (Jokerx_365)) ((S) (m))) \to (P) ((S) (m))) \to (P) (Jokerx_365))) (\lambda auto : ((((eq) (nat)) (O)) (O)) \to (P) (O). \lambda auto' : \forall m : nat. ((((eq) (nat)) (O)) ((S) (m))) \to (P) ((S) (m)). (auto) (((refl) (nat)) (O)))) (\lambda x_366 : nat. \lambda Jokerx_368 : (((((eq) (nat)) (x_366)) (O)) \to (P) (O)) \to (\forall m : nat. ((((eq) (nat)) (x_366)) ((S) (m))) \to (P) ((S) (m))) \to (P) (x_366). \lambda auto : ((((eq) (nat)) ((S) (x_366))) (O)) \to (P) (O). \lambda auto' : \forall m : nat. ((((eq) (nat)) ((S) (x_366))) ((S) (m))) \to (P) ((S) (m)). ((auto') (x_366)) (((refl) (nat)) ((S) (x_366))))) (n).
definition nat_elim2 : \forall R : (nat) \to (nat) \to Prop. (\forall n : nat. ((R) (O)) (n)) \to (\forall n : nat. ((R) ((S) (n))) (O)) \to (\forall n : nat. \forall m : nat. (((R) (n)) (m)) \to ((R) ((S) (n))) ((S) (m))) \to \forall n : nat. \forall m : nat. ((R) (n)) (m) := \lambda R : (nat) \to (nat) \to Prop. \lambda ROn : \forall n : nat. ((R) (O)) (n). \lambda RSO : \forall n : nat. ((R) ((S) (n))) (O). \lambda RSS : \forall n : nat. \forall m : nat. (((R) (n)) (m)) \to ((R) ((S) (n))) ((S) (m)). \lambda n : nat. ((((nat_ind) (\lambda Jokerx_365 : nat. \forall m : nat. ((R) (Jokerx_365)) (m))) (\lambda m : nat. (ROn) (m))) (\lambda n0 : nat. \lambda Rn0m : \forall m : nat. ((R) (n0)) (m). \lambda m : nat. ((((match_nat_prop) (\lambda Joker_ : nat. ((R) ((S) (n0))) (Joker_))) ((RSO) (n0))) (\lambda auto : nat. (((RSS) (n0)) (auto)) ((Rn0m) (auto)))) (m))) (n).
definition le_gen : \forall P : (nat) \to Prop. \forall n : nat. (\forall i : nat. (((le) (i)) (n)) \to (P) (i)) \to (P) (n) := \lambda P : (nat) \to Prop. \lambda n : nat. \lambda auto : \forall i : nat. (((le) (i)) (n)) \to (P) (i). ((auto) (n)) ((le_n) (n)).
definition pred_Sn : \forall n : nat. (((eq) (nat)) (n)) ((pred) ((S) (n))) := \lambda n : nat. ((((((sym_eq_match_nat_type_S) (nat)) (O)) (\lambda p : nat. p)) (n)) (\lambda y : nat. (((eq) (nat)) (n)) (y))) (((refl) (nat)) (n)).
definition injective_S : (((injective) (nat)) (nat)) (S) := \lambda x : nat. \lambda y : nat. \lambda auto : (((eq) (nat)) ((S) (x))) ((S) (y)). ((((((rewrite_l) (nat)) (y)) (\lambda Joker_ : nat. (((eq) (nat)) (Joker_)) (y))) (((refl) (nat)) (y))) (x)) (((((((rewrite_r) (nat)) ((pred) ((S) (x)))) (\lambda Joker_ : nat. (((eq) (nat)) (y)) (Joker_))) (((((((rewrite_r) (nat)) ((S) (y))) (\lambda Joker_ : nat. (((eq) (nat)) (y)) ((pred) (Joker_)))) ((pred_Sn) (y))) ((S) (x))) (auto))) (x)) ((pred_Sn) (x))).
definition S_pred : \forall n : nat. (((lt) (O)) (n)) \to (((eq) (nat)) ((S) ((pred) (n)))) (n) := \lambda n : nat. \lambda posn : ((lt) (O)) (n). ((((((match_le_prop) ((S) (O))) (\lambda Joker_ : nat. (((eq) (nat)) ((S) ((pred) (Joker_)))) (Joker_))) (((((((rewrite_l) (nat)) (O)) (\lambda Joker_ : nat. (((eq) (nat)) ((S) (Joker_))) ((S) (O)))) (((refl) (nat)) ((S) (O)))) ((pred) ((S) (O)))) ((pred_Sn) (O)))) (\lambda m : nat. ((((((rewrite_l) (nat)) (m)) (\lambda Joker_ : nat. (((eq) (nat)) ((S) (Joker_))) ((S) (m)))) (((refl) (nat)) ((S) (m)))) ((pred) ((S) (m)))) ((pred_Sn) (m)))) (n)) (posn).
definition plus_O_n : \forall n : nat. (((eq) (nat)) (n)) (((plus) (O)) (n)) := \lambda n : nat. (((sym_eq_plus) (O)) (\lambda y : (nat) \to nat. (((eq) (nat)) (n)) ((y) (n)))) (((((sym_eq_filter_nat_type_O) ((nat) \to nat)) (plus_body)) (\lambda y : (nat) \to nat. (((eq) (nat)) (n)) ((y) (n)))) (((sym_eq_plus_body_O) (\lambda y : (nat) \to nat. (((eq) (nat)) (n)) ((y) (n)))) (((refl) (nat)) (n)))).
definition plus_n_O : \forall n : nat. (((eq) (nat)) (n)) (((plus) (n)) (O)) := \lambda n : nat. ((((nat_ind) (\lambda Jokerx_365 : nat. (((eq) (nat)) (Jokerx_365)) (((plus) (Jokerx_365)) (O)))) ((((sym_eq_plus) (O)) (\lambda y : (nat) \to nat. (((eq) (nat)) (O)) ((y) (O)))) (((((sym_eq_filter_nat_type_O) ((nat) \to nat)) (plus_body)) (\lambda y : (nat) \to nat. (((eq) (nat)) (O)) ((y) (O)))) (((sym_eq_plus_body_O) (\lambda y : (nat) \to nat. (((eq) (nat)) (O)) ((y) (O)))) (((refl) (nat)) (O)))))) (\lambda x_366 : nat. \lambda Jokerx_368 : (((eq) (nat)) (x_366)) (((plus) (x_366)) (O)). (((sym_eq_plus) ((S) (x_366))) (\lambda y : (nat) \to nat. (((eq) (nat)) ((S) (x_366))) ((y) (O)))) ((((((sym_eq_filter_nat_type_S) ((nat) \to nat)) (plus_body)) (x_366)) (\lambda y : (nat) \to nat. (((eq) (nat)) ((S) (x_366))) ((y) (O)))) ((((sym_eq_plus_body_S) (x_366)) (\lambda y : (nat) \to nat. (((eq) (nat)) ((S) (x_366))) ((y) (O)))) (((((((rewrite_l) (nat)) (x_366)) (\lambda Joker_ : nat. (((eq) (nat)) ((S) (x_366))) ((S) (Joker_)))) (((refl) (nat)) ((S) (x_366)))) (((plus) (x_366)) (O))) (Jokerx_368)))))) (n).
definition plus_n_Sm : \forall n : nat. \forall m : nat. (((eq) (nat)) ((S) (((plus) (n)) (m)))) (((plus) (n)) ((S) (m))) := \lambda n : nat. ((((nat_ind) (\lambda Jokerx_365 : nat. \forall m : nat. (((eq) (nat)) ((S) (((plus) (Jokerx_365)) (m)))) (((plus) (Jokerx_365)) ((S) (m))))) (\lambda m : nat. (((sym_eq_plus) (O)) (\lambda y : (nat) \to nat. (((eq) (nat)) ((S) ((y) (m)))) (((plus) (O)) ((S) (m))))) ((((sym_eq_plus) (O)) (\lambda y : (nat) \to nat. (((eq) (nat)) ((S) (((((filter_nat_type) ((nat) \to nat)) (plus_body)) (O)) (m)))) ((y) ((S) (m))))) (((((sym_eq_filter_nat_type_O) ((nat) \to nat)) (plus_body)) (\lambda y : (nat) \to nat. (((eq) (nat)) ((S) (((((filter_nat_type) ((nat) \to nat)) (plus_body)) (O)) (m)))) ((y) ((S) (m))))) (((((sym_eq_filter_nat_type_O) ((nat) \to nat)) (plus_body)) (\lambda y : (nat) \to nat. (((eq) (nat)) ((S) ((y) (m)))) (((plus_body) (O)) ((S) (m))))) (((sym_eq_plus_body_O) (\lambda y : (nat) \to nat. (((eq) (nat)) ((S) ((y) (m)))) (((plus_body) (O)) ((S) (m))))) (((sym_eq_plus_body_O) (\lambda y : (nat) \to nat. (((eq) (nat)) ((S) (m))) ((y) ((S) (m))))) (((refl) (nat)) ((S) (m)))))))))) (\lambda x_366 : nat. \lambda Jokerx_368 : \forall m : nat. (((eq) (nat)) ((S) (((plus) (x_366)) (m)))) (((plus) (x_366)) ((S) (m))). \lambda m : nat. (((sym_eq_plus) ((S) (x_366))) (\lambda y : (nat) \to nat. (((eq) (nat)) ((S) ((y) (m)))) (((plus) ((S) (x_366))) ((S) (m))))) ((((sym_eq_plus) ((S) (x_366))) (\lambda y : (nat) \to nat. (((eq) (nat)) ((S) (((((filter_nat_type) ((nat) \to nat)) (plus_body)) ((S) (x_366))) (m)))) ((y) ((S) (m))))) ((((((sym_eq_filter_nat_type_S) ((nat) \to nat)) (plus_body)) (x_366)) (\lambda y : (nat) \to nat. (((eq) (nat)) ((S) (((((filter_nat_type) ((nat) \to nat)) (plus_body)) ((S) (x_366))) (m)))) ((y) ((S) (m))))) ((((((sym_eq_filter_nat_type_S) ((nat) \to nat)) (plus_body)) (x_366)) (\lambda y : (nat) \to nat. (((eq) (nat)) ((S) ((y) (m)))) (((plus_body) ((S) (x_366))) ((S) (m))))) ((((sym_eq_plus_body_S) (x_366)) (\lambda y : (nat) \to nat. (((eq) (nat)) ((S) ((y) (m)))) (((plus_body) ((S) (x_366))) ((S) (m))))) ((((sym_eq_plus_body_S) (x_366)) (\lambda y : (nat) \to nat. (((eq) (nat)) ((S) ((S) (((plus) (x_366)) (m))))) ((y) ((S) (m))))) (((((((rewrite_r) (nat)) (((plus) (x_366)) ((S) (m)))) (\lambda Joker_ : nat. (((eq) (nat)) ((S) (Joker_))) ((S) (((plus) (x_366)) ((S) (m)))))) (((((((rewrite_r) (nat)) (((plus) (x_366)) ((S) ((S) (m))))) (\lambda Joker_ : nat. (((eq) (nat)) (Joker_)) ((S) (((plus) (x_366)) ((S) (m)))))) (((((((rewrite_r) (nat)) (((plus) (x_366)) ((S) ((S) (m))))) (\lambda Joker_ : nat. (((eq) (nat)) (((plus) (x_366)) ((S) ((S) (m))))) (Joker_))) (((refl) (nat)) (((plus) (x_366)) ((S) ((S) (m)))))) ((S) (((plus) (x_366)) ((S) (m))))) ((Jokerx_368) ((S) (m))))) ((S) (((plus) (x_366)) ((S) (m))))) ((Jokerx_368) ((S) (m))))) ((S) (((plus) (x_366)) (m)))) ((Jokerx_368) (m)))))))))) (n).
definition commutative_plus : ((commutative) (nat)) (plus) := \lambda n : nat. ((((nat_ind) (\lambda Jokerx_365 : nat. \forall y : nat. (((eq) (nat)) (((plus) (Jokerx_365)) (y))) (((plus) (y)) (Jokerx_365)))) (\lambda y : nat. (((sym_eq_plus) (O)) (\lambda z : (nat) \to nat. (((eq) (nat)) ((z) (y))) (((plus) (y)) (O)))) (((((sym_eq_filter_nat_type_O) ((nat) \to nat)) (plus_body)) (\lambda z : (nat) \to nat. (((eq) (nat)) ((z) (y))) (((plus) (y)) (O)))) (((sym_eq_plus_body_O) (\lambda z : (nat) \to nat. (((eq) (nat)) ((z) (y))) (((plus) (y)) (O)))) (((((((rewrite_l) (nat)) (y)) (\lambda Joker_ : nat. (((eq) (nat)) (y)) (Joker_))) (((refl) (nat)) (y))) (((plus) (y)) (O))) ((plus_n_O) (y))))))) (\lambda x_366 : nat. \lambda Jokerx_368 : \forall y : nat. (((eq) (nat)) (((plus) (x_366)) (y))) (((plus) (y)) (x_366)). \lambda y : nat. (((sym_eq_plus) ((S) (x_366))) (\lambda z : (nat) \to nat. (((eq) (nat)) ((z) (y))) (((plus) (y)) ((S) (x_366))))) ((((((sym_eq_filter_nat_type_S) ((nat) \to nat)) (plus_body)) (x_366)) (\lambda z : (nat) \to nat. (((eq) (nat)) ((z) (y))) (((plus) (y)) ((S) (x_366))))) ((((sym_eq_plus_body_S) (x_366)) (\lambda z : (nat) \to nat. (((eq) (nat)) ((z) (y))) (((plus) (y)) ((S) (x_366))))) (((((((rewrite_r) (nat)) (((plus) (x_366)) ((S) (y)))) (\lambda Joker_ : nat. (((eq) (nat)) (Joker_)) (((plus) (y)) ((S) (x_366))))) (((((((rewrite_r) (nat)) (((plus) (y)) ((S) (x_366)))) (\lambda Joker_ : nat. (((eq) (nat)) (Joker_)) (((plus) (y)) ((S) (x_366))))) (((refl) (nat)) (((plus) (y)) ((S) (x_366))))) (((plus) (x_366)) ((S) (y)))) (((((((rewrite_l) (nat)) ((S) (((plus) (x_366)) (y)))) (\lambda Joker_ : nat. (((eq) (nat)) (Joker_)) (((plus) (y)) ((S) (x_366))))) (((((((rewrite_r) (nat)) (((plus) (y)) (x_366))) (\lambda Joker_ : nat. (((eq) (nat)) ((S) (Joker_))) (((plus) (y)) ((S) (x_366))))) (((plus_n_Sm) (y)) (x_366))) (((plus) (x_366)) (y))) ((Jokerx_368) (y)))) (((plus) (x_366)) ((S) (y)))) (((plus_n_Sm) (x_366)) (y))))) ((S) (((plus) (x_366)) (y)))) (((plus_n_Sm) (x_366)) (y))))))) (n).
definition associative_plus : ((associative) (nat)) (plus) := \lambda n : nat. ((((nat_ind) (\lambda Jokerx_365 : nat. \forall y : nat. \forall z : nat. (((eq) (nat)) (((plus) (((plus) (Jokerx_365)) (y))) (z))) (((plus) (Jokerx_365)) (((plus) (y)) (z))))) (\lambda y : nat. \lambda z : nat. (((sym_eq_plus) (O)) (\lambda x : (nat) \to nat. (((eq) (nat)) (((plus) (((plus) (O)) (y))) (z))) ((x) (((plus) (y)) (z))))) ((((sym_eq_plus) (O)) (\lambda x : (nat) \to nat. (((eq) (nat)) (((plus) ((x) (y))) (z))) (((((filter_nat_type) ((nat) \to nat)) (plus_body)) (O)) (((plus) (y)) (z))))) (((((sym_eq_filter_nat_type_O) ((nat) \to nat)) (plus_body)) (\lambda x : (nat) \to nat. (((eq) (nat)) (((plus) ((x) (y))) (z))) (((((filter_nat_type) ((nat) \to nat)) (plus_body)) (O)) (((plus) (y)) (z))))) (((((sym_eq_filter_nat_type_O) ((nat) \to nat)) (plus_body)) (\lambda x : (nat) \to nat. (((eq) (nat)) (((plus) (((plus_body) (O)) (y))) (z))) ((x) (((plus) (y)) (z))))) (((sym_eq_plus_body_O) (\lambda x : (nat) \to nat. (((eq) (nat)) (((plus) (((plus_body) (O)) (y))) (z))) ((x) (((plus) (y)) (z))))) (((sym_eq_plus_body_O) (\lambda x : (nat) \to nat. (((eq) (nat)) (((plus) ((x) (y))) (z))) (((plus) (y)) (z)))) (((refl) (nat)) (((plus) (y)) (z)))))))))) (\lambda x_366 : nat. \lambda Jokerx_368 : \forall y : nat. \forall z : nat. (((eq) (nat)) (((plus) (((plus) (x_366)) (y))) (z))) (((plus) (x_366)) (((plus) (y)) (z))). \lambda y : nat. \lambda z : nat. (((sym_eq_plus) ((S) (x_366))) (\lambda x : (nat) \to nat. (((eq) (nat)) (((plus) (((plus) ((S) (x_366))) (y))) (z))) ((x) (((plus) (y)) (z))))) ((((sym_eq_plus) ((S) (x_366))) (\lambda x : (nat) \to nat. (((eq) (nat)) (((plus) ((x) (y))) (z))) (((((filter_nat_type) ((nat) \to nat)) (plus_body)) ((S) (x_366))) (((plus) (y)) (z))))) ((((((sym_eq_filter_nat_type_S) ((nat) \to nat)) (plus_body)) (x_366)) (\lambda x : (nat) \to nat. (((eq) (nat)) (((plus) ((x) (y))) (z))) (((((filter_nat_type) ((nat) \to nat)) (plus_body)) ((S) (x_366))) (((plus) (y)) (z))))) ((((((sym_eq_filter_nat_type_S) ((nat) \to nat)) (plus_body)) (x_366)) (\lambda x : (nat) \to nat. (((eq) (nat)) (((plus) (((plus_body) ((S) (x_366))) (y))) (z))) ((x) (((plus) (y)) (z))))) ((((sym_eq_plus_body_S) (x_366)) (\lambda x : (nat) \to nat. (((eq) (nat)) (((plus) (((plus_body) ((S) (x_366))) (y))) (z))) ((x) (((plus) (y)) (z))))) ((((sym_eq_plus_body_S) (x_366)) (\lambda x : (nat) \to nat. (((eq) (nat)) (((plus) ((x) (y))) (z))) ((S) (((plus) (x_366)) (((plus) (y)) (z)))))) ((((sym_eq_plus) ((S) (((plus) (x_366)) (y)))) (\lambda x : (nat) \to nat. (((eq) (nat)) ((x) (z))) ((S) (((plus) (x_366)) (((plus) (y)) (z)))))) ((((((sym_eq_filter_nat_type_S) ((nat) \to nat)) (plus_body)) (((plus) (x_366)) (y))) (\lambda x : (nat) \to nat. (((eq) (nat)) ((x) (z))) ((S) (((plus) (x_366)) (((plus) (y)) (z)))))) ((((sym_eq_plus_body_S) (((plus) (x_366)) (y))) (\lambda x : (nat) \to nat. (((eq) (nat)) ((x) (z))) ((S) (((plus) (x_366)) (((plus) (y)) (z)))))) (((((((rewrite_r) (nat)) (((plus) (x_366)) (((plus) (y)) (z)))) (\lambda Joker_ : nat. (((eq) (nat)) ((S) (Joker_))) ((S) (((plus) (x_366)) (((plus) (y)) (z)))))) (((refl) (nat)) ((S) (((plus) (x_366)) (((plus) (y)) (z)))))) (((plus) (((plus) (x_366)) (y))) (z))) (((Jokerx_368) (y)) (z))))))))))))) (n).
definition assoc_plus1 : \forall a : nat. \forall b : nat. \forall c : nat. (((eq) (nat)) (((plus) (c)) (((plus) (b)) (a)))) (((plus) (((plus) (b)) (c))) (a)) := \lambda a : nat. \lambda b : nat. \lambda c : nat. ((((((rewrite_r) (nat)) (((plus) (a)) (b))) (\lambda Joker_ : nat. (((eq) (nat)) (((plus) (c)) (Joker_))) (((plus) (((plus) (b)) (c))) (a)))) (((((((rewrite_r) (nat)) (((plus) (a)) (((plus) (b)) (c)))) (\lambda Joker_ : nat. (((eq) (nat)) (((plus) (c)) (((plus) (a)) (b)))) (Joker_))) (((((((rewrite_r) (nat)) (((plus) (a)) (((plus) (b)) (c)))) (\lambda Joker_ : nat. (((eq) (nat)) (Joker_)) (((plus) (a)) (((plus) (b)) (c))))) (((refl) (nat)) (((plus) (a)) (((plus) (b)) (c))))) (((plus) (c)) (((plus) (a)) (b)))) (((((((rewrite_l) (nat)) (((plus) (((plus) (a)) (b))) (c))) (\lambda Joker_ : nat. (((eq) (nat)) (((plus) (c)) (((plus) (a)) (b)))) (Joker_))) (((commutative_plus) (c)) (((plus) (a)) (b)))) (((plus) (a)) (((plus) (b)) (c)))) ((((associative_plus) (a)) (b)) (c))))) (((plus) (((plus) (b)) (c))) (a))) (((commutative_plus) (((plus) (b)) (c))) (a)))) (((plus) (b)) (a))) (((commutative_plus) (b)) (a)).
definition injective_plus_r : \forall n : nat. (((injective) (nat)) (nat)) (\lambda m : nat. ((plus) (n)) (m)) := \lambda n : nat. ((((nat_ind) (\lambda Jokerx_365 : nat. (((injective) (nat)) (nat)) (\lambda m : nat. ((plus) (Jokerx_365)) (m)))) ((((sym_eq_plus) (O)) (\lambda y : (nat) \to nat. (((injective) (nat)) (nat)) (\lambda m : nat. (y) (m)))) (((((sym_eq_filter_nat_type_O) ((nat) \to nat)) (plus_body)) (\lambda y : (nat) \to nat. (((injective) (nat)) (nat)) (\lambda m : nat. (y) (m)))) (((sym_eq_plus_body_O) (\lambda y : (nat) \to nat. (((injective) (nat)) (nat)) (\lambda m : nat. (y) (m)))) (\lambda x : nat. \lambda y : nat. \lambda auto : (((eq) (nat)) (x)) (y). ((((((rewrite_l) (nat)) (x)) (\lambda Joker_ : nat. (((eq) (nat)) (x)) (Joker_))) (((refl) (nat)) (x))) (y)) (auto)))))) (\lambda x_366 : nat. \lambda Jokerx_368 : \forall x : nat. \forall y : nat. ((((eq) (nat)) (((plus) (x_366)) (x))) (((plus) (x_366)) (y))) \to (((eq) (nat)) (x)) (y). (((sym_eq_plus) ((S) (x_366))) (\lambda y : (nat) \to nat. (((injective) (nat)) (nat)) (\lambda m : nat. (y) (m)))) ((((((sym_eq_filter_nat_type_S) ((nat) \to nat)) (plus_body)) (x_366)) (\lambda y : (nat) \to nat. (((injective) (nat)) (nat)) (\lambda m : nat. (y) (m)))) ((((sym_eq_plus_body_S) (x_366)) (\lambda y : (nat) \to nat. (((injective) (nat)) (nat)) (\lambda m : nat. (y) (m)))) (\lambda x : nat. \lambda y : nat. \lambda auto : (((eq) (nat)) ((S) (((plus) (x_366)) (x)))) ((S) (((plus) (x_366)) (y))). (((Jokerx_368) (x)) (y)) ((((injective_S) (((plus) (x_366)) (x))) (((plus) (x_366)) (y))) (((((((rewrite_r) (nat)) (((plus) (x_366)) ((S) (x)))) (\lambda Joker_ : nat. (((eq) (nat)) (Joker_)) ((S) (((plus) (x_366)) (y))))) (((((((rewrite_r) (nat)) (((plus) (x_366)) ((S) (y)))) (\lambda Joker_ : nat. (((eq) (nat)) (((plus) (x_366)) ((S) (x)))) (Joker_))) (((((((rewrite_l) (nat)) (((plus) (x_366)) ((S) (x)))) (\lambda Joker_ : nat. (((eq) (nat)) (((plus) (x_366)) ((S) (x)))) (Joker_))) (((refl) (nat)) (((plus) (x_366)) ((S) (x))))) (((plus) (x_366)) ((S) (y)))) (((((((rewrite_l) (nat)) ((S) (((plus) (x_366)) (y)))) (\lambda Joker_ : nat. (((eq) (nat)) (((plus) (x_366)) ((S) (x)))) (Joker_))) (((((((rewrite_l) (nat)) ((S) (((plus) (x_366)) (x)))) (\lambda Joker_ : nat. (((eq) (nat)) (Joker_)) ((S) (((plus) (x_366)) (y))))) (auto)) (((plus) (x_366)) ((S) (x)))) (((plus_n_Sm) (x_366)) (x)))) (((plus) (x_366)) ((S) (y)))) (((plus_n_Sm) (x_366)) (y))))) ((S) (((plus) (x_366)) (y)))) (((plus_n_Sm) (x_366)) (y)))) ((S) (((plus) (x_366)) (x)))) (((plus_n_Sm) (x_366)) (x))))))))) (n).
definition times_Sn_m : \forall n : nat. \forall m : nat. (((eq) (nat)) (((plus) (m)) (((times) (n)) (m)))) (((times) ((S) (n))) (m)) := \lambda n : nat. \lambda m : nat. (((sym_eq_times) ((S) (n))) (\lambda y : (nat) \to nat. (((eq) (nat)) (((plus) (m)) (((times) (n)) (m)))) ((y) (m)))) ((((((sym_eq_filter_nat_type_S) ((nat) \to nat)) (times_body)) (n)) (\lambda y : (nat) \to nat. (((eq) (nat)) (((plus) (m)) (((times) (n)) (m)))) ((y) (m)))) ((((sym_eq_times_body_S) (n)) (\lambda y : (nat) \to nat. (((eq) (nat)) (((plus) (m)) (((times) (n)) (m)))) ((y) (m)))) (((refl) (nat)) (((plus) (m)) (((times) (n)) (m)))))).
definition times_O_n : \forall n : nat. (((eq) (nat)) (O)) (((times) (O)) (n)) := \lambda n : nat. (((sym_eq_times) (O)) (\lambda y : (nat) \to nat. (((eq) (nat)) (O)) ((y) (n)))) (((((sym_eq_filter_nat_type_O) ((nat) \to nat)) (times_body)) (\lambda y : (nat) \to nat. (((eq) (nat)) (O)) ((y) (n)))) (((sym_eq_times_body_O) (\lambda y : (nat) \to nat. (((eq) (nat)) (O)) ((y) (n)))) (((refl) (nat)) (O)))).
definition times_n_O : \forall n : nat. (((eq) (nat)) (O)) (((times) (n)) (O)) := \lambda n : nat. ((((nat_ind) (\lambda Jokerx_365 : nat. (((eq) (nat)) (O)) (((times) (Jokerx_365)) (O)))) (((((((rewrite_l) (nat)) (O)) (\lambda Joker_ : nat. (((eq) (nat)) (O)) (Joker_))) (((refl) (nat)) (O))) (((times) (O)) (O))) ((times_O_n) (O)))) (\lambda x_366 : nat. \lambda Jokerx_368 : (((eq) (nat)) (O)) (((times) (x_366)) (O)). ((((((rewrite_l) (nat)) (((plus) (O)) (((times) (x_366)) (O)))) (\lambda Joker_ : nat. (((eq) (nat)) (O)) (Joker_))) (((((((rewrite_l) (nat)) (O)) (\lambda Joker_ : nat. (((eq) (nat)) (O)) (((plus) (O)) (Joker_)))) (((((((rewrite_l) (nat)) (O)) (\lambda Joker_ : nat. (((eq) (nat)) (O)) (Joker_))) (((refl) (nat)) (O))) (((plus) (O)) (O))) ((plus_O_n) (O)))) (((times) (x_366)) (O))) (Jokerx_368))) (((times) ((S) (x_366))) (O))) (((times_Sn_m) (x_366)) (O)))) (n).
definition times_n_Sm : \forall n : nat. \forall m : nat. (((eq) (nat)) (((plus) (n)) (((times) (n)) (m)))) (((times) (n)) ((S) (m))) := \lambda n : nat. ((((nat_ind) (\lambda Jokerx_365 : nat. \forall m : nat. (((eq) (nat)) (((plus) (Jokerx_365)) (((times) (Jokerx_365)) (m)))) (((times) (Jokerx_365)) ((S) (m))))) ((((sym_eq_times) (O)) (\lambda y : (nat) \to nat. \forall m : nat. (((eq) (nat)) (((plus) (O)) (((times) (O)) (m)))) ((y) ((S) (m))))) ((((sym_eq_times) (O)) (\lambda y : (nat) \to nat. \forall m : nat. (((eq) (nat)) (((plus) (O)) ((y) (m)))) (((((filter_nat_type) ((nat) \to nat)) (times_body)) (O)) ((S) (m))))) (((((sym_eq_filter_nat_type_O) ((nat) \to nat)) (times_body)) (\lambda y : (nat) \to nat. \forall m : nat. (((eq) (nat)) (((plus) (O)) ((y) (m)))) (((((filter_nat_type) ((nat) \to nat)) (times_body)) (O)) ((S) (m))))) (((((sym_eq_filter_nat_type_O) ((nat) \to nat)) (times_body)) (\lambda y : (nat) \to nat. \forall m : nat. (((eq) (nat)) (((plus) (O)) (((times_body) (O)) (m)))) ((y) ((S) (m))))) (((sym_eq_times_body_O) (\lambda y : (nat) \to nat. \forall m : nat. (((eq) (nat)) (((plus) (O)) (((times_body) (O)) (m)))) ((y) ((S) (m))))) (((sym_eq_times_body_O) (\lambda y : (nat) \to nat. \forall m : nat. (((eq) (nat)) (((plus) (O)) ((y) (m)))) (O))) ((((sym_eq_plus) (O)) (\lambda y : (nat) \to nat. \forall m : nat. (((eq) (nat)) ((y) (O))) (O))) (((((sym_eq_filter_nat_type_O) ((nat) \to nat)) (plus_body)) (\lambda y : (nat) \to nat. \forall m : nat. (((eq) (nat)) ((y) (O))) (O))) (((sym_eq_plus_body_O) (\lambda y : (nat) \to nat. \forall m : nat. (((eq) (nat)) ((y) (O))) (O))) (\lambda Jokerm : nat. ((refl) (nat)) (O)))))))))))) (\lambda x_366 : nat. \lambda Jokerx_368 : \forall m : nat. (((eq) (nat)) (((plus) (x_366)) (((times) (x_366)) (m)))) (((times) (x_366)) ((S) (m))). \lambda m : nat. (((sym_eq_times) ((S) (x_366))) (\lambda y : (nat) \to nat. (((eq) (nat)) (((plus) ((S) (x_366))) (((times) ((S) (x_366))) (m)))) ((y) ((S) (m))))) ((((sym_eq_times) ((S) (x_366))) (\lambda y : (nat) \to nat. (((eq) (nat)) (((plus) ((S) (x_366))) ((y) (m)))) (((((filter_nat_type) ((nat) \to nat)) (times_body)) ((S) (x_366))) ((S) (m))))) ((((((sym_eq_filter_nat_type_S) ((nat) \to nat)) (times_body)) (x_366)) (\lambda y : (nat) \to nat. (((eq) (nat)) (((plus) ((S) (x_366))) ((y) (m)))) (((((filter_nat_type) ((nat) \to nat)) (times_body)) ((S) (x_366))) ((S) (m))))) ((((((sym_eq_filter_nat_type_S) ((nat) \to nat)) (times_body)) (x_366)) (\lambda y : (nat) \to nat. (((eq) (nat)) (((plus) ((S) (x_366))) (((times_body) ((S) (x_366))) (m)))) ((y) ((S) (m))))) ((((sym_eq_times_body_S) (x_366)) (\lambda y : (nat) \to nat. (((eq) (nat)) (((plus) ((S) (x_366))) (((times_body) ((S) (x_366))) (m)))) ((y) ((S) (m))))) ((((sym_eq_times_body_S) (x_366)) (\lambda y : (nat) \to nat. (((eq) (nat)) (((plus) ((S) (x_366))) ((y) (m)))) (((plus) ((S) (m))) (((times) (x_366)) ((S) (m)))))) ((((sym_eq_plus) ((S) (x_366))) (\lambda y : (nat) \to nat. (((eq) (nat)) ((y) (((plus) (m)) (((times) (x_366)) (m))))) (((plus) ((S) (m))) (((times) (x_366)) ((S) (m)))))) ((((((sym_eq_filter_nat_type_S) ((nat) \to nat)) (plus_body)) (x_366)) (\lambda y : (nat) \to nat. (((eq) (nat)) ((y) (((plus) (m)) (((times) (x_366)) (m))))) (((plus) ((S) (m))) (((times) (x_366)) ((S) (m)))))) ((((sym_eq_plus_body_S) (x_366)) (\lambda y : (nat) \to nat. (((eq) (nat)) ((y) (((plus) (m)) (((times) (x_366)) (m))))) (((plus) ((S) (m))) (((times) (x_366)) ((S) (m)))))) ((((sym_eq_plus) ((S) (m))) (\lambda y : (nat) \to nat. (((eq) (nat)) ((S) (((plus) (x_366)) (((plus) (m)) (((times) (x_366)) (m)))))) ((y) (((times) (x_366)) ((S) (m)))))) ((((((sym_eq_filter_nat_type_S) ((nat) \to nat)) (plus_body)) (m)) (\lambda y : (nat) \to nat. (((eq) (nat)) ((S) (((plus) (x_366)) (((plus) (m)) (((times) (x_366)) (m)))))) ((y) (((times) (x_366)) ((S) (m)))))) ((((sym_eq_plus_body_S) (m)) (\lambda y : (nat) \to nat. (((eq) (nat)) ((S) (((plus) (x_366)) (((plus) (m)) (((times) (x_366)) (m)))))) ((y) (((times) (x_366)) ((S) (m)))))) (((((((rewrite_r) (nat)) (((plus) (x_366)) ((S) (((plus) (m)) (((times) (x_366)) (m)))))) (\lambda Joker_ : nat. (((eq) (nat)) (Joker_)) ((S) (((plus) (m)) (((times) (x_366)) ((S) (m))))))) (((((((rewrite_r) (nat)) (((plus) (m)) ((S) (((times) (x_366)) (m))))) (\lambda Joker_ : nat. (((eq) (nat)) (((plus) (x_366)) (Joker_))) ((S) (((plus) (m)) (((times) (x_366)) ((S) (m))))))) (((((((rewrite_l) (nat)) (((plus) (x_366)) (((times) (x_366)) (m)))) (\lambda Joker_ : nat. (((eq) (nat)) (((plus) (x_366)) (((plus) (m)) ((S) (((times) (x_366)) (m)))))) ((S) (((plus) (m)) (Joker_))))) (((((((rewrite_r) (nat)) (((plus) (x_366)) (((plus) (m)) (((times) (x_366)) (m))))) (\lambda Joker_ : nat. (((eq) (nat)) (((plus) (x_366)) (((plus) (m)) ((S) (((times) (x_366)) (m)))))) ((S) (Joker_)))) (((((((rewrite_r) (nat)) (((plus) (x_366)) ((S) (((plus) (m)) (((times) (x_366)) (m)))))) (\lambda Joker_ : nat. (((eq) (nat)) (((plus) (x_366)) (((plus) (m)) ((S) (((times) (x_366)) (m)))))) (Joker_))) (((((((rewrite_r) (nat)) (((plus) (m)) ((S) (((times) (x_366)) (m))))) (\lambda Joker_ : nat. (((eq) (nat)) (((plus) (x_366)) (((plus) (m)) ((S) (((times) (x_366)) (m)))))) (((plus) (x_366)) (Joker_)))) (((refl) (nat)) (((plus) (x_366)) (((plus) (m)) ((S) (((times) (x_366)) (m))))))) ((S) (((plus) (m)) (((times) (x_366)) (m))))) (((plus_n_Sm) (m)) (((times) (x_366)) (m))))) ((S) (((plus) (x_366)) (((plus) (m)) (((times) (x_366)) (m)))))) (((plus_n_Sm) (x_366)) (((plus) (m)) (((times) (x_366)) (m)))))) (((plus) (m)) (((plus) (x_366)) (((times) (x_366)) (m))))) (((((((rewrite_l) (nat)) (((plus) (((plus) (x_366)) (m))) (((times) (x_366)) (m)))) (\lambda Joker_ : nat. (((eq) (nat)) (((plus) (m)) (((plus) (x_366)) (((times) (x_366)) (m))))) (Joker_))) ((((assoc_plus1) (((times) (x_366)) (m))) (x_366)) (m))) (((plus) (x_366)) (((plus) (m)) (((times) (x_366)) (m))))) ((((associative_plus) (x_366)) (m)) (((times) (x_366)) (m)))))) (((times) (x_366)) ((S) (m)))) ((Jokerx_368) (m)))) ((S) (((plus) (m)) (((times) (x_366)) (m))))) (((plus_n_Sm) (m)) (((times) (x_366)) (m))))) ((S) (((plus) (x_366)) (((plus) (m)) (((times) (x_366)) (m)))))) (((plus_n_Sm) (x_366)) (((plus) (m)) (((times) (x_366)) (m)))))))))))))))))) (n).
definition commutative_times : ((commutative) (nat)) (times) := \lambda n : nat. ((((nat_ind) (\lambda Jokerx_365 : nat. \forall y : nat. (((eq) (nat)) (((times) (Jokerx_365)) (y))) (((times) (y)) (Jokerx_365)))) ((((sym_eq_times) (O)) (\lambda y : (nat) \to nat. \forall z : nat. (((eq) (nat)) ((y) (z))) (((times) (z)) (O)))) (((((sym_eq_filter_nat_type_O) ((nat) \to nat)) (times_body)) (\lambda y : (nat) \to nat. \forall z : nat. (((eq) (nat)) ((y) (z))) (((times) (z)) (O)))) (((sym_eq_times_body_O) (\lambda y : (nat) \to nat. \forall z : nat. (((eq) (nat)) ((y) (z))) (((times) (z)) (O)))) (\lambda y : nat. ((((((rewrite_l) (nat)) (O)) (\lambda Joker_ : nat. (((eq) (nat)) (O)) (Joker_))) (((refl) (nat)) (O))) (((times) (y)) (O))) ((times_n_O) (y))))))) (\lambda x_366 : nat. \lambda Jokerx_368 : \forall y : nat. (((eq) (nat)) (((times) (x_366)) (y))) (((times) (y)) (x_366)). \lambda y : nat. (((sym_eq_times) ((S) (x_366))) (\lambda z : (nat) \to nat. (((eq) (nat)) ((z) (y))) (((times) (y)) ((S) (x_366))))) ((((((sym_eq_filter_nat_type_S) ((nat) \to nat)) (times_body)) (x_366)) (\lambda z : (nat) \to nat. (((eq) (nat)) ((z) (y))) (((times) (y)) ((S) (x_366))))) ((((sym_eq_times_body_S) (x_366)) (\lambda z : (nat) \to nat. (((eq) (nat)) ((z) (y))) (((times) (y)) ((S) (x_366))))) (((((((rewrite_l) (nat)) (((plus) (y)) (((times) (y)) (x_366)))) (\lambda Joker_ : nat. (((eq) (nat)) (((plus) (y)) (((times) (x_366)) (y)))) (Joker_))) (((((((rewrite_l) (nat)) (((times) (x_366)) (y))) (\lambda Joker_ : nat. (((eq) (nat)) (((plus) (y)) (((times) (x_366)) (y)))) (((plus) (y)) (Joker_)))) (((refl) (nat)) (((plus) (y)) (((times) (x_366)) (y))))) (((times) (y)) (x_366))) ((Jokerx_368) (y)))) (((times) (y)) ((S) (x_366)))) (((times_n_Sm) (y)) (x_366))))))) (n).
definition distributive_times_plus : (((distributive) (nat)) (times)) (plus) := \lambda n : nat. ((((nat_ind) (\lambda Jokerx_365 : nat. \forall y : nat. \forall z : nat. (((eq) (nat)) (((times) (Jokerx_365)) (((plus) (y)) (z)))) (((plus) (((times) (Jokerx_365)) (y))) (((times) (Jokerx_365)) (z))))) ((((sym_eq_times) (O)) (\lambda x : (nat) \to nat. \forall y : nat. \forall z : nat. (((eq) (nat)) (((times) (O)) (((plus) (y)) (z)))) (((plus) (((times) (O)) (y))) ((x) (z))))) ((((sym_eq_times) (O)) (\lambda x : (nat) \to nat. \forall y : nat. \forall z : nat. (((eq) (nat)) (((times) (O)) (((plus) (y)) (z)))) (((plus) ((x) (y))) (((((filter_nat_type) ((nat) \to nat)) (times_body)) (O)) (z))))) ((((sym_eq_times) (O)) (\lambda x : (nat) \to nat. \forall y : nat. \forall z : nat. (((eq) (nat)) ((x) (((plus) (y)) (z)))) (((plus) (((((filter_nat_type) ((nat) \to nat)) (times_body)) (O)) (y))) (((((filter_nat_type) ((nat) \to nat)) (times_body)) (O)) (z))))) (((((sym_eq_filter_nat_type_O) ((nat) \to nat)) (times_body)) (\lambda x : (nat) \to nat. \forall y : nat. \forall z : nat. (((eq) (nat)) ((x) (((plus) (y)) (z)))) (((plus) (((((filter_nat_type) ((nat) \to nat)) (times_body)) (O)) (y))) (((((filter_nat_type) ((nat) \to nat)) (times_body)) (O)) (z))))) (((((sym_eq_filter_nat_type_O) ((nat) \to nat)) (times_body)) (\lambda x : (nat) \to nat. \forall y : nat. \forall z : nat. (((eq) (nat)) (((times_body) (O)) (((plus) (y)) (z)))) (((plus) ((x) (y))) (((((filter_nat_type) ((nat) \to nat)) (times_body)) (O)) (z))))) (((((sym_eq_filter_nat_type_O) ((nat) \to nat)) (times_body)) (\lambda x : (nat) \to nat. \forall y : nat. \forall z : nat. (((eq) (nat)) (((times_body) (O)) (((plus) (y)) (z)))) (((plus) (((times_body) (O)) (y))) ((x) (z))))) (((sym_eq_times_body_O) (\lambda x : (nat) \to nat. \forall y : nat. \forall z : nat. (((eq) (nat)) (((times_body) (O)) (((plus) (y)) (z)))) (((plus) (((times_body) (O)) (y))) ((x) (z))))) (((sym_eq_times_body_O) (\lambda x : (nat) \to nat. \forall y : nat. \forall z : nat. (((eq) (nat)) (((times_body) (O)) (((plus) (y)) (z)))) (((plus) ((x) (y))) (O)))) (((sym_eq_times_body_O) (\lambda x : (nat) \to nat. \forall y : nat. \forall z : nat. (((eq) (nat)) ((x) (((plus) (y)) (z)))) (((plus) (O)) (O)))) ((((sym_eq_plus) (O)) (\lambda x : (nat) \to nat. \forall y : nat. \forall z : nat. (((eq) (nat)) (O)) ((x) (O)))) (((((sym_eq_filter_nat_type_O) ((nat) \to nat)) (plus_body)) (\lambda x : (nat) \to nat. \forall y : nat. \forall z : nat. (((eq) (nat)) (O)) ((x) (O)))) (((sym_eq_plus_body_O) (\lambda x : (nat) \to nat. \forall y : nat. \forall z : nat. (((eq) (nat)) (O)) ((x) (O)))) (\lambda Jokery : nat. \lambda Jokerz : nat. ((refl) (nat)) (O))))))))))))))) (\lambda x_366 : nat. \lambda Jokerx_368 : \forall y : nat. \forall z : nat. (((eq) (nat)) (((times) (x_366)) (((plus) (y)) (z)))) (((plus) (((times) (x_366)) (y))) (((times) (x_366)) (z))). \lambda y : nat. \lambda z : nat. (((sym_eq_times) ((S) (x_366))) (\lambda x : (nat) \to nat. (((eq) (nat)) (((times) ((S) (x_366))) (((plus) (y)) (z)))) (((plus) (((times) ((S) (x_366))) (y))) ((x) (z))))) ((((sym_eq_times) ((S) (x_366))) (\lambda x : (nat) \to nat. (((eq) (nat)) (((times) ((S) (x_366))) (((plus) (y)) (z)))) (((plus) ((x) (y))) (((((filter_nat_type) ((nat) \to nat)) (times_body)) ((S) (x_366))) (z))))) ((((sym_eq_times) ((S) (x_366))) (\lambda x : (nat) \to nat. (((eq) (nat)) ((x) (((plus) (y)) (z)))) (((plus) (((((filter_nat_type) ((nat) \to nat)) (times_body)) ((S) (x_366))) (y))) (((((filter_nat_type) ((nat) \to nat)) (times_body)) ((S) (x_366))) (z))))) ((((((sym_eq_filter_nat_type_S) ((nat) \to nat)) (times_body)) (x_366)) (\lambda x : (nat) \to nat. (((eq) (nat)) ((x) (((plus) (y)) (z)))) (((plus) (((((filter_nat_type) ((nat) \to nat)) (times_body)) ((S) (x_366))) (y))) (((((filter_nat_type) ((nat) \to nat)) (times_body)) ((S) (x_366))) (z))))) ((((((sym_eq_filter_nat_type_S) ((nat) \to nat)) (times_body)) (x_366)) (\lambda x : (nat) \to nat. (((eq) (nat)) (((times_body) ((S) (x_366))) (((plus) (y)) (z)))) (((plus) ((x) (y))) (((((filter_nat_type) ((nat) \to nat)) (times_body)) ((S) (x_366))) (z))))) ((((((sym_eq_filter_nat_type_S) ((nat) \to nat)) (times_body)) (x_366)) (\lambda x : (nat) \to nat. (((eq) (nat)) (((times_body) ((S) (x_366))) (((plus) (y)) (z)))) (((plus) (((times_body) ((S) (x_366))) (y))) ((x) (z))))) ((((sym_eq_times_body_S) (x_366)) (\lambda x : (nat) \to nat. (((eq) (nat)) (((times_body) ((S) (x_366))) (((plus) (y)) (z)))) (((plus) (((times_body) ((S) (x_366))) (y))) ((x) (z))))) ((((sym_eq_times_body_S) (x_366)) (\lambda x : (nat) \to nat. (((eq) (nat)) (((times_body) ((S) (x_366))) (((plus) (y)) (z)))) (((plus) ((x) (y))) (((plus) (z)) (((times) (x_366)) (z)))))) ((((sym_eq_times_body_S) (x_366)) (\lambda x : (nat) \to nat. (((eq) (nat)) ((x) (((plus) (y)) (z)))) (((plus) (((plus) (y)) (((times) (x_366)) (y)))) (((plus) (z)) (((times) (x_366)) (z)))))) (((((((rewrite_r) (nat)) (((plus) (y)) (((plus) (z)) (((times) (x_366)) (((plus) (y)) (z)))))) (\lambda Joker_ : nat. (((eq) (nat)) (Joker_)) (((plus) (((plus) (y)) (((times) (x_366)) (y)))) (((plus) (z)) (((times) (x_366)) (z)))))) (((((((rewrite_r) (nat)) (((plus) (y)) (((plus) (((times) (x_366)) (y))) (((plus) (z)) (((times) (x_366)) (z)))))) (\lambda Joker_ : nat. (((eq) (nat)) (((plus) (y)) (((plus) (z)) (((times) (x_366)) (((plus) (y)) (z)))))) (Joker_))) (((((((rewrite_r) (nat)) (((plus) (z)) (((plus) (((times) (x_366)) (y))) (((times) (x_366)) (z))))) (\lambda Joker_ : nat. (((eq) (nat)) (((plus) (y)) (((plus) (z)) (((times) (x_366)) (((plus) (y)) (z)))))) (((plus) (y)) (Joker_)))) (((((((rewrite_l) (nat)) (((times) (x_366)) (((plus) (y)) (z)))) (\lambda Joker_ : nat. (((eq) (nat)) (((plus) (y)) (((plus) (z)) (((times) (x_366)) (((plus) (y)) (z)))))) (((plus) (y)) (((plus) (z)) (Joker_))))) (((refl) (nat)) (((plus) (y)) (((plus) (z)) (((times) (x_366)) (((plus) (y)) (z))))))) (((plus) (((times) (x_366)) (y))) (((times) (x_366)) (z)))) (((Jokerx_368) (y)) (z)))) (((plus) (((times) (x_366)) (y))) (((plus) (z)) (((times) (x_366)) (z))))) (((((((rewrite_l) (nat)) (((plus) (((plus) (z)) (((times) (x_366)) (y)))) (((times) (x_366)) (z)))) (\lambda Joker_ : nat. (((eq) (nat)) (((plus) (((times) (x_366)) (y))) (((plus) (z)) (((times) (x_366)) (z))))) (Joker_))) ((((assoc_plus1) (((times) (x_366)) (z))) (z)) (((times) (x_366)) (y)))) (((plus) (z)) (((plus) (((times) (x_366)) (y))) (((times) (x_366)) (z))))) ((((associative_plus) (z)) (((times) (x_366)) (y))) (((times) (x_366)) (z)))))) (((plus) (((plus) (y)) (((times) (x_366)) (y)))) (((plus) (z)) (((times) (x_366)) (z))))) ((((associative_plus) (y)) (((times) (x_366)) (y))) (((plus) (z)) (((times) (x_366)) (z)))))) (((plus) (((plus) (y)) (z))) (((times) (x_366)) (((plus) (y)) (z))))) ((((associative_plus) (y)) (z)) (((times) (x_366)) (((plus) (y)) (z))))))))))))))) (n).
definition distributive_times_plus_r : \forall a : nat. \forall b : nat. \forall c : nat. (((eq) (nat)) (((times) (((plus) (b)) (c))) (a))) (((plus) (((times) (b)) (a))) (((times) (c)) (a))) := \lambda a : nat. \lambda b : nat. \lambda c : nat. ((((((rewrite_r) (nat)) (((times) (a)) (((plus) (b)) (c)))) (\lambda Joker_ : nat. (((eq) (nat)) (Joker_)) (((plus) (((times) (b)) (a))) (((times) (c)) (a))))) (((((((rewrite_r) (nat)) (((times) (a)) (b))) (\lambda Joker_ : nat. (((eq) (nat)) (((times) (a)) (((plus) (b)) (c)))) (((plus) (Joker_)) (((times) (c)) (a))))) (((((((rewrite_r) (nat)) (((times) (a)) (c))) (\lambda Joker_ : nat. (((eq) (nat)) (((times) (a)) (((plus) (b)) (c)))) (((plus) (((times) (a)) (b))) (Joker_)))) (((((((rewrite_l) (nat)) (((times) (a)) (((plus) (b)) (c)))) (\lambda Joker_ : nat. (((eq) (nat)) (((times) (a)) (((plus) (b)) (c)))) (Joker_))) (((refl) (nat)) (((times) (a)) (((plus) (b)) (c))))) (((plus) (((times) (a)) (b))) (((times) (a)) (c)))) ((((distributive_times_plus) (a)) (b)) (c)))) (((times) (c)) (a))) (((commutative_times) (c)) (a)))) (((times) (b)) (a))) (((commutative_times) (b)) (a)))) (((times) (((plus) (b)) (c))) (a))) (((commutative_times) (((plus) (b)) (c))) (a)).
definition associative_times : ((associative) (nat)) (times) := \lambda n : nat. ((((nat_ind) (\lambda Jokerx_365 : nat. \forall y : nat. \forall z : nat. (((eq) (nat)) (((times) (((times) (Jokerx_365)) (y))) (z))) (((times) (Jokerx_365)) (((times) (y)) (z))))) ((((sym_eq_times) (O)) (\lambda x : (nat) \to nat. \forall y : nat. \forall z : nat. (((eq) (nat)) (((times) (((times) (O)) (y))) (z))) ((x) (((times) (y)) (z))))) ((((sym_eq_times) (O)) (\lambda x : (nat) \to nat. \forall y : nat. \forall z : nat. (((eq) (nat)) (((times) ((x) (y))) (z))) (((((filter_nat_type) ((nat) \to nat)) (times_body)) (O)) (((times) (y)) (z))))) (((((sym_eq_filter_nat_type_O) ((nat) \to nat)) (times_body)) (\lambda x : (nat) \to nat. \forall y : nat. \forall z : nat. (((eq) (nat)) (((times) ((x) (y))) (z))) (((((filter_nat_type) ((nat) \to nat)) (times_body)) (O)) (((times) (y)) (z))))) (((((sym_eq_filter_nat_type_O) ((nat) \to nat)) (times_body)) (\lambda x : (nat) \to nat. \forall y : nat. \forall z : nat. (((eq) (nat)) (((times) (((times_body) (O)) (y))) (z))) ((x) (((times) (y)) (z))))) (((sym_eq_times_body_O) (\lambda x : (nat) \to nat. \forall y : nat. \forall z : nat. (((eq) (nat)) (((times) (((times_body) (O)) (y))) (z))) ((x) (((times) (y)) (z))))) (((sym_eq_times_body_O) (\lambda x : (nat) \to nat. \forall y : nat. \forall z : nat. (((eq) (nat)) (((times) ((x) (y))) (z))) (O))) ((((sym_eq_times) (O)) (\lambda x : (nat) \to nat. \forall y : nat. \forall z : nat. (((eq) (nat)) ((x) (z))) (O))) (((((sym_eq_filter_nat_type_O) ((nat) \to nat)) (times_body)) (\lambda x : (nat) \to nat. \forall y : nat. \forall z : nat. (((eq) (nat)) ((x) (z))) (O))) (((sym_eq_times_body_O) (\lambda x : (nat) \to nat. \forall y : nat. \forall z : nat. (((eq) (nat)) ((x) (z))) (O))) (\lambda Jokery : nat. \lambda Jokerz : nat. ((refl) (nat)) (O)))))))))))) (\lambda x_366 : nat. \lambda Jokerx_368 : \forall y : nat. \forall z : nat. (((eq) (nat)) (((times) (((times) (x_366)) (y))) (z))) (((times) (x_366)) (((times) (y)) (z))). \lambda y : nat. \lambda z : nat. (((sym_eq_times) ((S) (x_366))) (\lambda x : (nat) \to nat. (((eq) (nat)) (((times) (((times) ((S) (x_366))) (y))) (z))) ((x) (((times) (y)) (z))))) ((((sym_eq_times) ((S) (x_366))) (\lambda x : (nat) \to nat. (((eq) (nat)) (((times) ((x) (y))) (z))) (((((filter_nat_type) ((nat) \to nat)) (times_body)) ((S) (x_366))) (((times) (y)) (z))))) ((((((sym_eq_filter_nat_type_S) ((nat) \to nat)) (times_body)) (x_366)) (\lambda x : (nat) \to nat. (((eq) (nat)) (((times) ((x) (y))) (z))) (((((filter_nat_type) ((nat) \to nat)) (times_body)) ((S) (x_366))) (((times) (y)) (z))))) ((((((sym_eq_filter_nat_type_S) ((nat) \to nat)) (times_body)) (x_366)) (\lambda x : (nat) \to nat. (((eq) (nat)) (((times) (((times_body) ((S) (x_366))) (y))) (z))) ((x) (((times) (y)) (z))))) ((((sym_eq_times_body_S) (x_366)) (\lambda x : (nat) \to nat. (((eq) (nat)) (((times) (((times_body) ((S) (x_366))) (y))) (z))) ((x) (((times) (y)) (z))))) ((((sym_eq_times_body_S) (x_366)) (\lambda x : (nat) \to nat. (((eq) (nat)) (((times) ((x) (y))) (z))) (((plus) (((times) (y)) (z))) (((times) (x_366)) (((times) (y)) (z)))))) (((((((rewrite_r) (nat)) (((plus) (((times) (y)) (z))) (((times) (x_366)) (((times) (y)) (z))))) (\lambda Joker_ : nat. (((eq) (nat)) (Joker_)) (((plus) (((times) (y)) (z))) (((times) (x_366)) (((times) (y)) (z)))))) (((refl) (nat)) (((plus) (((times) (y)) (z))) (((times) (x_366)) (((times) (y)) (z)))))) (((times) (((plus) (y)) (((times) (x_366)) (y)))) (z))) (((((((rewrite_l) (nat)) (((times) (((times) (x_366)) (y))) (z))) (\lambda Joker_ : nat. (((eq) (nat)) (((times) (((plus) (y)) (((times) (x_366)) (y)))) (z))) (((plus) (((times) (y)) (z))) (Joker_)))) ((((distributive_times_plus_r) (z)) (y)) (((times) (x_366)) (y)))) (((times) (x_366)) (((times) (y)) (z)))) (((Jokerx_368) (y)) (z))))))))))) (n).
definition times_times : \forall x : nat. \forall y : nat. \forall z : nat. (((eq) (nat)) (((times) (x)) (((times) (y)) (z)))) (((times) (y)) (((times) (x)) (z))) := \lambda x : nat. \lambda y : nat. \lambda z : nat. ((((((rewrite_r) (nat)) (((times) (y)) (((times) (x)) (z)))) (\lambda Joker_ : nat. (((eq) (nat)) (Joker_)) (((times) (y)) (((times) (x)) (z))))) (((refl) (nat)) (((times) (y)) (((times) (x)) (z))))) (((times) (x)) (((times) (y)) (z)))) (((((((rewrite_l) (nat)) (((times) (((times) (x)) (y))) (z))) (\lambda Joker_ : nat. (((eq) (nat)) (Joker_)) (((times) (y)) (((times) (x)) (z))))) (((((((rewrite_l) (nat)) (((times) (y)) (x))) (\lambda Joker_ : nat. (((eq) (nat)) (((times) (Joker_)) (z))) (((times) (y)) (((times) (x)) (z))))) ((((associative_times) (y)) (x)) (z))) (((times) (x)) (y))) (((commutative_times) (y)) (x)))) (((times) (x)) (((times) (y)) (z)))) ((((associative_times) (x)) (y)) (z))).
definition times_n_1 : \forall n : nat. (((eq) (nat)) (n)) (((times) (n)) ((S) (O))) := \lambda n : nat. ((((((rewrite_l) (nat)) (((plus) (n)) (((times) (n)) (O)))) (\lambda Joker_ : nat. (((eq) (nat)) (n)) (Joker_))) (((((((rewrite_l) (nat)) (O)) (\lambda Joker_ : nat. (((eq) (nat)) (n)) (((plus) (n)) (Joker_)))) (((((((rewrite_l) (nat)) (n)) (\lambda Joker_ : nat. (((eq) (nat)) (n)) (Joker_))) (((refl) (nat)) (n))) (((plus) (n)) (O))) ((plus_n_O) (n)))) (((times) (n)) (O))) ((times_n_O) (n)))) (((times) (n)) ((S) (O)))) (((times_n_Sm) (n)) (O)).
definition minus_S_S : \forall n : nat. \forall m : nat. (((eq) (nat)) (((minus) ((S) (n))) ((S) (m)))) (((minus) (n)) (m)) := \lambda n : nat. \lambda m : nat. ((((((eq_match_nat_type_S) (nat)) ((S) (n))) (\lambda q : nat. ((minus) (n)) (q))) (m)) (\lambda y : nat. (((eq) (nat)) (((minus) ((S) (n))) ((S) (m)))) (y))) ((((eq_minus_body_S) (n)) (\lambda y : (nat) \to nat. (((eq) (nat)) (((minus) ((S) (n))) ((S) (m)))) ((y) ((S) (m))))) ((((((eq_filter_nat_type_S) ((nat) \to nat)) (minus_body)) (n)) (\lambda y : (nat) \to nat. (((eq) (nat)) (((minus) ((S) (n))) ((S) (m)))) ((y) ((S) (m))))) ((((eq_minus) ((S) (n))) (\lambda y : (nat) \to nat. (((eq) (nat)) (((minus) ((S) (n))) ((S) (m)))) ((y) ((S) (m))))) (((refl) (nat)) (((minus) ((S) (n))) ((S) (m))))))).
definition minus_O_n : \forall n : nat. (((eq) (nat)) (O)) (((minus) (O)) (n)) := \lambda n : nat. ((((match_nat_prop) (\lambda Joker_ : nat. (((eq) (nat)) (O)) (((minus) (O)) (Joker_)))) ((((sym_eq_minus) (O)) (\lambda y : (nat) \to nat. (((eq) (nat)) (O)) ((y) (O)))) (((((sym_eq_filter_nat_type_O) ((nat) \to nat)) (minus_body)) (\lambda y : (nat) \to nat. (((eq) (nat)) (O)) ((y) (O)))) (((sym_eq_minus_body_O) (\lambda y : (nat) \to nat. (((eq) (nat)) (O)) ((y) (O)))) (((refl) (nat)) (O)))))) ((((sym_eq_minus) (O)) (\lambda y : (nat) \to nat. \forall n0 : nat. (((eq) (nat)) (O)) ((y) ((S) (n0))))) (((((sym_eq_filter_nat_type_O) ((nat) \to nat)) (minus_body)) (\lambda y : (nat) \to nat. \forall n0 : nat. (((eq) (nat)) (O)) ((y) ((S) (n0))))) (((sym_eq_minus_body_O) (\lambda y : (nat) \to nat. \forall n0 : nat. (((eq) (nat)) (O)) ((y) ((S) (n0))))) (\lambda auto : nat. ((refl) (nat)) (O)))))) (n).
definition minus_n_O : \forall n : nat. (((eq) (nat)) (n)) (((minus) (n)) (O)) := \lambda n : nat. ((((match_nat_prop) (\lambda Joker_ : nat. (((eq) (nat)) (Joker_)) (((minus) (Joker_)) (O)))) (((((((rewrite_l) (nat)) (O)) (\lambda Joker_ : nat. (((eq) (nat)) (O)) (Joker_))) (((refl) (nat)) (O))) (((minus) (O)) (O))) ((minus_O_n) (O)))) (\lambda auto : nat. (((sym_eq_minus) ((S) (auto))) (\lambda y : (nat) \to nat. (((eq) (nat)) ((S) (auto))) ((y) (O)))) ((((((sym_eq_filter_nat_type_S) ((nat) \to nat)) (minus_body)) (auto)) (\lambda y : (nat) \to nat. (((eq) (nat)) ((S) (auto))) ((y) (O)))) ((((sym_eq_minus_body_S) (auto)) (\lambda y : (nat) \to nat. (((eq) (nat)) ((S) (auto))) ((y) (O)))) ((((((sym_eq_match_nat_type_O) (nat)) ((S) (auto))) (\lambda q : nat. ((minus) (auto)) (q))) (\lambda y : nat. (((eq) (nat)) ((S) (auto))) (y))) (((refl) (nat)) ((S) (auto)))))))) (n).
definition minus_n_n : \forall n : nat. (((eq) (nat)) (O)) (((minus) (n)) (n)) := \lambda n : nat. ((((nat_ind) (\lambda Jokerx_365 : nat. (((eq) (nat)) (O)) (((minus) (Jokerx_365)) (Jokerx_365)))) (((((((rewrite_l) (nat)) (O)) (\lambda Joker_ : nat. (((eq) (nat)) (O)) (Joker_))) (((refl) (nat)) (O))) (((minus) (O)) (O))) ((minus_O_n) (O)))) (\lambda x_366 : nat. \lambda Jokerx_368 : (((eq) (nat)) (O)) (((minus) (x_366)) (x_366)). ((((((rewrite_r) (nat)) (((minus) (x_366)) (x_366))) (\lambda Joker_ : nat. (((eq) (nat)) (O)) (Joker_))) (((((((rewrite_l) (nat)) (O)) (\lambda Joker_ : nat. (((eq) (nat)) (O)) (Joker_))) (((refl) (nat)) (O))) (((minus) (x_366)) (x_366))) (Jokerx_368))) (((minus) ((S) (x_366))) ((S) (x_366)))) (((minus_S_S) (x_366)) (x_366)))) (n).
definition eq_minus_S_pred : \forall n : nat. \forall m : nat. (((eq) (nat)) (((minus) (n)) ((S) (m)))) ((pred) (((minus) (n)) (m))) := ((((nat_elim2) (\lambda Joker_ : nat. \lambda Joker0 : nat. (((eq) (nat)) (((minus) (Joker_)) ((S) (Joker0)))) ((pred) (((minus) (Joker_)) (Joker0))))) (\lambda Jokern : nat. (((sym_eq_minus) (O)) (\lambda y : (nat) \to nat. (((eq) (nat)) (((minus) (O)) ((S) (Jokern)))) ((pred) ((y) (Jokern))))) ((((sym_eq_minus) (O)) (\lambda y : (nat) \to nat. (((eq) (nat)) ((y) ((S) (Jokern)))) ((pred) (((((filter_nat_type) ((nat) \to nat)) (minus_body)) (O)) (Jokern))))) (((((sym_eq_filter_nat_type_O) ((nat) \to nat)) (minus_body)) (\lambda y : (nat) \to nat. (((eq) (nat)) ((y) ((S) (Jokern)))) ((pred) (((((filter_nat_type) ((nat) \to nat)) (minus_body)) (O)) (Jokern))))) (((((sym_eq_filter_nat_type_O) ((nat) \to nat)) (minus_body)) (\lambda y : (nat) \to nat. (((eq) (nat)) (((minus_body) (O)) ((S) (Jokern)))) ((pred) ((y) (Jokern))))) (((sym_eq_minus_body_O) (\lambda y : (nat) \to nat. (((eq) (nat)) (((minus_body) (O)) ((S) (Jokern)))) ((pred) ((y) (Jokern))))) (((sym_eq_minus_body_O) (\lambda y : (nat) \to nat. (((eq) (nat)) ((y) ((S) (Jokern)))) (((((match_nat_type) (nat)) (O)) (\lambda p : nat. p)) (O)))) ((((((sym_eq_match_nat_type_O) (nat)) (O)) (\lambda p : nat. p)) (\lambda y : nat. (((eq) (nat)) (O)) (y))) (((refl) (nat)) (O)))))))))) (\lambda n : nat. (((sym_eq_minus) ((S) (n))) (\lambda y : (nat) \to nat. (((eq) (nat)) (((minus) ((S) (n))) ((S) (O)))) ((pred) ((y) (O))))) ((((sym_eq_minus) ((S) (n))) (\lambda y : (nat) \to nat. (((eq) (nat)) ((y) ((S) (O)))) ((pred) (((((filter_nat_type) ((nat) \to nat)) (minus_body)) ((S) (n))) (O))))) ((((((sym_eq_filter_nat_type_S) ((nat) \to nat)) (minus_body)) (n)) (\lambda y : (nat) \to nat. (((eq) (nat)) ((y) ((S) (O)))) ((pred) (((((filter_nat_type) ((nat) \to nat)) (minus_body)) ((S) (n))) (O))))) ((((((sym_eq_filter_nat_type_S) ((nat) \to nat)) (minus_body)) (n)) (\lambda y : (nat) \to nat. (((eq) (nat)) (((minus_body) ((S) (n))) ((S) (O)))) ((pred) ((y) (O))))) ((((sym_eq_minus_body_S) (n)) (\lambda y : (nat) \to nat. (((eq) (nat)) (((minus_body) ((S) (n))) ((S) (O)))) ((pred) ((y) (O))))) ((((sym_eq_minus_body_S) (n)) (\lambda y : (nat) \to nat. (((eq) (nat)) ((y) ((S) (O)))) ((pred) (((((match_nat_type) (nat)) ((S) (n))) (\lambda q : nat. ((minus) (n)) (q))) (O))))) (((((((sym_eq_match_nat_type_S) (nat)) ((S) (n))) (\lambda q : nat. ((minus) (n)) (q))) (O)) (\lambda y : nat. (((eq) (nat)) (y)) (((((match_nat_type) (nat)) (O)) (\lambda p : nat. p)) (((((match_nat_type) (nat)) ((S) (n))) (\lambda q : nat. ((minus) (n)) (q))) (O))))) ((((((sym_eq_match_nat_type_O) (nat)) ((S) (n))) (\lambda q : nat. ((minus) (n)) (q))) (\lambda y : nat. (((eq) (nat)) (((minus) (n)) (O))) (((((match_nat_type) (nat)) (O)) (\lambda p : nat. p)) (y)))) (((((((sym_eq_match_nat_type_S) (nat)) (O)) (\lambda q : nat. q)) (n)) (\lambda y : nat. (((eq) (nat)) (((minus) (n)) (O))) (y))) (((((((rewrite_l) (nat)) (n)) (\lambda Joker_ : nat. (((eq) (nat)) (Joker_)) (n))) (((refl) (nat)) (n))) (((minus) (n)) (O))) ((minus_n_O) (n))))))))))))) (\lambda n : nat. \lambda m : nat. (((sym_eq_minus) ((S) (n))) (\lambda y : (nat) \to nat. ((((eq) (nat)) (((minus) (n)) ((S) (m)))) ((pred) (((minus) (n)) (m)))) \to (((eq) (nat)) (((minus) ((S) (n))) ((S) ((S) (m))))) ((pred) ((y) ((S) (m)))))) ((((sym_eq_minus) ((S) (n))) (\lambda y : (nat) \to nat. ((((eq) (nat)) (((minus) (n)) ((S) (m)))) ((pred) (((minus) (n)) (m)))) \to (((eq) (nat)) ((y) ((S) ((S) (m))))) ((pred) (((((filter_nat_type) ((nat) \to nat)) (minus_body)) ((S) (n))) ((S) (m)))))) ((((((sym_eq_filter_nat_type_S) ((nat) \to nat)) (minus_body)) (n)) (\lambda y : (nat) \to nat. ((((eq) (nat)) (((minus) (n)) ((S) (m)))) ((pred) (((minus) (n)) (m)))) \to (((eq) (nat)) ((y) ((S) ((S) (m))))) ((pred) (((((filter_nat_type) ((nat) \to nat)) (minus_body)) ((S) (n))) ((S) (m)))))) ((((((sym_eq_filter_nat_type_S) ((nat) \to nat)) (minus_body)) (n)) (\lambda y : (nat) \to nat. ((((eq) (nat)) (((minus) (n)) ((S) (m)))) ((pred) (((minus) (n)) (m)))) \to (((eq) (nat)) (((minus_body) ((S) (n))) ((S) ((S) (m))))) ((pred) ((y) ((S) (m)))))) ((((sym_eq_minus_body_S) (n)) (\lambda y : (nat) \to nat. ((((eq) (nat)) (((minus) (n)) ((S) (m)))) ((pred) (((minus) (n)) (m)))) \to (((eq) (nat)) (((minus_body) ((S) (n))) ((S) ((S) (m))))) ((pred) ((y) ((S) (m)))))) ((((sym_eq_minus_body_S) (n)) (\lambda y : (nat) \to nat. ((((eq) (nat)) (((minus) (n)) ((S) (m)))) ((pred) (((minus) (n)) (m)))) \to (((eq) (nat)) ((y) ((S) ((S) (m))))) ((pred) (((((match_nat_type) (nat)) ((S) (n))) (\lambda q : nat. ((minus) (n)) (q))) ((S) (m)))))) (((((((sym_eq_match_nat_type_S) (nat)) ((S) (n))) (\lambda q : nat. ((minus) (n)) (q))) ((S) (m))) (\lambda y : nat. ((((eq) (nat)) (((minus) (n)) ((S) (m)))) ((pred) (((minus) (n)) (m)))) \to (((eq) (nat)) (y)) (((((match_nat_type) (nat)) (O)) (\lambda p : nat. p)) (((((match_nat_type) (nat)) ((S) (n))) (\lambda q : nat. ((minus) (n)) (q))) ((S) (m)))))) (((((((sym_eq_match_nat_type_S) (nat)) ((S) (n))) (\lambda q : nat. ((minus) (n)) (q))) (m)) (\lambda y : nat. ((((eq) (nat)) (((minus) (n)) ((S) (m)))) ((pred) (((minus) (n)) (m)))) \to (((eq) (nat)) (((minus) (n)) ((S) (m)))) (((((match_nat_type) (nat)) (O)) (\lambda p : nat. p)) (y)))) (\lambda auto : (((eq) (nat)) (((minus) (n)) ((S) (m)))) (((((match_nat_type) (nat)) (O)) (\lambda p : nat. p)) (((minus) (n)) (m))). ((((((rewrite_r) (nat)) (((((match_nat_type) (nat)) (O)) (\lambda p : nat. p)) (((minus) (n)) (m)))) (\lambda Joker_ : nat. (((eq) (nat)) (Joker_)) (((((match_nat_type) (nat)) (O)) (\lambda p : nat. p)) (((minus) (n)) (m))))) (((refl) (nat)) (((((match_nat_type) (nat)) (O)) (\lambda p : nat. p)) (((minus) (n)) (m))))) (((minus) (n)) ((S) (m)))) (auto)))))))))).
definition not_eq_S : \forall n : nat. \forall m : nat. ((Not) ((((eq) (nat)) (n)) (m))) \to (Not) ((((eq) (nat)) ((S) (n))) ((S) (m))) := \lambda n : nat. \lambda m : nat. \lambda auto : (Not) ((((eq) (nat)) (n)) (m)). ((((not_to_not) ((((eq) (nat)) ((S) (n))) ((S) (m)))) ((((eq) (nat)) (n)) (m))) (\lambda auto' : (((eq) (nat)) ((S) (n))) ((S) (m)). ((((((rewrite_l) (nat)) (m)) (\lambda Joker_ : nat. (((eq) (nat)) (Joker_)) (m))) (((refl) (nat)) (m))) (n)) (((((((rewrite_r) (nat)) ((pred) ((S) (n)))) (\lambda Joker_ : nat. (((eq) (nat)) (m)) (Joker_))) (((((((rewrite_r) (nat)) ((S) (m))) (\lambda Joker_ : nat. (((eq) (nat)) (m)) ((pred) (Joker_)))) ((pred_Sn) (m))) ((S) (n))) (auto'))) (n)) ((pred_Sn) (n))))) (auto).
definition not_eq_O_S : \forall n : nat. (Not) ((((eq) (nat)) (O)) ((S) (n))) := \lambda n : nat. \lambda eqOS : (((eq) (nat)) (O)) ((S) (n)). (((((eq_match_nat_type_O) Prop) (False)) (\lambda p : nat. True)) (\lambda y : Prop. y)) (((((((eq_ind_r) (nat)) ((S) (n))) (\lambda x : nat. (not_zero) (x))) (((((((sym_eq_match_nat_type_S) Prop) (False)) (\lambda p : nat. True)) (n)) (\lambda y : Prop. y)) (I))) (O)) (eqOS)).
definition lt_to_not_zero : \forall n : nat. \forall m : nat. (((lt) (n)) (m)) \to (not_zero) (m) := \lambda n : nat. \lambda m : nat. \lambda Hlt : ((lt) (n)) (m). ((((((le_ind) ((S) (n))) (\lambda x_417 : nat. (not_zero) (x_417))) (((((((sym_eq_match_nat_type_S) Prop) (False)) (\lambda p : nat. True)) (n)) (\lambda y : Prop. y)) (I))) (\lambda m0 : nat. \lambda Jokerx_419 : ((le) ((S) (n))) (m0). \lambda Jokerx_421 : (not_zero) (m0). ((((((sym_eq_match_nat_type_S) Prop) (False)) (\lambda p : nat. True)) (m0)) (\lambda y : Prop. y)) (I))) (m)) (Hlt).
definition le_S_S : \forall n : nat. \forall m : nat. (((le) (n)) (m)) \to ((le) ((S) (n))) ((S) (m)) := \lambda n : nat. \lambda m : nat. \lambda lenm : ((le) (n)) (m). ((((((le_ind) (n)) (\lambda x_417 : nat. ((le) ((S) (n))) ((S) (x_417)))) ((le_n) ((S) (n)))) (\lambda m0 : nat. \lambda Jokerx_419 : ((le) (n)) (m0). \lambda Jokerx_421 : ((le) ((S) (n))) ((S) (m0)). (((le_S) ((S) (n))) ((S) (m0))) (Jokerx_421))) (m)) (lenm).
definition le_O_n : \forall n : nat. ((le) (O)) (n) := \lambda n : nat. ((((nat_ind) ((le) (O))) ((le_n) (O))) (\lambda x_366 : nat. \lambda Jokerx_368 : ((le) (O)) (x_366). (((le_S) (O)) (x_366)) (Jokerx_368))) (n).
definition le_n_Sn : \forall n : nat. ((le) (n)) ((S) (n)) := \lambda n : nat. (((le_S) (n)) (n)) ((le_n) (n)).
definition transitive_le : ((transitive) (nat)) (le) := \lambda a : nat. \lambda b : nat. \lambda c : nat. \lambda leab : ((le) (a)) (b). \lambda lebc : ((le) (b)) (c). ((((((le_ind) (b)) (\lambda x_417 : nat. ((le) (a)) (x_417))) (leab)) (\lambda m : nat. \lambda Jokerx_419 : ((le) (b)) (m). \lambda Jokerx_421 : ((le) (a)) (m). (((le_S) (a)) (m)) (Jokerx_421))) (c)) (lebc).
definition le_pred_n : \forall n : nat. ((le) ((pred) (n))) (n) := \lambda n : nat. ((((nat_ind) (\lambda Jokerx_365 : nat. ((le) ((pred) (Jokerx_365))) (Jokerx_365))) ((((((eq_match_nat_type_O) (nat)) (O)) (\lambda p : nat. p)) (\lambda y : nat. ((le) (((((match_nat_type) (nat)) (O)) (\lambda p : nat. p)) (O))) (y))) ((le_n) ((pred) (O))))) (\lambda x_366 : nat. \lambda Jokerx_368 : ((le) ((pred) (x_366))) (x_366). ((((((eq_match_nat_type_S) (nat)) (O)) (\lambda p : nat. p)) (x_366)) (\lambda y : nat. ((le) ((pred) ((S) (x_366)))) ((S) (y)))) ((le_n_Sn) ((pred) ((S) (x_366)))))) (n).
definition monotonic_pred : (((monotonic) (nat)) (le)) (pred) := \lambda n : nat. \lambda m : nat. \lambda lenm : ((le) (n)) (m). ((((((le_ind) (n)) (\lambda x_417 : nat. ((le) ((pred) (n))) ((pred) (x_417)))) ((le_n) ((pred) (n)))) (\lambda m0 : nat. \lambda Jokerx_419 : ((le) (n)) (m0). \lambda Jokerx_421 : ((le) ((pred) (n))) ((pred) (m0)). (((((transitive_le) ((pred) (n))) (n)) ((pred) ((S) (m0)))) ((le_pred_n) (n))) (((((((sym_eq_match_nat_type_S) (nat)) (O)) (\lambda p : nat. p)) (m0)) (\lambda y : nat. ((le) (n)) (y))) (Jokerx_419)))) (m)) (lenm).
definition le_S_S_to_le : \forall n : nat. \forall m : nat. (((le) ((S) (n))) ((S) (m))) \to ((le) (n)) (m) := \lambda n : nat. \lambda m : nat. \lambda auto : ((le) ((S) (n))) ((S) (m)). ((((((eq_match_nat_type_S) (nat)) (O)) (\lambda p : nat. p)) (m)) (\lambda y : nat. ((le) (n)) (y))) (((((((eq_match_nat_type_S) (nat)) (O)) (\lambda p : nat. p)) (n)) (\lambda y : nat. ((le) (y)) (((((match_nat_type) (nat)) (O)) (\lambda p : nat. p)) ((S) (m))))) ((((monotonic_pred) ((S) (n))) ((S) (m))) (auto))).
definition monotonic_le_plus_r : \forall n : nat. (((monotonic) (nat)) (le)) (\lambda m : nat. ((plus) (n)) (m)) := \lambda n : nat. \lambda a : nat. \lambda b : nat. ((((nat_ind) (\lambda Jokerx_365 : nat. (((le) (a)) (b)) \to ((le) (((plus) (Jokerx_365)) (a))) (((plus) (Jokerx_365)) (b)))) ((((sym_eq_plus) (O)) (\lambda y : (nat) \to nat. (((le) (a)) (b)) \to ((le) (((plus) (O)) (a))) ((y) (b)))) ((((sym_eq_plus) (O)) (\lambda y : (nat) \to nat. (((le) (a)) (b)) \to ((le) ((y) (a))) (((((filter_nat_type) ((nat) \to nat)) (plus_body)) (O)) (b)))) (((((sym_eq_filter_nat_type_O) ((nat) \to nat)) (plus_body)) (\lambda y : (nat) \to nat. (((le) (a)) (b)) \to ((le) ((y) (a))) (((((filter_nat_type) ((nat) \to nat)) (plus_body)) (O)) (b)))) (((((sym_eq_filter_nat_type_O) ((nat) \to nat)) (plus_body)) (\lambda y : (nat) \to nat. (((le) (a)) (b)) \to ((le) (((plus_body) (O)) (a))) ((y) (b)))) (((sym_eq_plus_body_O) (\lambda y : (nat) \to nat. (((le) (a)) (b)) \to ((le) (((plus_body) (O)) (a))) ((y) (b)))) (((sym_eq_plus_body_O) (\lambda y : (nat) \to nat. (((le) (a)) (b)) \to ((le) ((y) (a))) (b))) (\lambda auto : ((le) (a)) (b). auto)))))))) (\lambda m : nat. \lambda H : (((le) (a)) (b)) \to ((le) (((plus) (m)) (a))) (((plus) (m)) (b)). \lambda leab : ((le) (a)) (b). (((sym_eq_plus) ((S) (m))) (\lambda y : (nat) \to nat. ((le) (((plus) ((S) (m))) (a))) ((y) (b)))) ((((sym_eq_plus) ((S) (m))) (\lambda y : (nat) \to nat. ((le) ((y) (a))) (((((filter_nat_type) ((nat) \to nat)) (plus_body)) ((S) (m))) (b)))) ((((((sym_eq_filter_nat_type_S) ((nat) \to nat)) (plus_body)) (m)) (\lambda y : (nat) \to nat. ((le) ((y) (a))) (((((filter_nat_type) ((nat) \to nat)) (plus_body)) ((S) (m))) (b)))) ((((((sym_eq_filter_nat_type_S) ((nat) \to nat)) (plus_body)) (m)) (\lambda y : (nat) \to nat. ((le) (((plus_body) ((S) (m))) (a))) ((y) (b)))) ((((sym_eq_plus_body_S) (m)) (\lambda y : (nat) \to nat. ((le) (((plus_body) ((S) (m))) (a))) ((y) (b)))) ((((sym_eq_plus_body_S) (m)) (\lambda y : (nat) \to nat. ((le) ((y) (a))) ((S) (((plus) (m)) (b))))) ((((le_S_S) (((plus) (m)) (a))) (((plus) (m)) (b))) ((H) (leab)))))))))) (n).
definition monotonic_le_plus_l : \forall m : nat. (((monotonic) (nat)) (le)) (\lambda n : nat. ((plus) (n)) (m)) := \lambda m : nat. \lambda x : nat. \lambda y : nat. \lambda auto : ((le) (x)) (y). ((((eq_coerc) (((le) (((plus) (m)) (x))) (((plus) (m)) (y)))) (((le) (((plus) (x)) (m))) (((plus) (y)) (m)))) (((((monotonic_le_plus_r) (m)) (x)) (y)) (auto))) (((((((rewrite_r) (nat)) (((plus) (m)) (x))) (\lambda Joker_ : nat. (((eq) Prop) (((le) (((plus) (m)) (x))) (((plus) (m)) (y)))) (((le) (Joker_)) (((plus) (y)) (m))))) (((((((rewrite_r) (nat)) (((plus) (m)) (y))) (\lambda Joker_ : nat. (((eq) Prop) (((le) (((plus) (m)) (x))) (((plus) (m)) (y)))) (((le) (((plus) (m)) (x))) (Joker_)))) (((refl) Prop) (((le) (((plus) (m)) (x))) (((plus) (m)) (y))))) (((plus) (y)) (m))) (((commutative_plus) (y)) (m)))) (((plus) (x)) (m))) (((commutative_plus) (x)) (m))).
definition le_plus : \forall n1 : nat. \forall n2 : nat. \forall m1 : nat. \forall m2 : nat. (((le) (n1)) (n2)) \to (((le) (m1)) (m2)) \to ((le) (((plus) (n1)) (m1))) (((plus) (n2)) (m2)) := \lambda n1 : nat. \lambda n2 : nat. \lambda m1 : nat. \lambda m2 : nat. \lambda len : ((le) (n1)) (n2). \lambda lem : ((le) (m1)) (m2). (((((transitive_le) (((plus) (n1)) (m1))) (((plus) (n1)) (m2))) (((plus) (n2)) (m2))) (((((monotonic_le_plus_r) (n1)) (m1)) (m2)) (lem))) (((((monotonic_le_plus_l) (m2)) (n1)) (n2)) (len)).
definition le_plus_n : \forall n : nat. \forall m : nat. ((le) (m)) (((plus) (n)) (m)) := \lambda n : nat. \lambda m : nat. ((((eq_coerc) (((le) (((plus) (O)) (m))) (((plus) (n)) (m)))) (((le) (m)) (((plus) (n)) (m)))) (((((monotonic_le_plus_l) (m)) (O)) (n)) ((le_O_n) (n)))) (((((((rewrite_l) (nat)) (m)) (\lambda Joker_ : nat. (((eq) Prop) (((le) (Joker_)) (((plus) (n)) (m)))) (((le) (m)) (((plus) (n)) (m))))) (((refl) Prop) (((le) (m)) (((plus) (n)) (m))))) (((plus) (O)) (m))) ((plus_O_n) (m))).
definition le_plus_b : \forall b : nat. \forall n : nat. \forall m : nat. (((le) (((plus) (n)) (b))) (m)) \to ((le) (n)) (m) := \lambda b : nat. \lambda n : nat. \lambda m : nat. \lambda auto : ((le) (((plus) (n)) (b))) (m). (((((transitive_le) (n)) (((plus) (n)) (b))) (m)) (((((eq_coerc) (((le) (n)) (((plus) (b)) (n)))) (((le) (n)) (((plus) (n)) (b)))) (((le_plus_n) (b)) (n))) (((((((rewrite_r) (nat)) (((plus) (b)) (n))) (\lambda Joker_ : nat. (((eq) Prop) (((le) (n)) (((plus) (b)) (n)))) (((le) (n)) (Joker_)))) (((refl) Prop) (((le) (n)) (((plus) (b)) (n))))) (((plus) (n)) (b))) (((commutative_plus) (n)) (b))))) (auto).
definition le_plus_n_r : \forall n : nat. \forall m : nat. ((le) (m)) (((plus) (m)) (n)) := \lambda n : nat. \lambda m : nat. ((((eq_coerc) (((le) (m)) (((plus) (n)) (m)))) (((le) (m)) (((plus) (m)) (n)))) (((le_plus_n) (n)) (m))) (((((((rewrite_r) (nat)) (((plus) (n)) (m))) (\lambda Joker_ : nat. (((eq) Prop) (((le) (m)) (((plus) (n)) (m)))) (((le) (m)) (Joker_)))) (((refl) Prop) (((le) (m)) (((plus) (n)) (m))))) (((plus) (m)) (n))) (((commutative_plus) (m)) (n))).
definition le_plus_to_le : \forall a : nat. \forall n : nat. \forall m : nat. (((le) (((plus) (a)) (n))) (((plus) (a)) (m))) \to ((le) (n)) (m) := \lambda a : nat. ((((nat_ind) (\lambda Jokerx_365 : nat. \forall n : nat. \forall m : nat. (((le) (((plus) (Jokerx_365)) (n))) (((plus) (Jokerx_365)) (m))) \to ((le) (n)) (m))) (\lambda n : nat. \lambda m : nat. (((sym_eq_plus) (O)) (\lambda y : (nat) \to nat. (((le) (((plus) (O)) (n))) ((y) (m))) \to ((le) (n)) (m))) ((((sym_eq_plus) (O)) (\lambda y : (nat) \to nat. (((le) ((y) (n))) (((((filter_nat_type) ((nat) \to nat)) (plus_body)) (O)) (m))) \to ((le) (n)) (m))) (((((sym_eq_filter_nat_type_O) ((nat) \to nat)) (plus_body)) (\lambda y : (nat) \to nat. (((le) ((y) (n))) (((((filter_nat_type) ((nat) \to nat)) (plus_body)) (O)) (m))) \to ((le) (n)) (m))) (((((sym_eq_filter_nat_type_O) ((nat) \to nat)) (plus_body)) (\lambda y : (nat) \to nat. (((le) (((plus_body) (O)) (n))) ((y) (m))) \to ((le) (n)) (m))) (((sym_eq_plus_body_O) (\lambda y : (nat) \to nat. (((le) (((plus_body) (O)) (n))) ((y) (m))) \to ((le) (n)) (m))) (((sym_eq_plus_body_O) (\lambda y : (nat) \to nat. (((le) ((y) (n))) (m)) \to ((le) (n)) (m))) (\lambda auto : ((le) (n)) (m). auto)))))))) (\lambda x_366 : nat. \lambda Jokerx_368 : \forall n : nat. \forall m : nat. (((le) (((plus) (x_366)) (n))) (((plus) (x_366)) (m))) \to ((le) (n)) (m). \lambda n : nat. \lambda m : nat. (((sym_eq_plus) ((S) (x_366))) (\lambda y : (nat) \to nat. (((le) (((plus) ((S) (x_366))) (n))) ((y) (m))) \to ((le) (n)) (m))) ((((sym_eq_plus) ((S) (x_366))) (\lambda y : (nat) \to nat. (((le) ((y) (n))) (((((filter_nat_type) ((nat) \to nat)) (plus_body)) ((S) (x_366))) (m))) \to ((le) (n)) (m))) ((((((sym_eq_filter_nat_type_S) ((nat) \to nat)) (plus_body)) (x_366)) (\lambda y : (nat) \to nat. (((le) ((y) (n))) (((((filter_nat_type) ((nat) \to nat)) (plus_body)) ((S) (x_366))) (m))) \to ((le) (n)) (m))) ((((((sym_eq_filter_nat_type_S) ((nat) \to nat)) (plus_body)) (x_366)) (\lambda y : (nat) \to nat. (((le) (((plus_body) ((S) (x_366))) (n))) ((y) (m))) \to ((le) (n)) (m))) ((((sym_eq_plus_body_S) (x_366)) (\lambda y : (nat) \to nat. (((le) (((plus_body) ((S) (x_366))) (n))) ((y) (m))) \to ((le) (n)) (m))) ((((sym_eq_plus_body_S) (x_366)) (\lambda y : (nat) \to nat. (((le) ((y) (n))) ((S) (((plus) (x_366)) (m)))) \to ((le) (n)) (m))) (\lambda auto : ((le) ((S) (((plus) (x_366)) (n)))) ((S) (((plus) (x_366)) (m))). ((((eq_coerc) (((le) ((pred) ((S) (n)))) ((pred) ((S) (m))))) (((le) (n)) (m))) ((((monotonic_pred) ((S) (n))) ((S) (m))) ((((Jokerx_368) ((S) (n))) ((S) (m))) (((((eq_coerc) (((le) ((S) (((plus) (x_366)) (n)))) ((S) (((plus) (x_366)) (m))))) (((le) (((plus) (x_366)) ((S) (n)))) (((plus) (x_366)) ((S) (m))))) (auto)) (((((((rewrite_r) (nat)) (((plus) (x_366)) ((S) (n)))) (\lambda Joker_ : nat. (((eq) Prop) (((le) (Joker_)) ((S) (((plus) (x_366)) (m))))) (((le) (((plus) (x_366)) ((S) (n)))) (((plus) (x_366)) ((S) (m)))))) (((((((rewrite_r) (nat)) (((plus) (x_366)) ((S) (m)))) (\lambda Joker_ : nat. (((eq) Prop) (((le) (((plus) (x_366)) ((S) (n)))) (Joker_))) (((le) (((plus) (x_366)) ((S) (n)))) (((plus) (x_366)) ((S) (m)))))) (((refl) Prop) (((le) (((plus) (x_366)) ((S) (n)))) (((plus) (x_366)) ((S) (m)))))) ((S) (((plus) (x_366)) (m)))) (((plus_n_Sm) (x_366)) (m)))) ((S) (((plus) (x_366)) (n)))) (((plus_n_Sm) (x_366)) (n))))))) (((((((rewrite_l) (nat)) (n)) (\lambda Joker_ : nat. (((eq) Prop) (((le) (Joker_)) ((pred) ((S) (m))))) (((le) (n)) (m)))) (((((((rewrite_l) (nat)) (m)) (\lambda Joker_ : nat. (((eq) Prop) (((le) (n)) (Joker_))) (((le) (n)) (m)))) (((refl) Prop) (((le) (n)) (m)))) ((pred) ((S) (m)))) ((pred_Sn) (m)))) ((pred) ((S) (n)))) ((pred_Sn) (n))))))))))) (a).
definition le_plus_to_le_r : \forall a : nat. \forall n : nat. \forall m : nat. (((le) (((plus) (n)) (a))) (((plus) (m)) (a))) \to ((le) (n)) (m) := \lambda a : nat. \lambda n : nat. \lambda m : nat. \lambda auto : ((le) (((plus) (n)) (a))) (((plus) (m)) (a)). ((((le_plus_to_le) (a)) (n)) (m)) (((((eq_coerc) (((le) (((plus) (n)) (a))) (((plus) (m)) (a)))) (((le) (((plus) (a)) (n))) (((plus) (a)) (m)))) (auto)) (((((((rewrite_r) (nat)) (((plus) (a)) (n))) (\lambda Joker_ : nat. (((eq) Prop) (((le) (Joker_)) (((plus) (m)) (a)))) (((le) (((plus) (a)) (n))) (((plus) (a)) (m))))) (((((((rewrite_r) (nat)) (((plus) (a)) (m))) (\lambda Joker_ : nat. (((eq) Prop) (((le) (((plus) (a)) (n))) (Joker_))) (((le) (((plus) (a)) (n))) (((plus) (a)) (m))))) (((refl) Prop) (((le) (((plus) (a)) (n))) (((plus) (a)) (m))))) (((plus) (m)) (a))) (((commutative_plus) (m)) (a)))) (((plus) (n)) (a))) (((commutative_plus) (n)) (a)))).
definition monotonic_le_times_r : \forall n : nat. (((monotonic) (nat)) (le)) (\lambda m : nat. ((times) (n)) (m)) := \lambda n : nat. \lambda x : nat. \lambda y : nat. \lambda lexy : ((le) (x)) (y). ((((nat_ind) (\lambda Jokerx_365 : nat. ((le) (((times) (Jokerx_365)) (x))) (((times) (Jokerx_365)) (y)))) ((((sym_eq_times) (O)) (\lambda z : (nat) \to nat. ((le) (((times) (O)) (x))) ((z) (y)))) ((((sym_eq_times) (O)) (\lambda z : (nat) \to nat. ((le) ((z) (x))) (((((filter_nat_type) ((nat) \to nat)) (times_body)) (O)) (y)))) (((((sym_eq_filter_nat_type_O) ((nat) \to nat)) (times_body)) (\lambda z : (nat) \to nat. ((le) ((z) (x))) (((((filter_nat_type) ((nat) \to nat)) (times_body)) (O)) (y)))) (((((sym_eq_filter_nat_type_O) ((nat) \to nat)) (times_body)) (\lambda z : (nat) \to nat. ((le) (((times_body) (O)) (x))) ((z) (y)))) (((sym_eq_times_body_O) (\lambda z : (nat) \to nat. ((le) (((times_body) (O)) (x))) ((z) (y)))) (((sym_eq_times_body_O) (\lambda z : (nat) \to nat. ((le) ((z) (x))) (O))) ((le_O_n) (O))))))))) (\lambda a : nat. \lambda lea : ((le) (((times) (a)) (x))) (((times) (a)) (y)). (((sym_eq_times) ((S) (a))) (\lambda z : (nat) \to nat. ((le) (((times) ((S) (a))) (x))) ((z) (y)))) ((((sym_eq_times) ((S) (a))) (\lambda z : (nat) \to nat. ((le) ((z) (x))) (((((filter_nat_type) ((nat) \to nat)) (times_body)) ((S) (a))) (y)))) ((((((sym_eq_filter_nat_type_S) ((nat) \to nat)) (times_body)) (a)) (\lambda z : (nat) \to nat. ((le) ((z) (x))) (((((filter_nat_type) ((nat) \to nat)) (times_body)) ((S) (a))) (y)))) ((((((sym_eq_filter_nat_type_S) ((nat) \to nat)) (times_body)) (a)) (\lambda z : (nat) \to nat. ((le) (((times_body) ((S) (a))) (x))) ((z) (y)))) ((((sym_eq_times_body_S) (a)) (\lambda z : (nat) \to nat. ((le) (((times_body) ((S) (a))) (x))) ((z) (y)))) ((((sym_eq_times_body_S) (a)) (\lambda z : (nat) \to nat. ((le) ((z) (x))) (((plus) (y)) (((times) (a)) (y))))) (((((((le_plus) (x)) (y)) (((times) (a)) (x))) (((times) (a)) (y))) (lexy)) (lea))))))))) (n).
definition le_times : \forall n1 : nat. \forall n2 : nat. \forall m1 : nat. \forall m2 : nat. (((le) (n1)) (n2)) \to (((le) (m1)) (m2)) \to ((le) (((times) (n1)) (m1))) (((times) (n2)) (m2)) := \lambda n1 : nat. \lambda n2 : nat. \lambda m1 : nat. \lambda m2 : nat. \lambda len : ((le) (n1)) (n2). \lambda lem : ((le) (m1)) (m2). (((((transitive_le) (((times) (n1)) (m1))) (((times) (n1)) (m2))) (((times) (n2)) (m2))) (((((monotonic_le_times_r) (n1)) (m1)) (m2)) (lem))) (((((eq_coerc) (((le) (((times) (m2)) (n1))) (((times) (m2)) (n2)))) (((le) (((times) (n1)) (m2))) (((times) (n2)) (m2)))) (((((monotonic_le_times_r) (m2)) (n1)) (n2)) (len))) (((((((rewrite_r) (nat)) (((times) (n1)) (m2))) (\lambda Joker_ : nat. (((eq) Prop) (((le) (Joker_)) (((times) (m2)) (n2)))) (((le) (((times) (n1)) (m2))) (((times) (n2)) (m2))))) (((((((rewrite_r) (nat)) (((times) (n2)) (m2))) (\lambda Joker_ : nat. (((eq) Prop) (((le) (((times) (n1)) (m2))) (Joker_))) (((le) (((times) (n1)) (m2))) (((times) (n2)) (m2))))) (((refl) Prop) (((le) (((times) (n1)) (m2))) (((times) (n2)) (m2))))) (((times) (m2)) (n2))) (((commutative_times) (m2)) (n2)))) (((times) (m2)) (n1))) (((commutative_times) (m2)) (n1)))).
definition le_plus_minus_m_m : \forall n : nat. \forall m : nat. ((le) (n)) (((plus) (((minus) (n)) (m))) (m)) := \lambda n : nat. ((((nat_ind) (\lambda Jokerx_365 : nat. \forall m : nat. ((le) (Jokerx_365)) (((plus) (((minus) (Jokerx_365)) (m))) (m)))) ((((sym_eq_minus) (O)) (\lambda y : (nat) \to nat. \forall m : nat. ((le) (O)) (((plus) ((y) (m))) (m)))) (((((sym_eq_filter_nat_type_O) ((nat) \to nat)) (minus_body)) (\lambda y : (nat) \to nat. \forall m : nat. ((le) (O)) (((plus) ((y) (m))) (m)))) (((sym_eq_minus_body_O) (\lambda y : (nat) \to nat. \forall m : nat. ((le) (O)) (((plus) ((y) (m))) (m)))) (\lambda m : nat. ((le_plus_n_r) (m)) (O)))))) (\lambda a : nat. \lambda Hind : \forall m : nat. ((le) (a)) (((plus) (((minus) (a)) (m))) (m)). \lambda m : nat. ((((match_nat_prop) (\lambda Joker_ : nat. ((le) ((S) (a))) (((plus) (((minus) ((S) (a))) (Joker_))) (Joker_)))) ((((sym_eq_minus) ((S) (a))) (\lambda y : (nat) \to nat. ((le) ((S) (a))) (((plus) ((y) (O))) (O)))) ((((((sym_eq_filter_nat_type_S) ((nat) \to nat)) (minus_body)) (a)) (\lambda y : (nat) \to nat. ((le) ((S) (a))) (((plus) ((y) (O))) (O)))) ((((sym_eq_minus_body_S) (a)) (\lambda y : (nat) \to nat. ((le) ((S) (a))) (((plus) ((y) (O))) (O)))) ((((((sym_eq_match_nat_type_O) (nat)) ((S) (a))) (\lambda q : nat. ((minus) (a)) (q))) (\lambda y : nat. ((le) ((S) (a))) (((plus) (y)) (O)))) (((le_plus_n_r) (O)) ((S) (a)))))))) (\lambda n0 : nat. (((sym_eq_minus) ((S) (a))) (\lambda y : (nat) \to nat. ((le) ((S) (a))) (((plus) ((y) ((S) (n0)))) ((S) (n0))))) ((((((sym_eq_filter_nat_type_S) ((nat) \to nat)) (minus_body)) (a)) (\lambda y : (nat) \to nat. ((le) ((S) (a))) (((plus) ((y) ((S) (n0)))) ((S) (n0))))) ((((sym_eq_minus_body_S) (a)) (\lambda y : (nat) \to nat. ((le) ((S) (a))) (((plus) ((y) ((S) (n0)))) ((S) (n0))))) (((((((sym_eq_match_nat_type_S) (nat)) ((S) (a))) (\lambda q : nat. ((minus) (a)) (q))) (n0)) (\lambda y : nat. ((le) ((S) (a))) (((plus) (y)) ((S) (n0))))) (((((eq_coerc) (((le) ((S) (a))) ((S) (((plus) (((minus) (a)) (n0))) (n0))))) (((le) ((S) (a))) (((plus) (((minus) (a)) (n0))) ((S) (n0))))) ((((le_S_S) (a)) (((plus) (((minus) (a)) (n0))) (n0))) ((Hind) (n0)))) (((((((rewrite_r) (nat)) (((plus) (((minus) (a)) (n0))) ((S) (n0)))) (\lambda Joker_ : nat. (((eq) Prop) (((le) ((S) (a))) (Joker_))) (((le) ((S) (a))) (((plus) (((minus) (a)) (n0))) ((S) (n0)))))) (((refl) Prop) (((le) ((S) (a))) (((plus) (((minus) (a)) (n0))) ((S) (n0)))))) ((S) (((plus) (((minus) (a)) (n0))) (n0)))) (((plus_n_Sm) (((minus) (a)) (n0))) (n0))))))))) (m))) (n).
definition le_plus_to_minus_r : \forall a : nat. \forall b : nat. \forall c : nat. (((le) (((plus) (a)) (b))) (c)) \to ((le) (a)) (((minus) (c)) (b)) := \lambda a : nat. \lambda b : nat. \lambda c : nat. \lambda H : ((le) (((plus) (a)) (b))) (c). ((((le_plus_to_le_r) (b)) (a)) (((minus) (c)) (b))) ((((((transitive_le) (((plus) (a)) (b))) (c)) (((plus) (((minus) (c)) (b))) (b))) (H)) (((le_plus_minus_m_m) (c)) (b))).
definition lt_to_le : \forall x : nat. \forall y : nat. (((lt) (x)) (y)) \to ((le) (x)) (y) := \lambda x : nat. \lambda y : nat. \lambda auto : ((lt) (x)) (y). ((((le_plus_b) ((S) (O))) (x)) (y)) (((((eq_coerc) (((le) ((S) (x))) (y))) (((le) (((plus) (x)) ((S) (O)))) (y))) (auto)) (((((((rewrite_r) (nat)) (((plus) (x)) ((S) (O)))) (\lambda Joker_ : nat. (((eq) Prop) (((le) (Joker_)) (y))) (((le) (((plus) (x)) ((S) (O)))) (y)))) (((refl) Prop) (((le) (((plus) (x)) ((S) (O)))) (y)))) ((S) (x))) (((((((rewrite_r) (nat)) (((plus) (x)) (O))) (\lambda Joker_ : nat. (((eq) (nat)) ((S) (Joker_))) (((plus) (x)) ((S) (O))))) (((plus_n_Sm) (x)) (O))) (x)) ((plus_n_O) (x))))).
definition transitive_lt : ((transitive) (nat)) (lt) := \lambda a : nat. \lambda b : nat. \lambda c : nat. \lambda ltab : ((lt) (a)) (b). \lambda ltbc : ((lt) (b)) (c). ((((((le_ind) ((S) (b))) (\lambda x_417 : nat. ((lt) (a)) (x_417))) ((((le_S) ((S) (a))) (b)) (ltab))) (\lambda m : nat. \lambda Jokerx_419 : ((le) ((S) (b))) (m). \lambda Jokerx_421 : ((lt) (a)) (m). (((le_S) ((S) (a))) (m)) (Jokerx_421))) (c)) (ltbc).
definition lt_to_le_to_lt : \forall n : nat. \forall m : nat. \forall p : nat. (((lt) (n)) (m)) \to (((le) (m)) (p)) \to ((lt) (n)) (p) := \lambda n : nat. \lambda m : nat. \lambda p : nat. \lambda H : ((lt) (n)) (m). \lambda H1 : ((le) (m)) (p). ((((((le_ind) (m)) (\lambda x_417 : nat. ((lt) (n)) (x_417))) (H)) (\lambda m0 : nat. \lambda Jokerx_419 : ((le) (m)) (m0). \lambda Jokerx_421 : ((lt) (n)) (m0). (((((transitive_lt) (n)) (m0)) ((S) (m0))) (Jokerx_421)) (((((eq_coerc) (((le) ((S) (m0))) (((plus) (O)) ((S) (m0))))) (((le) ((S) (m0))) ((S) (m0)))) (((le_plus_n) (O)) ((S) (m0)))) (((((((rewrite_l) (nat)) ((S) (m0))) (\lambda Joker_ : nat. (((eq) Prop) (((le) ((S) (m0))) (Joker_))) (((le) ((S) (m0))) ((S) (m0))))) (((refl) Prop) (((le) ((S) (m0))) ((S) (m0))))) (((plus) (O)) ((S) (m0)))) ((plus_O_n) ((S) (m0))))))) (p)) (H1).
definition le_to_lt_to_lt : \forall n : nat. \forall m : nat. \forall p : nat. (((le) (n)) (m)) \to (((lt) (m)) (p)) \to ((lt) (n)) (p) := \lambda n : nat. \lambda m : nat. \lambda p : nat. \lambda H : ((le) (n)) (m). ((((((le_ind) (n)) (\lambda x_417 : nat. (((lt) (x_417)) (p)) \to ((lt) (n)) (p))) (\lambda auto : ((lt) (n)) (p). auto)) (\lambda m0 : nat. \lambda Jokerx_419 : ((le) (n)) (m0). \lambda Jokerx_421 : (((lt) (m0)) (p)) \to ((lt) (n)) (p). \lambda auto : ((lt) ((S) (m0))) (p). (Jokerx_421) ((((((transitive_lt) (m0)) ((S) (m0))) (p)) (((((eq_coerc) (((le) ((S) (m0))) (((plus) (O)) ((S) (m0))))) (((le) ((S) (m0))) ((S) (m0)))) (((le_plus_n) (O)) ((S) (m0)))) (((((((rewrite_l) (nat)) ((S) (m0))) (\lambda Joker_ : nat. (((eq) Prop) (((le) ((S) (m0))) (Joker_))) (((le) ((S) (m0))) ((S) (m0))))) (((refl) Prop) (((le) ((S) (m0))) ((S) (m0))))) (((plus) (O)) ((S) (m0)))) ((plus_O_n) ((S) (m0)))))) (auto)))) (m)) (H).
definition lt_S_to_lt : \forall n : nat. \forall m : nat. (((lt) ((S) (n))) (m)) \to ((lt) (n)) (m) := \lambda n : nat. \lambda m : nat. \lambda auto : ((lt) ((S) (n))) (m). (((((transitive_lt) (n)) ((S) (n))) (m)) (((((eq_coerc) (((le) ((S) (n))) (((plus) (O)) ((S) (n))))) (((le) ((S) (n))) ((S) (n)))) (((le_plus_n) (O)) ((S) (n)))) (((((((rewrite_l) (nat)) ((S) (n))) (\lambda Joker_ : nat. (((eq) Prop) (((le) ((S) (n))) (Joker_))) (((le) ((S) (n))) ((S) (n))))) (((refl) Prop) (((le) ((S) (n))) ((S) (n))))) (((plus) (O)) ((S) (n)))) ((plus_O_n) ((S) (n)))))) (auto).
definition ltn_to_ltO : \forall n : nat. \forall m : nat. (((lt) (n)) (m)) \to ((lt) (O)) (m) := \lambda n : nat. \lambda m : nat. \lambda auto : ((lt) (n)) (m). (((((lt_to_le_to_lt) (O)) ((S) (n))) (m)) (((((eq_coerc) (((le) ((S) (O))) (((plus) (n)) ((S) (O))))) (((le) ((S) (O))) ((S) (n)))) (((le_plus_n) (n)) ((S) (O)))) (((((((rewrite_l) (nat)) ((S) (n))) (\lambda Joker_ : nat. (((eq) Prop) (((le) ((S) (O))) (Joker_))) (((le) ((S) (O))) ((S) (n))))) (((refl) Prop) (((le) ((S) (O))) ((S) (n))))) (((plus) (n)) ((S) (O)))) (((((((rewrite_r) (nat)) (((plus) (n)) (O))) (\lambda Joker_ : nat. (((eq) (nat)) ((S) (Joker_))) (((plus) (n)) ((S) (O))))) (((plus_n_Sm) (n)) (O))) (n)) ((plus_n_O) (n)))))) (auto).
definition lt_O_S : \forall n : nat. ((lt) (O)) ((S) (n)) := \lambda n : nat. (((ltn_to_ltO) (n)) ((S) (n))) (((((eq_coerc) (((le) ((S) (n))) (((plus) (O)) ((S) (n))))) (((le) ((S) (n))) ((S) (n)))) (((le_plus_n) (O)) ((S) (n)))) (((((((rewrite_l) (nat)) ((S) (n))) (\lambda Joker_ : nat. (((eq) Prop) (((le) ((S) (n))) (Joker_))) (((le) ((S) (n))) ((S) (n))))) (((refl) Prop) (((le) ((S) (n))) ((S) (n))))) (((plus) (O)) ((S) (n)))) ((plus_O_n) ((S) (n))))).
definition monotonic_lt_plus_r : \forall n : nat. (((monotonic) (nat)) (lt)) (\lambda m : nat. ((plus) (n)) (m)) := \lambda n : nat. \lambda x : nat. \lambda y : nat. \lambda auto : ((lt) (x)) (y). ((((eq_coerc) (((le) (((plus) (n)) ((S) (x)))) (((plus) (n)) (y)))) (((le) ((S) (((plus) (n)) (x)))) (((plus) (n)) (y)))) (((((monotonic_le_plus_r) (n)) ((S) (x))) (y)) (auto))) (((((((rewrite_r) (nat)) (((plus) (n)) ((S) (x)))) (\lambda Joker_ : nat. (((eq) Prop) (((le) (((plus) (n)) ((S) (x)))) (((plus) (n)) (y)))) (((le) (Joker_)) (((plus) (n)) (y))))) (((refl) Prop) (((le) (((plus) (n)) ((S) (x)))) (((plus) (n)) (y))))) ((S) (((plus) (n)) (x)))) (((plus_n_Sm) (n)) (x))).
definition monotonic_lt_plus_l : \forall n : nat. (((monotonic) (nat)) (lt)) (\lambda m : nat. ((plus) (m)) (n)) := \lambda n : nat. \lambda x : nat. \lambda y : nat. \lambda auto : ((lt) (x)) (y). ((((eq_coerc) (((le) (((plus) (n)) ((S) (x)))) (((plus) (n)) (y)))) (((le) ((S) (((plus) (x)) (n)))) (((plus) (y)) (n)))) (((((monotonic_le_plus_r) (n)) ((S) (x))) (y)) (auto))) (((((((rewrite_r) (nat)) (((plus) (n)) (x))) (\lambda Joker_ : nat. (((eq) Prop) (((le) (((plus) (n)) ((S) (x)))) (((plus) (n)) (y)))) (((le) ((S) (Joker_))) (((plus) (y)) (n))))) (((((((rewrite_r) (nat)) (((plus) (n)) ((S) (x)))) (\lambda Joker_ : nat. (((eq) Prop) (((le) (((plus) (n)) ((S) (x)))) (((plus) (n)) (y)))) (((le) (Joker_)) (((plus) (y)) (n))))) (((((((rewrite_r) (nat)) (((plus) (n)) (y))) (\lambda Joker_ : nat. (((eq) Prop) (((le) (((plus) (n)) ((S) (x)))) (((plus) (n)) (y)))) (((le) (((plus) (n)) ((S) (x)))) (Joker_)))) (((refl) Prop) (((le) (((plus) (n)) ((S) (x)))) (((plus) (n)) (y))))) (((plus) (y)) (n))) (((commutative_plus) (y)) (n)))) ((S) (((plus) (n)) (x)))) (((plus_n_Sm) (n)) (x)))) (((plus) (x)) (n))) (((commutative_plus) (x)) (n))).
definition monotonic_lt_times_r : \forall c : nat. (((lt) (O)) (c)) \to (((monotonic) (nat)) (lt)) (\lambda t : nat. ((times) (c)) (t)) := \lambda c : nat. \lambda posc : ((lt) (O)) (c). \lambda n : nat. \lambda m : nat. \lambda ltnm : ((lt) (n)) (m). ((((((le_ind) ((S) (n))) (\lambda x_417 : nat. ((lt) (((times) (c)) (n))) (((times) (c)) (x_417)))) (((((eq_coerc) (((le) ((S) (((plus) (O)) (((times) (c)) (n))))) (((plus) (c)) (((times) (c)) (n))))) (((le) ((S) (((times) (c)) (n)))) (((times) (c)) ((S) (n))))) (((((monotonic_lt_plus_l) (((times) (c)) (n))) (O)) (c)) (posc))) (((((((rewrite_r) (nat)) (((plus) (O)) ((S) (((times) (c)) (n))))) (\lambda Joker_ : nat. (((eq) Prop) (((le) (Joker_)) (((plus) (c)) (((times) (c)) (n))))) (((le) ((S) (((times) (c)) (n)))) (((times) (c)) ((S) (n)))))) (((((((rewrite_l) (nat)) (((plus) (c)) (((times) (c)) (n)))) (\lambda Joker_ : nat. (((eq) Prop) (((le) (((plus) (O)) ((S) (((times) (c)) (n))))) (((plus) (c)) (((times) (c)) (n))))) (((le) ((S) (((times) (c)) (n)))) (Joker_)))) (((((((rewrite_l) (nat)) ((S) (((times) (c)) (n)))) (\lambda Joker_ : nat. (((eq) Prop) (((le) (Joker_)) (((plus) (c)) (((times) (c)) (n))))) (((le) ((S) (((times) (c)) (n)))) (((plus) (c)) (((times) (c)) (n)))))) (((refl) Prop) (((le) ((S) (((times) (c)) (n)))) (((plus) (c)) (((times) (c)) (n)))))) (((plus) (O)) ((S) (((times) (c)) (n))))) ((plus_O_n) ((S) (((times) (c)) (n)))))) (((times) (c)) ((S) (n)))) (((times_n_Sm) (c)) (n)))) ((S) (((plus) (O)) (((times) (c)) (n))))) (((plus_n_Sm) (O)) (((times) (c)) (n)))))) (\lambda a : nat. \lambda Joker_ : ((le) ((S) (n))) (a). \lambda lt1 : ((le) ((S) (((times) (c)) (n)))) (((times) (c)) (a)). (((((transitive_le) ((S) (((times) (c)) (n)))) (((times) (c)) (a))) (((times) (c)) ((S) (a)))) (lt1)) (((((eq_coerc) (((le) (((times) (c)) (a))) (((plus) (((times) (c)) (a))) (c)))) (((le) (((times) (c)) (a))) (((times) (c)) ((S) (a))))) (((le_plus_n_r) (c)) (((times) (c)) (a)))) (((((((rewrite_l) (nat)) (((plus) (c)) (((times) (c)) (a)))) (\lambda Joker_1 : nat. (((eq) Prop) (((le) (((times) (c)) (a))) (((plus) (((times) (c)) (a))) (c)))) (((le) (((times) (c)) (a))) (Joker_1)))) (((((((rewrite_r) (nat)) (((plus) (c)) (((times) (c)) (a)))) (\lambda Joker_1 : nat. (((eq) Prop) (((le) (((times) (c)) (a))) (Joker_1))) (((le) (((times) (c)) (a))) (((plus) (c)) (((times) (c)) (a)))))) (((refl) Prop) (((le) (((times) (c)) (a))) (((plus) (c)) (((times) (c)) (a)))))) (((plus) (((times) (c)) (a))) (c))) (((commutative_plus) (((times) (c)) (a))) (c)))) (((times) (c)) ((S) (a)))) (((times_n_Sm) (c)) (a)))))) (m)) (ltnm).
definition monotonic_lt_times_l : \forall c : nat. (((lt) (O)) (c)) \to (((monotonic) (nat)) (lt)) (\lambda t : nat. ((times) (t)) (c)) := \lambda c : nat. \lambda auto : ((lt) (O)) (c). \lambda x : nat. \lambda y : nat. \lambda auto' : ((lt) (x)) (y). ((((eq_coerc) (((le) ((S) (((times) (c)) (x)))) (((times) (c)) (y)))) (((le) ((S) (((times) (x)) (c)))) (((times) (y)) (c)))) ((((((monotonic_lt_times_r) (c)) (auto)) (x)) (y)) (auto'))) (((((((rewrite_r) (nat)) (((times) (c)) (x))) (\lambda Joker_ : nat. (((eq) Prop) (((le) ((S) (((times) (c)) (x)))) (((times) (c)) (y)))) (((le) ((S) (Joker_))) (((times) (y)) (c))))) (((((((rewrite_r) (nat)) (((times) (c)) (y))) (\lambda Joker_ : nat. (((eq) Prop) (((le) ((S) (((times) (c)) (x)))) (((times) (c)) (y)))) (((le) ((S) (((times) (c)) (x)))) (Joker_)))) (((refl) Prop) (((le) ((S) (((times) (c)) (x)))) (((times) (c)) (y))))) (((times) (y)) (c))) (((commutative_times) (y)) (c)))) (((times) (x)) (c))) (((commutative_times) (x)) (c))).
definition lt_to_le_to_lt_times : \forall n : nat. \forall m : nat. \forall p : nat. \forall q : nat. (((lt) (n)) (m)) \to (((le) (p)) (q)) \to (((lt) (O)) (q)) \to ((lt) (((times) (n)) (p))) (((times) (m)) (q)) := \lambda n : nat. \lambda m : nat. \lambda p : nat. \lambda q : nat. \lambda ltnm : ((lt) (n)) (m). \lambda lepq : ((le) (p)) (q). \lambda posq : ((lt) (O)) (q). (((((le_to_lt_to_lt) (((times) (n)) (p))) (((times) (n)) (q))) (((times) (m)) (q))) (((((monotonic_le_times_r) (n)) (p)) (q)) (lepq))) ((((((monotonic_lt_times_l) (q)) (posq)) (n)) (m)) (ltnm)).
definition lt_times : \forall n : nat. \forall m : nat. \forall p : nat. \forall q : nat. (((lt) (n)) (m)) \to (((lt) (p)) (q)) \to ((lt) (((times) (n)) (p))) (((times) (m)) (q)) := \lambda n : nat. \lambda m : nat. \lambda p : nat. \lambda q : nat. \lambda ltnm : ((lt) (n)) (m). \lambda ltpq : ((lt) (p)) (q). (((((((lt_to_le_to_lt_times) (n)) (m)) (p)) (q)) (ltnm)) ((((lt_to_le) (p)) (q)) (ltpq))) ((((ltn_to_ltO) (p)) (q)) (ltpq)).
definition lt_plus_to_minus_r : \forall a : nat. \forall b : nat. \forall c : nat. (((lt) (((plus) (a)) (b))) (c)) \to ((lt) (a)) (((minus) (c)) (b)) := \lambda a : nat. \lambda b : nat. \lambda c : nat. \lambda H : ((lt) (((plus) (a)) (b))) (c). ((((le_plus_to_minus_r) ((S) (a))) (b)) (c)) ((((sym_eq_plus) ((S) (a))) (\lambda y : (nat) \to nat. ((le) ((y) (b))) (c))) ((((((sym_eq_filter_nat_type_S) ((nat) \to nat)) (plus_body)) (a)) (\lambda y : (nat) \to nat. ((le) ((y) (b))) (c))) ((((sym_eq_plus_body_S) (a)) (\lambda y : (nat) \to nat. ((le) ((y) (b))) (c))) (H)))).
definition lt_plus_Sn_r : \forall a : nat. \forall x : nat. \forall n : nat. ((lt) (a)) (((plus) (((plus) (a)) (x))) ((S) (n))) := \lambda a : nat. \lambda x : nat. \lambda n : nat. ((((eq_coerc) (((le) ((S) (a))) ((S) (((plus) (((plus) (a)) (x))) (n))))) (((le) ((S) (a))) (((plus) (((plus) (a)) (x))) ((S) (n))))) ((((le_S_S) (a)) (((plus) (((plus) (a)) (x))) (n))) (((((eq_coerc) (((le) (a)) (((plus) (a)) (((plus) (x)) (n))))) (((le) (a)) (((plus) (((plus) (a)) (x))) (n)))) (((le_plus_n_r) (((plus) (x)) (n))) (a))) (((((((rewrite_r) (nat)) (((plus) (n)) (((plus) (a)) (x)))) (\lambda Joker_ : nat. (((eq) Prop) (((le) (a)) (((plus) (a)) (((plus) (x)) (n))))) (((le) (a)) (Joker_)))) (((((((rewrite_r) (nat)) (((plus) (a)) (((plus) (n)) (x)))) (\lambda Joker_ : nat. (((eq) Prop) (((le) (a)) (((plus) (a)) (((plus) (x)) (n))))) (((le) (a)) (Joker_)))) (((((((rewrite_r) (nat)) (((plus) (x)) (n))) (\lambda Joker_ : nat. (((eq) Prop) (((le) (a)) (((plus) (a)) (((plus) (x)) (n))))) (((le) (a)) (((plus) (a)) (Joker_))))) (((refl) Prop) (((le) (a)) (((plus) (a)) (((plus) (x)) (n)))))) (((plus) (n)) (x))) (((commutative_plus) (n)) (x)))) (((plus) (n)) (((plus) (a)) (x)))) (((((((rewrite_l) (nat)) (((plus) (((plus) (a)) (n))) (x))) (\lambda Joker_ : nat. (((eq) (nat)) (((plus) (n)) (((plus) (a)) (x)))) (Joker_))) ((((assoc_plus1) (x)) (a)) (n))) (((plus) (a)) (((plus) (n)) (x)))) ((((associative_plus) (a)) (n)) (x))))) (((plus) (((plus) (a)) (x))) (n))) (((commutative_plus) (((plus) (a)) (x))) (n)))))) (((((((rewrite_r) (nat)) (((plus) (a)) (((plus) (x)) ((S) (n))))) (\lambda Joker_ : nat. (((eq) Prop) (((le) ((S) (a))) ((S) (((plus) (((plus) (a)) (x))) (n))))) (((le) ((S) (a))) (Joker_)))) (((((((rewrite_r) (nat)) (((plus) (((plus) (a)) (x))) ((S) (n)))) (\lambda Joker_ : nat. (((eq) Prop) (((le) ((S) (a))) (Joker_))) (((le) ((S) (a))) (((plus) (a)) (((plus) (x)) ((S) (n))))))) (((((((rewrite_r) (nat)) (((plus) (a)) (((plus) (x)) ((S) (n))))) (\lambda Joker_ : nat. (((eq) Prop) (((le) ((S) (a))) (Joker_))) (((le) ((S) (a))) (((plus) (a)) (((plus) (x)) ((S) (n))))))) (((refl) Prop) (((le) ((S) (a))) (((plus) (a)) (((plus) (x)) ((S) (n))))))) (((plus) (((plus) (a)) (x))) ((S) (n)))) ((((associative_plus) (a)) (x)) ((S) (n))))) ((S) (((plus) (((plus) (a)) (x))) (n)))) (((plus_n_Sm) (((plus) (a)) (x))) (n)))) (((plus) (((plus) (a)) (x))) ((S) (n)))) ((((associative_plus) (a)) (x)) ((S) (n)))).
definition not_le_Sn_O : \forall n : nat. (Not) (((le) ((S) (n))) (O)) := \lambda n : nat. \lambda Hlen0 : ((le) ((S) (n))) (O). (((((eq_match_nat_type_O) Prop) (False)) (\lambda p : nat. True)) (\lambda y : Prop. y)) ((((lt_to_not_zero) (n)) (O)) (Hlen0)).
definition not_le_to_not_le_S_S : \forall n : nat. \forall m : nat. ((Not) (((le) (n)) (m))) \to (Not) (((le) ((S) (n))) ((S) (m))) := \lambda n : nat. \lambda m : nat. \lambda auto : (Not) (((le) (n)) (m)). ((((not_to_not) (((le) ((S) (n))) ((S) (m)))) (((le) (n)) (m))) (\lambda auto' : ((le) ((S) (n))) ((S) (m)). ((((eq_coerc) (((le) ((pred) ((S) (n)))) ((pred) ((S) (m))))) (((le) (n)) (m))) ((((monotonic_pred) ((S) (n))) ((S) (m))) (auto'))) (((((((rewrite_l) (nat)) (n)) (\lambda Joker_ : nat. (((eq) Prop) (((le) (Joker_)) ((pred) ((S) (m))))) (((le) (n)) (m)))) (((((((rewrite_l) (nat)) (m)) (\lambda Joker_ : nat. (((eq) Prop) (((le) (n)) (Joker_))) (((le) (n)) (m)))) (((refl) Prop) (((le) (n)) (m)))) ((pred) ((S) (m)))) ((pred_Sn) (m)))) ((pred) ((S) (n)))) ((pred_Sn) (n))))) (auto).
definition not_le_S_S_to_not_le : \forall n : nat. \forall m : nat. ((Not) (((le) ((S) (n))) ((S) (m)))) \to (Not) (((le) (n)) (m)) := \lambda n : nat. \lambda m : nat. \lambda auto : (Not) (((le) ((S) (n))) ((S) (m))). ((((not_to_not) (((le) (n)) (m))) (((le) ((S) (n))) ((S) (m)))) (\lambda auto' : ((le) (n)) (m). (((le_S_S) (n)) (m)) (auto'))) (auto).
definition not_le_Sn_n : \forall n : nat. (Not) (((le) ((S) (n))) (n)) := \lambda n : nat. ((((nat_ind) (\lambda Jokerx_365 : nat. (Not) (((le) ((S) (Jokerx_365))) (Jokerx_365)))) ((not_le_Sn_O) (O))) (\lambda x_366 : nat. \lambda Jokerx_368 : (Not) (((le) ((S) (x_366))) (x_366)). (((not_le_to_not_le_S_S) ((S) (x_366))) (x_366)) (Jokerx_368))) (n).
definition lt_to_not_le : \forall n : nat. \forall m : nat. (((lt) (n)) (m)) \to (Not) (((le) (m)) (n)) := \lambda n : nat. \lambda m : nat. \lambda Hltnm : ((lt) (n)) (m). ((((((le_ind) ((S) (n))) (\lambda x_417 : nat. (Not) (((le) (x_417)) (n)))) ((not_le_Sn_n) (n))) (\lambda m0 : nat. \lambda Jokerx_419 : ((le) ((S) (n))) (m0). \lambda Jokerx_421 : (Not) (((le) (m0)) (n)). ((((not_to_not) (((le) ((S) (m0))) (n))) (((le) (m0)) (n))) (\lambda auto : ((le) ((S) (m0))) (n). (((lt_to_le) (m0)) (n)) (auto))) (Jokerx_421))) (m)) (Hltnm).
definition not_le_to_lt : \forall n : nat. \forall m : nat. ((Not) (((le) (n)) (m))) \to ((lt) (m)) (n) := ((((nat_elim2) (\lambda Joker_ : nat. \lambda Joker0 : nat. ((Not) (((le) (Joker_)) (Joker0))) \to ((lt) (Joker0)) (Joker_))) (\lambda n : nat. \lambda abs : (Not) (((le) (O)) (n)). ((falsity) (((lt) (n)) (O))) ((((absurd) (((le) (O)) (n))) (((((eq_coerc) (((le) (O)) (((plus) (n)) (O)))) (((le) (O)) (n))) (((le_plus_n) (n)) (O))) (((((((rewrite_l) (nat)) (n)) (\lambda Joker_ : nat. (((eq) Prop) (((le) (O)) (Joker_))) (((le) (O)) (n)))) (((refl) Prop) (((le) (O)) (n)))) (((plus) (n)) (O))) ((plus_n_O) (n))))) (abs)))) (\lambda n : nat. \lambda auto : (Not) (((le) ((S) (n))) (O)). (lt_O_S) (n))) (\lambda n : nat. \lambda m : nat. \lambda Hind : ((Not) (((le) (n)) (m))) \to ((lt) (m)) (n). \lambda HnotleSS : (Not) (((le) ((S) (n))) ((S) (m))). (((le_S_S) ((S) (m))) (n)) ((Hind) ((((not_le_S_S_to_not_le) (n)) (m)) (HnotleSS)))).
definition not_lt_to_le : \forall n : nat. \forall m : nat. ((Not) (((lt) (n)) (m))) \to ((le) (m)) (n) := \lambda n : nat. \lambda m : nat. \lambda H : (Not) (((lt) (n)) (m)). (((le_S_S_to_le) (m)) (n)) ((((not_le_to_lt) ((S) (n))) (m)) (((((not_to_not) (((le) ((S) (n))) (m))) (((lt) (n)) (m))) (\lambda auto : ((le) ((S) (n))) (m). auto)) (H))).
definition le_to_not_lt : \forall n : nat. \forall m : nat. (((le) (n)) (m)) \to (Not) (((lt) (m)) (n)) := \lambda n : nat. \lambda m : nat. \lambda H : ((le) (n)) (m). (((lt_to_not_le) (n)) ((S) (m))) ((((((le_to_lt_to_lt) (n)) (m)) ((S) (m))) (H)) (((((eq_coerc) (((le) ((S) (m))) (((plus) (O)) ((S) (m))))) (((le) ((S) (m))) ((S) (m)))) (((le_plus_n) (O)) ((S) (m)))) (((((((rewrite_l) (nat)) ((S) (m))) (\lambda Joker_ : nat. (((eq) Prop) (((le) ((S) (m))) (Joker_))) (((le) ((S) (m))) ((S) (m))))) (((refl) Prop) (((le) ((S) (m))) ((S) (m))))) (((plus) (O)) ((S) (m)))) ((plus_O_n) ((S) (m)))))).
definition decidable_le : \forall n : nat. \forall m : nat. (decidable) (((le) (n)) (m)) := ((((nat_elim2) (\lambda Joker_ : nat. \lambda Joker0 : nat. (decidable) (((le) (Joker_)) (Joker0)))) (\lambda n : nat. \lambda z : Prop. \lambda l : (((le) (O)) (n)) \to z. \lambda r : ((Not) (((le) (O)) (n))) \to z. (l) ((le_O_n) (n)))) (\lambda n : nat. \lambda z : Prop. \lambda l : (((le) ((S) (n))) (O)) \to z. \lambda r : ((Not) (((le) ((S) (n))) (O))) \to z. (r) ((not_le_Sn_O) (n)))) (\lambda n : nat. \lambda m : nat. \lambda Jokerclearme : (decidable) (((le) (n)) (m)). ((((((match_Or_prop) (((le) (n)) (m))) ((Not) (((le) (n)) (m)))) ((decidable) (((le) ((S) (n))) ((S) (m))))) (\lambda auto : ((le) (n)) (m). \lambda z : Prop. \lambda l : (((le) ((S) (n))) ((S) (m))) \to z. \lambda r : ((Not) (((le) ((S) (n))) ((S) (m)))) \to z. (l) ((((le_S_S) (n)) (m)) (auto)))) (\lambda auto : (Not) (((le) (n)) (m)). \lambda z : Prop. \lambda l : (((le) ((S) (n))) ((S) (m))) \to z. \lambda r : ((Not) (((le) ((S) (n))) ((S) (m)))) \to z. (r) ((((not_le_to_not_le_S_S) (n)) (m)) (auto)))) (Jokerclearme)).
definition decidable_lt : \forall n : nat. \forall m : nat. (decidable) (((lt) (n)) (m)) := \lambda n : nat. \lambda m : nat. ((decidable_le) ((S) (n))) (m).
definition le_to_or_lt_eq : \forall n : nat. \forall m : nat. (((le) (n)) (m)) \to ((Or) (((lt) (n)) (m))) ((((eq) (nat)) (n)) (m)) := \lambda n : nat. \lambda m : nat. \lambda lenm : ((le) (n)) (m). ((((((le_ind) (n)) (\lambda x_417 : nat. ((Or) (((lt) (n)) (x_417))) ((((eq) (nat)) (n)) (x_417)))) ((((RC_reflexive) (nat)) (lt)) (n))) (\lambda m0 : nat. \lambda Jokerx_419 : ((le) (n)) (m0). \lambda Jokerx_421 : ((Or) (((lt) (n)) (m0))) ((((eq) (nat)) (n)) (m0)). \lambda z : Prop. \lambda l : (((lt) (n)) ((S) (m0))) \to z. \lambda r : ((((eq) (nat)) (n)) ((S) (m0))) \to z. (l) ((((((le_to_lt_to_lt) (n)) (m0)) ((S) (m0))) (Jokerx_419)) (((((eq_coerc) (((le) ((S) (m0))) (((plus) (O)) ((S) (m0))))) (((le) ((S) (m0))) ((S) (m0)))) (((le_plus_n) (O)) ((S) (m0)))) (((((((rewrite_l) (nat)) ((S) (m0))) (\lambda Joker_ : nat. (((eq) Prop) (((le) ((S) (m0))) (Joker_))) (((le) ((S) (m0))) ((S) (m0))))) (((refl) Prop) (((le) ((S) (m0))) ((S) (m0))))) (((plus) (O)) ((S) (m0)))) ((plus_O_n) ((S) (m0)))))))) (m)) (lenm).
definition lt_O_n_elim : \forall n : nat. (((lt) (O)) (n)) \to \forall P : (nat) \to Prop. (\forall m : nat. (P) ((S) (m))) \to (P) (n) := \lambda n : nat. ((((nat_ind) (\lambda Jokerx_365 : nat. (((lt) (O)) (Jokerx_365)) \to \forall P : (nat) \to Prop. (\forall m : nat. (P) ((S) (m))) \to (P) (Jokerx_365))) (\lambda abs : ((lt) (O)) (O). ((falsity) (\forall P : (nat) \to Prop. (\forall m : nat. (P) ((S) (m))) \to (P) (O))) ((((absurd) (((le) ((S) (O))) (O))) (abs)) ((not_le_Sn_O) (O))))) (\lambda x_366 : nat. \lambda Jokerx_368 : (((lt) (O)) (x_366)) \to \forall P : (nat) \to Prop. (\forall m : nat. (P) ((S) (m))) \to (P) (x_366). \lambda auto : ((lt) (O)) ((S) (x_366)). \lambda P : (nat) \to Prop. \lambda auto' : \forall m : nat. (P) ((S) (m)). (auto') (x_366))) (n).
definition le_n_O_elim : \forall n : nat. (((le) (n)) (O)) \to \forall P : (nat) \to Prop. ((P) (O)) \to (P) (n) := \lambda n : nat. ((((match_nat_prop) (\lambda Joker_ : nat. (((le) (Joker_)) (O)) \to \forall P : (nat) \to Prop. ((P) (O)) \to (P) (Joker_))) (\lambda auto : ((le) (O)) (O). \lambda P : (nat) \to Prop. \lambda auto' : (P) (O). auto')) (\lambda a : nat. \lambda abs : ((le) ((S) (a))) (O). ((falsity) (\forall P : (nat) \to Prop. ((P) (O)) \to (P) ((S) (a)))) ((((absurd) (((le) ((S) (a))) (O))) (abs)) ((not_le_Sn_O) (a))))) (n).
definition lt_to_not_eq : \forall n : nat. \forall m : nat. (((lt) (n)) (m)) \to (Not) ((((eq) (nat)) (n)) (m)) := \lambda n : nat. \lambda m : nat. \lambda H : ((lt) (n)) (m). ((((not_to_not) ((((eq) (nat)) (n)) (m))) (False)) (\lambda auto : (((eq) (nat)) (n)) (m). (((absurd) (((le) ((S) (n))) (n))) (((((eq_coerc) (((le) ((S) (n))) (m))) (((le) ((S) (n))) (n))) (H)) (((((((rewrite_l) (nat)) (n)) (\lambda Joker_ : nat. (((eq) Prop) (((le) ((S) (n))) (Joker_))) (((le) ((S) (n))) (n)))) (((refl) Prop) (((le) ((S) (n))) (n)))) (m)) (auto)))) ((not_le_Sn_n) (n)))) (\lambda auto : False. auto).
definition le_n_O_to_eq : \forall n : nat. (((le) (n)) (O)) \to (((eq) (nat)) (O)) (n) := \lambda n : nat. ((((match_nat_prop) (\lambda Joker_ : nat. (((le) (Joker_)) (O)) \to (((eq) (nat)) (O)) (Joker_))) (\lambda auto : ((le) (O)) (O). ((refl) (nat)) (O))) (\lambda a : nat. \lambda abs : ((le) ((S) (a))) (O). ((falsity) ((((eq) (nat)) (O)) ((S) (a)))) ((((absurd) (((le) ((S) (a))) (O))) (abs)) ((not_le_Sn_O) (a))))) (n).
definition le_to_le_to_eq : \forall n : nat. \forall m : nat. (((le) (n)) (m)) \to (((le) (m)) (n)) \to (((eq) (nat)) (n)) (m) := ((((nat_elim2) (\lambda Joker_ : nat. \lambda Joker0 : nat. (((le) (Joker_)) (Joker0)) \to (((le) (Joker0)) (Joker_)) \to (((eq) (nat)) (Joker_)) (Joker0))) (\lambda n : nat. \lambda auto : ((le) (O)) (n). \lambda auto' : ((le) (n)) (O). ((((sym_eq) (nat)) (n)) (O)) (((((sym_eq) (nat)) (O)) (n)) (((((eq_coerc) ((((eq) (nat)) (O)) (n))) ((((eq) (nat)) (O)) (n))) (((le_n_O_to_eq) (n)) (auto'))) (((refl) Prop) ((((eq) (nat)) (O)) (n))))))) (\lambda n : nat. \lambda auto : ((le) ((S) (n))) (O). \lambda auto' : ((le) (O)) ((S) (n)). ((((sym_eq) (nat)) (O)) ((S) (n))) (((le_n_O_to_eq) ((S) (n))) (auto)))) (\lambda n : nat. \lambda m : nat. \lambda auto : (((le) (n)) (m)) \to (((le) (m)) (n)) \to (((eq) (nat)) (n)) (m). \lambda auto' : ((le) ((S) (n))) ((S) (m)). \lambda auto'' : ((le) ((S) (m))) ((S) (n)). ((((((eq_f) (nat)) (nat)) (S)) (n)) (m)) (((auto) (((((eq_coerc) (((le) ((pred) ((S) (n)))) ((pred) ((S) (m))))) (((le) (n)) (m))) ((((monotonic_pred) ((S) (n))) ((S) (m))) (auto'))) (((((((rewrite_l) (nat)) (n)) (\lambda Joker_ : nat. (((eq) Prop) (((le) (Joker_)) ((pred) ((S) (m))))) (((le) (n)) (m)))) (((((((rewrite_l) (nat)) (m)) (\lambda Joker_ : nat. (((eq) Prop) (((le) (n)) (Joker_))) (((le) (n)) (m)))) (((refl) Prop) (((le) (n)) (m)))) ((pred) ((S) (m)))) ((pred_Sn) (m)))) ((pred) ((S) (n)))) ((pred_Sn) (n))))) (((((eq_coerc) (((le) ((pred) ((S) (m)))) ((pred) ((S) (n))))) (((le) (m)) (n))) ((((monotonic_pred) ((S) (m))) ((S) (n))) (auto''))) (((((((rewrite_l) (nat)) (m)) (\lambda Joker_ : nat. (((eq) Prop) (((le) (Joker_)) ((pred) ((S) (n))))) (((le) (m)) (n)))) (((((((rewrite_l) (nat)) (n)) (\lambda Joker_ : nat. (((eq) Prop) (((le) (m)) (Joker_))) (((le) (m)) (n)))) (((refl) Prop) (((le) (m)) (n)))) ((pred) ((S) (n)))) ((pred_Sn) (n)))) ((pred) ((S) (m)))) ((pred_Sn) (m)))))).
definition plus_minus : \forall m : nat. \forall n : nat. \forall p : nat. (((le) (m)) (n)) \to (((eq) (nat)) (((plus) (((minus) (n)) (m))) (p))) (((minus) (((plus) (n)) (p))) (m)) := ((((nat_elim2) (\lambda Joker_ : nat. \lambda Joker0 : nat. \forall p : nat. (((le) (Joker_)) (Joker0)) \to (((eq) (nat)) (((plus) (((minus) (Joker0)) (Joker_))) (p))) (((minus) (((plus) (Joker0)) (p))) (Joker_)))) (\lambda n : nat. \lambda p : nat. \lambda auto : ((le) (O)) (n). ((((((rewrite_l) (nat)) (n)) (\lambda Joker_ : nat. (((eq) (nat)) (((plus) (Joker_)) (p))) (((minus) (((plus) (n)) (p))) (O)))) (((((((rewrite_l) (nat)) (((plus) (n)) (p))) (\lambda Joker_ : nat. (((eq) (nat)) (((plus) (n)) (p))) (Joker_))) (((refl) (nat)) (((plus) (n)) (p)))) (((minus) (((plus) (n)) (p))) (O))) ((minus_n_O) (((plus) (n)) (p))))) (((minus) (n)) (O))) ((minus_n_O) (n)))) (\lambda n : nat. \lambda p : nat. \lambda abs : ((le) ((S) (n))) (O). ((falsity) ((((eq) (nat)) (((plus) (((minus) (O)) ((S) (n)))) (p))) (((minus) (((plus) (O)) (p))) ((S) (n))))) ((((absurd) (((le) ((S) (n))) (O))) (abs)) ((not_le_Sn_O) (n))))) (\lambda n : nat. \lambda m : nat. (((sym_eq_minus) ((S) (m))) (\lambda y : (nat) \to nat. (\forall p : nat. (((le) (n)) (m)) \to (((eq) (nat)) (((plus) (((minus) (m)) (n))) (p))) (((minus) (((plus) (m)) (p))) (n))) \to \forall p : nat. (((le) ((S) (n))) ((S) (m))) \to (((eq) (nat)) (((plus) ((y) ((S) (n)))) (p))) (((minus) (((plus) ((S) (m))) (p))) ((S) (n))))) ((((((sym_eq_filter_nat_type_S) ((nat) \to nat)) (minus_body)) (m)) (\lambda y : (nat) \to nat. (\forall p : nat. (((le) (n)) (m)) \to (((eq) (nat)) (((plus) (((minus) (m)) (n))) (p))) (((minus) (((plus) (m)) (p))) (n))) \to \forall p : nat. (((le) ((S) (n))) ((S) (m))) \to (((eq) (nat)) (((plus) ((y) ((S) (n)))) (p))) (((minus) (((plus) ((S) (m))) (p))) ((S) (n))))) ((((sym_eq_minus_body_S) (m)) (\lambda y : (nat) \to nat. (\forall p : nat. (((le) (n)) (m)) \to (((eq) (nat)) (((plus) (((minus) (m)) (n))) (p))) (((minus) (((plus) (m)) (p))) (n))) \to \forall p : nat. (((le) ((S) (n))) ((S) (m))) \to (((eq) (nat)) (((plus) ((y) ((S) (n)))) (p))) (((minus) (((plus) ((S) (m))) (p))) ((S) (n))))) (\lambda auto : \forall p : nat. (((le) (n)) (m)) \to (((eq) (nat)) (((plus) (((minus) (m)) (n))) (p))) (((minus) (((plus) (m)) (p))) (n)). \lambda p : nat. ((((((sym_eq_match_nat_type_S) (nat)) ((S) (m))) (\lambda q : nat. ((minus) (m)) (q))) (n)) (\lambda y : nat. (((le) ((S) (n))) ((S) (m))) \to (((eq) (nat)) (((plus) (y)) (p))) (((minus) (((plus) ((S) (m))) (p))) ((S) (n))))) ((((sym_eq_minus) (((plus) ((S) (m))) (p))) (\lambda y : (nat) \to nat. (((le) ((S) (n))) ((S) (m))) \to (((eq) (nat)) (((plus) (((minus) (m)) (n))) (p))) ((y) ((S) (n))))) ((((sym_eq_plus) ((S) (m))) (\lambda y : (nat) \to nat. (((le) ((S) (n))) ((S) (m))) \to (((eq) (nat)) (((plus) (((minus) (m)) (n))) (p))) (((((filter_nat_type) ((nat) \to nat)) (minus_body)) ((y) (p))) ((S) (n))))) ((((((sym_eq_filter_nat_type_S) ((nat) \to nat)) (plus_body)) (m)) (\lambda y : (nat) \to nat. (((le) ((S) (n))) ((S) (m))) \to (((eq) (nat)) (((plus) (((minus) (m)) (n))) (p))) (((((filter_nat_type) ((nat) \to nat)) (minus_body)) ((y) (p))) ((S) (n))))) ((((sym_eq_plus_body_S) (m)) (\lambda y : (nat) \to nat. (((le) ((S) (n))) ((S) (m))) \to (((eq) (nat)) (((plus) (((minus) (m)) (n))) (p))) (((((filter_nat_type) ((nat) \to nat)) (minus_body)) ((y) (p))) ((S) (n))))) ((((((sym_eq_filter_nat_type_S) ((nat) \to nat)) (minus_body)) (((plus) (m)) (p))) (\lambda y : (nat) \to nat. (((le) ((S) (n))) ((S) (m))) \to (((eq) (nat)) (((plus) (((minus) (m)) (n))) (p))) ((y) ((S) (n))))) ((((eq_plus_body_S) (m)) (\lambda y : (nat) \to nat. (((le) ((S) (n))) ((S) (m))) \to (((eq) (nat)) (((plus) (((minus) (m)) (n))) (p))) (((minus_body) ((y) (p))) ((S) (n))))) ((((((eq_filter_nat_type_S) ((nat) \to nat)) (plus_body)) (m)) (\lambda y : (nat) \to nat. (((le) ((S) (n))) ((S) (m))) \to (((eq) (nat)) (((plus) (((minus) (m)) (n))) (p))) (((minus_body) ((y) (p))) ((S) (n))))) ((((eq_plus) ((S) (m))) (\lambda y : (nat) \to nat. (((le) ((S) (n))) ((S) (m))) \to (((eq) (nat)) (((plus) (((minus) (m)) (n))) (p))) (((minus_body) ((y) (p))) ((S) (n))))) ((((sym_eq_plus) ((S) (m))) (\lambda y : (nat) \to nat. (((le) ((S) (n))) ((S) (m))) \to (((eq) (nat)) (((plus) (((minus) (m)) (n))) (p))) (((minus_body) ((y) (p))) ((S) (n))))) ((((((sym_eq_filter_nat_type_S) ((nat) \to nat)) (plus_body)) (m)) (\lambda y : (nat) \to nat. (((le) ((S) (n))) ((S) (m))) \to (((eq) (nat)) (((plus) (((minus) (m)) (n))) (p))) (((minus_body) ((y) (p))) ((S) (n))))) ((((sym_eq_plus_body_S) (m)) (\lambda y : (nat) \to nat. (((le) ((S) (n))) ((S) (m))) \to (((eq) (nat)) (((plus) (((minus) (m)) (n))) (p))) (((minus_body) ((y) (p))) ((S) (n))))) ((((sym_eq_minus_body_S) (((plus) (m)) (p))) (\lambda y : (nat) \to nat. (((le) ((S) (n))) ((S) (m))) \to (((eq) (nat)) (((plus) (((minus) (m)) (n))) (p))) ((y) ((S) (n))))) (((((((sym_eq_match_nat_type_S) (nat)) ((S) (((plus) (m)) (p)))) (\lambda q : nat. ((minus) (((plus) (m)) (p))) (q))) (n)) (\lambda y : nat. (((le) ((S) (n))) ((S) (m))) \to (((eq) (nat)) (((plus) (((minus) (m)) (n))) (p))) (y))) (\lambda auto' : ((le) ((S) (n))) ((S) (m)). ((auto) (p)) (((((eq_coerc) (((le) ((pred) ((S) (n)))) ((pred) ((S) (m))))) (((le) (n)) (m))) ((((monotonic_pred) ((S) (n))) ((S) (m))) (auto'))) (((((((rewrite_l) (nat)) (n)) (\lambda Joker_ : nat. (((eq) Prop) (((le) (Joker_)) ((pred) ((S) (m))))) (((le) (n)) (m)))) (((((((rewrite_l) (nat)) (m)) (\lambda Joker_ : nat. (((eq) Prop) (((le) (n)) (Joker_))) (((le) (n)) (m)))) (((refl) Prop) (((le) (n)) (m)))) ((pred) ((S) (m)))) ((pred_Sn) (m)))) ((pred) ((S) (n)))) ((pred_Sn) (n)))))))))))))))))))))).
definition minus_plus_m_m : \forall n : nat. \forall m : nat. (((eq) (nat)) (n)) (((minus) (((plus) (n)) (m))) (m)) := \lambda n : nat. \lambda m : nat. ((((eq_coerc) ((((eq) (nat)) (((plus) (((minus) (m)) (m))) (n))) (((minus) (((plus) (m)) (n))) (m)))) ((((eq) (nat)) (n)) (((minus) (((plus) (n)) (m))) (m)))) (((((plus_minus) (m)) (m)) (n)) ((le_n) (m)))) (((((((rewrite_l) (nat)) (O)) (\lambda Joker_ : nat. (((eq) Prop) ((((eq) (nat)) (((plus) (Joker_)) (n))) (((minus) (((plus) (m)) (n))) (m)))) ((((eq) (nat)) (n)) (((minus) (((plus) (n)) (m))) (m))))) (((((((rewrite_l) (nat)) (n)) (\lambda Joker_ : nat. (((eq) Prop) ((((eq) (nat)) (Joker_)) (((minus) (((plus) (m)) (n))) (m)))) ((((eq) (nat)) (n)) (((minus) (((plus) (n)) (m))) (m))))) (((((((rewrite_r) (nat)) (((plus) (n)) (m))) (\lambda Joker_ : nat. (((eq) Prop) ((((eq) (nat)) (n)) (((minus) (Joker_)) (m)))) ((((eq) (nat)) (n)) (((minus) (((plus) (n)) (m))) (m))))) (((refl) Prop) ((((eq) (nat)) (n)) (((minus) (((plus) (n)) (m))) (m))))) (((plus) (m)) (n))) (((commutative_plus) (m)) (n)))) (((plus) (O)) (n))) ((plus_O_n) (n)))) (((minus) (m)) (m))) ((minus_n_n) (m))).
definition plus_minus_m_m : \forall n : nat. \forall m : nat. (((le) (m)) (n)) \to (((eq) (nat)) (n)) (((plus) (((minus) (n)) (m))) (m)) := \lambda n : nat. \lambda m : nat. \lambda lemn : ((le) (m)) (n). ((((sym_eq) (nat)) (((plus) (((minus) (n)) (m))) (m))) (n)) (((((eq_coerc) ((((eq) (nat)) (((plus) (((minus) (n)) (m))) (m))) (((minus) (((plus) (n)) (m))) (m)))) ((((eq) (nat)) (((plus) (((minus) (n)) (m))) (m))) (n))) (((((plus_minus) (m)) (n)) (m)) (lemn))) (((((((rewrite_r) (nat)) (((plus) (m)) (((minus) (n)) (m)))) (\lambda Joker_ : nat. (((eq) Prop) ((((eq) (nat)) (((plus) (((minus) (n)) (m))) (m))) (((minus) (((plus) (n)) (m))) (m)))) ((((eq) (nat)) (Joker_)) (n)))) (((((((rewrite_r) (nat)) (((plus) (m)) (((minus) (n)) (m)))) (\lambda Joker_ : nat. (((eq) Prop) ((((eq) (nat)) (Joker_)) (((minus) (((plus) (n)) (m))) (m)))) ((((eq) (nat)) (((plus) (m)) (((minus) (n)) (m)))) (n)))) (((((((rewrite_l) (nat)) (n)) (\lambda Joker_ : nat. (((eq) Prop) ((((eq) (nat)) (((plus) (m)) (((minus) (n)) (m)))) (Joker_))) ((((eq) (nat)) (((plus) (m)) (((minus) (n)) (m)))) (n)))) (((refl) Prop) ((((eq) (nat)) (((plus) (m)) (((minus) (n)) (m)))) (n)))) (((minus) (((plus) (n)) (m))) (m))) (((minus_plus_m_m) (n)) (m)))) (((plus) (((minus) (n)) (m))) (m))) (((commutative_plus) (((minus) (n)) (m))) (m)))) (((plus) (((minus) (n)) (m))) (m))) (((commutative_plus) (((minus) (n)) (m))) (m)))).
definition minus_to_plus : \forall n : nat. \forall m : nat. \forall p : nat. (((le) (m)) (n)) \to ((((eq) (nat)) (((minus) (n)) (m))) (p)) \to (((eq) (nat)) (n)) (((plus) (m)) (p)) := \lambda n : nat. \lambda m : nat. \lambda p : nat. \lambda lemn : ((le) (m)) (n). \lambda eqp : (((eq) (nat)) (((minus) (n)) (m))) (p). ((((eq_coerc) ((((eq) (nat)) (n)) (((plus) (((minus) (n)) (m))) (m)))) ((((eq) (nat)) (n)) (((plus) (m)) (p)))) ((((plus_minus_m_m) (n)) (m)) (lemn))) (((((((rewrite_r) (nat)) (((plus) (m)) (((minus) (n)) (m)))) (\lambda Joker_ : nat. (((eq) Prop) ((((eq) (nat)) (n)) (Joker_))) ((((eq) (nat)) (n)) (((plus) (m)) (p))))) (((((((rewrite_r) (nat)) (p)) (\lambda Joker_ : nat. (((eq) Prop) ((((eq) (nat)) (n)) (((plus) (m)) (Joker_)))) ((((eq) (nat)) (n)) (((plus) (m)) (p))))) (((refl) Prop) ((((eq) (nat)) (n)) (((plus) (m)) (p))))) (((minus) (n)) (m))) (eqp))) (((plus) (((minus) (n)) (m))) (m))) (((commutative_plus) (((minus) (n)) (m))) (m))).
definition plus_to_minus : \forall n : nat. \forall m : nat. \forall p : nat. ((((eq) (nat)) (n)) (((plus) (m)) (p))) \to (((eq) (nat)) (((minus) (n)) (m))) (p) := \lambda n : nat. \lambda m : nat. \lambda p : nat. \lambda eqp : (((eq) (nat)) (n)) (((plus) (m)) (p)). ((((sym_eq) (nat)) (p)) (((minus) (n)) (m))) (((((eq_coerc) ((((eq) (nat)) (p)) (((minus) (((plus) (p)) (m))) (m)))) ((((eq) (nat)) (p)) (((minus) (n)) (m)))) (((minus_plus_m_m) (p)) (m))) (((((((rewrite_r) (nat)) (((plus) (m)) (p))) (\lambda Joker_ : nat. (((eq) Prop) ((((eq) (nat)) (p)) (((minus) (Joker_)) (m)))) ((((eq) (nat)) (p)) (((minus) (n)) (m))))) (((((((rewrite_l) (nat)) (n)) (\lambda Joker_ : nat. (((eq) Prop) ((((eq) (nat)) (p)) (((minus) (Joker_)) (m)))) ((((eq) (nat)) (p)) (((minus) (n)) (m))))) (((refl) Prop) ((((eq) (nat)) (p)) (((minus) (n)) (m))))) (((plus) (m)) (p))) (eqp))) (((plus) (p)) (m))) (((commutative_plus) (p)) (m)))).
definition monotonic_le_minus_l : \forall p : nat. \forall q : nat. \forall n : nat. (((le) (q)) (p)) \to ((le) (((minus) (q)) (n))) (((minus) (p)) (n)) := ((((nat_elim2) (\lambda Joker_ : nat. \lambda Joker0 : nat. \forall n : nat. (((le) (Joker0)) (Joker_)) \to ((le) (((minus) (Joker0)) (n))) (((minus) (Joker_)) (n)))) (\lambda p : nat. \lambda q : nat. \lambda lePO : ((le) (p)) (O). ((((le_n_O_elim) (p)) (lePO)) (\lambda Joker_ : nat. ((le) (((minus) (Joker_)) (q))) (((minus) (O)) (q)))) ((le_n) (((minus) (O)) (q))))) (\lambda p : nat. \lambda q : nat. (((sym_eq_minus) ((S) (p))) (\lambda y : (nat) \to nat. (((le) (O)) ((S) (p))) \to ((le) (((minus) (O)) (q))) ((y) (q)))) ((((((sym_eq_filter_nat_type_S) ((nat) \to nat)) (minus_body)) (p)) (\lambda y : (nat) \to nat. (((le) (O)) ((S) (p))) \to ((le) (((minus) (O)) (q))) ((y) (q)))) ((((sym_eq_minus_body_S) (p)) (\lambda y : (nat) \to nat. (((le) (O)) ((S) (p))) \to ((le) (((minus) (O)) (q))) ((y) (q)))) (((eq_plus_body_O) (\lambda y : (nat) \to nat. (((le) (O)) ((S) (p))) \to ((le) (((minus) (O)) (q))) ((y) (((((match_nat_type) (nat)) ((S) (p))) (\lambda q0 : nat. ((minus) (p)) (q0))) (q))))) (((((eq_filter_nat_type_O) ((nat) \to nat)) (plus_body)) (\lambda y : (nat) \to nat. (((le) (O)) ((S) (p))) \to ((le) (((minus) (O)) (q))) ((y) (((((match_nat_type) (nat)) ((S) (p))) (\lambda q0 : nat. ((minus) (p)) (q0))) (q))))) ((((eq_plus) (O)) (\lambda y : (nat) \to nat. (((le) (O)) ((S) (p))) \to ((le) (((minus) (O)) (q))) ((y) (((((match_nat_type) (nat)) ((S) (p))) (\lambda q0 : nat. ((minus) (p)) (q0))) (q))))) (((eq_minus_body_O) (\lambda y : (nat) \to nat. (((le) (O)) ((S) (p))) \to ((le) (((minus) (O)) (q))) (((plus) ((y) (((((match_nat_type) (nat)) ((S) (p))) (\lambda q0 : nat. ((minus) (p)) (q0))) (q)))) (((((match_nat_type) (nat)) ((S) (p))) (\lambda q0 : nat. ((minus) (p)) (q0))) (q))))) (((((eq_filter_nat_type_O) ((nat) \to nat)) (minus_body)) (\lambda y : (nat) \to nat. (((le) (O)) ((S) (p))) \to ((le) (((minus) (O)) (q))) (((plus) ((y) (((((match_nat_type) (nat)) ((S) (p))) (\lambda q0 : nat. ((minus) (p)) (q0))) (q)))) (((((match_nat_type) (nat)) ((S) (p))) (\lambda q0 : nat. ((minus) (p)) (q0))) (q))))) ((((eq_minus) (O)) (\lambda y : (nat) \to nat. (((le) (O)) ((S) (p))) \to ((le) (((minus) (O)) (q))) (((plus) ((y) (((((match_nat_type) (nat)) ((S) (p))) (\lambda q0 : nat. ((minus) (p)) (q0))) (q)))) (((((match_nat_type) (nat)) ((S) (p))) (\lambda q0 : nat. ((minus) (p)) (q0))) (q))))) (((eq_minus_body_O) (\lambda y : (nat) \to nat. (((le) (O)) ((S) (p))) \to ((le) (((minus) (O)) (q))) (((plus) (((minus) ((y) (q))) (((((match_nat_type) (nat)) ((S) (p))) (\lambda q0 : nat. ((minus) (p)) (q0))) (q)))) (((((match_nat_type) (nat)) ((S) (p))) (\lambda q0 : nat. ((minus) (p)) (q0))) (q))))) (((((eq_filter_nat_type_O) ((nat) \to nat)) (minus_body)) (\lambda y : (nat) \to nat. (((le) (O)) ((S) (p))) \to ((le) (((minus) (O)) (q))) (((plus) (((minus) ((y) (q))) (((((match_nat_type) (nat)) ((S) (p))) (\lambda q0 : nat. ((minus) (p)) (q0))) (q)))) (((((match_nat_type) (nat)) ((S) (p))) (\lambda q0 : nat. ((minus) (p)) (q0))) (q))))) ((((eq_minus) (O)) (\lambda y : (nat) \to nat. (((le) (O)) ((S) (p))) \to ((le) (((minus) (O)) (q))) (((plus) (((minus) ((y) (q))) (((((match_nat_type) (nat)) ((S) (p))) (\lambda q0 : nat. ((minus) (p)) (q0))) (q)))) (((((match_nat_type) (nat)) ((S) (p))) (\lambda q0 : nat. ((minus) (p)) (q0))) (q))))) (\lambda auto : ((le) (O)) ((S) (p)). ((le_plus_minus_m_m) (((minus) (O)) (q))) (((((match_nat_type) (nat)) ((S) (p))) (\lambda q0 : nat. ((minus) (p)) (q0))) (q)))))))))))))))) (\lambda p : nat. \lambda q : nat. \lambda Hind : \forall n0 : nat. (((le) (q)) (p)) \to ((le) (((minus) (q)) (n0))) (((minus) (p)) (n0)). \lambda n : nat. ((((match_nat_prop) (\lambda Joker_ : nat. (((le) ((S) (q))) ((S) (p))) \to ((le) (((minus) ((S) (q))) (Joker_))) (((minus) ((S) (p))) (Joker_)))) ((((sym_eq_minus) ((S) (q))) (\lambda y : (nat) \to nat. (((le) ((S) (q))) ((S) (p))) \to ((le) ((y) (O))) (((minus) ((S) (p))) (O)))) ((((((sym_eq_filter_nat_type_S) ((nat) \to nat)) (minus_body)) (q)) (\lambda y : (nat) \to nat. (((le) ((S) (q))) ((S) (p))) \to ((le) ((y) (O))) (((minus) ((S) (p))) (O)))) ((((sym_eq_minus_body_S) (q)) (\lambda y : (nat) \to nat. (((le) ((S) (q))) ((S) (p))) \to ((le) ((y) (O))) (((minus) ((S) (p))) (O)))) ((((((sym_eq_match_nat_type_O) (nat)) ((S) (q))) (\lambda z : nat. ((minus) (q)) (z))) (\lambda y : nat. (((le) ((S) (q))) ((S) (p))) \to ((le) (y)) (((minus) ((S) (p))) (O)))) ((((sym_eq_minus) ((S) (p))) (\lambda y : (nat) \to nat. (((le) ((S) (q))) ((S) (p))) \to ((le) ((S) (q))) ((y) (O)))) ((((((sym_eq_filter_nat_type_S) ((nat) \to nat)) (minus_body)) (p)) (\lambda y : (nat) \to nat. (((le) ((S) (q))) ((S) (p))) \to ((le) ((S) (q))) ((y) (O)))) ((((sym_eq_minus_body_S) (p)) (\lambda y : (nat) \to nat. (((le) ((S) (q))) ((S) (p))) \to ((le) ((S) (q))) ((y) (O)))) ((((((sym_eq_match_nat_type_O) (nat)) ((S) (p))) (\lambda q0 : nat. ((minus) (p)) (q0))) (\lambda y : nat. (((le) ((S) (q))) ((S) (p))) \to ((le) ((S) (q))) (y))) (\lambda auto : ((le) ((S) (q))) ((S) (p)). auto)))))))))) ((((sym_eq_minus) ((S) (q))) (\lambda y : (nat) \to nat. \forall a : nat. (((le) ((S) (q))) ((S) (p))) \to ((le) ((y) ((S) (a)))) (((minus) ((S) (p))) ((S) (a))))) ((((((sym_eq_filter_nat_type_S) ((nat) \to nat)) (minus_body)) (q)) (\lambda y : (nat) \to nat. \forall a : nat. (((le) ((S) (q))) ((S) (p))) \to ((le) ((y) ((S) (a)))) (((minus) ((S) (p))) ((S) (a))))) ((((sym_eq_minus_body_S) (q)) (\lambda y : (nat) \to nat. \forall a : nat. (((le) ((S) (q))) ((S) (p))) \to ((le) ((y) ((S) (a)))) (((minus) ((S) (p))) ((S) (a))))) (\lambda a : nat. ((((((sym_eq_match_nat_type_S) (nat)) ((S) (q))) (\lambda z : nat. ((minus) (q)) (z))) (a)) (\lambda y : nat. (((le) ((S) (q))) ((S) (p))) \to ((le) (y)) (((minus) ((S) (p))) ((S) (a))))) ((((sym_eq_minus) ((S) (p))) (\lambda y : (nat) \to nat. (((le) ((S) (q))) ((S) (p))) \to ((le) (((minus) (q)) (a))) ((y) ((S) (a))))) ((((((sym_eq_filter_nat_type_S) ((nat) \to nat)) (minus_body)) (p)) (\lambda y : (nat) \to nat. (((le) ((S) (q))) ((S) (p))) \to ((le) (((minus) (q)) (a))) ((y) ((S) (a))))) ((((sym_eq_minus_body_S) (p)) (\lambda y : (nat) \to nat. (((le) ((S) (q))) ((S) (p))) \to ((le) (((minus) (q)) (a))) ((y) ((S) (a))))) (((((((sym_eq_match_nat_type_S) (nat)) ((S) (p))) (\lambda q0 : nat. ((minus) (p)) (q0))) (a)) (\lambda y : nat. (((le) ((S) (q))) ((S) (p))) \to ((le) (((minus) (q)) (a))) (y))) (\lambda leSS : ((le) ((S) (q))) ((S) (p)). ((Hind) (a)) (((((eq_coerc) (((le) ((pred) ((S) (q)))) ((pred) ((S) (p))))) (((le) (q)) (p))) ((((monotonic_pred) ((S) (q))) ((S) (p))) (leSS))) (((((((rewrite_l) (nat)) (q)) (\lambda Joker_ : nat. (((eq) Prop) (((le) (Joker_)) ((pred) ((S) (p))))) (((le) (q)) (p)))) (((((((rewrite_l) (nat)) (p)) (\lambda Joker_ : nat. (((eq) Prop) (((le) (q)) (Joker_))) (((le) (q)) (p)))) (((refl) Prop) (((le) (q)) (p)))) ((pred) ((S) (p)))) ((pred_Sn) (p)))) ((pred) ((S) (q)))) ((pred_Sn) (q)))))))))))))) (n)).
definition le_plus_to_minus : \forall n : nat. \forall m : nat. \forall p : nat. (((le) (n)) (((plus) (p)) (m))) \to ((le) (((minus) (n)) (m))) (p) := \lambda n : nat. \lambda m : nat. \lambda p : nat. \lambda lep : ((le) (n)) (((plus) (p)) (m)). ((((eq_coerc) (((le) (((minus) (n)) (m))) (((minus) (((plus) (p)) (m))) (m)))) (((le) (((minus) (n)) (m))) (p))) (((((monotonic_le_minus_l) (((plus) (p)) (m))) (n)) (m)) (lep))) (((((((rewrite_l) (nat)) (p)) (\lambda Joker_ : nat. (((eq) Prop) (((le) (((minus) (n)) (m))) (Joker_))) (((le) (((minus) (n)) (m))) (p)))) (((refl) Prop) (((le) (((minus) (n)) (m))) (p)))) (((minus) (((plus) (p)) (m))) (m))) (((minus_plus_m_m) (p)) (m))).
definition monotonic_le_minus_r : \forall p : nat. \forall q : nat. \forall n : nat. (((le) (q)) (p)) \to ((le) (((minus) (n)) (p))) (((minus) (n)) (q)) := \lambda p : nat. \lambda q : nat. \lambda n : nat. \lambda lepq : ((le) (q)) (p). ((((le_plus_to_minus) (n)) (p)) (((minus) (n)) (q))) ((((((transitive_le) (n)) (((plus) (((minus) (n)) (q))) (q))) (((plus) (((minus) (n)) (q))) (p))) (((le_plus_minus_m_m) (n)) (q))) (((((monotonic_le_plus_r) (((minus) (n)) (q))) (q)) (p)) (lepq))).
definition minus_le : \forall x : nat. \forall y : nat. ((le) (((minus) (x)) (y))) (x) := \lambda x : nat. \lambda y : nat. ((((eq_coerc) (((le) (((minus) (x)) (y))) (((minus) (((plus) (x)) (y))) (y)))) (((le) (((minus) (x)) (y))) (x))) (((((monotonic_le_minus_l) (((plus) (x)) (y))) (x)) (y)) (((le_plus_n_r) (y)) (x)))) (((((((rewrite_l) (nat)) (x)) (\lambda Joker_ : nat. (((eq) Prop) (((le) (((minus) (x)) (y))) (Joker_))) (((le) (((minus) (x)) (y))) (x)))) (((refl) Prop) (((le) (((minus) (x)) (y))) (x)))) (((minus) (((plus) (x)) (y))) (y))) (((minus_plus_m_m) (x)) (y))).
definition not_eq_to_le_to_lt : \forall n : nat. \forall m : nat. ((Not) ((((eq) (nat)) (n)) (m))) \to (((le) (n)) (m)) \to ((lt) (n)) (m) := \lambda n : nat. \lambda m : nat. \lambda Hneq : (Not) ((((eq) (nat)) (n)) (m)). \lambda Hle : ((le) (n)) (m). ((((((match_Or_prop) (((lt) (n)) (m))) ((((eq) (nat)) (n)) (m))) (((lt) (n)) (m))) (\lambda auto : ((lt) (n)) (m). auto)) (\lambda Heq : (((eq) (nat)) (n)) (m). (((not_le_to_lt) (m)) (n)) (((((not_to_not) (((le) (m)) (n))) ((((eq) (nat)) (n)) (m))) (\lambda auto : ((le) (m)) (n). ((((((rewrite_l) (nat)) (n)) (\lambda Joker_ : nat. (((eq) (nat)) (n)) (Joker_))) (((refl) (nat)) (n))) (m)) (Heq))) (Hneq)))) ((((le_to_or_lt_eq) (n)) (m)) (Hle)).
definition eq_minus_O : \forall n : nat. \forall m : nat. (((le) (n)) (m)) \to (((eq) (nat)) (((minus) (n)) (m))) (O) := \lambda n : nat. \lambda m : nat. \lambda lenm : ((le) (n)) (m). ((((le_n_O_elim) (((minus) (n)) (m))) (((((eq_coerc) (((le) (((minus) (n)) (m))) (((minus) (n)) (n)))) (((le) (((minus) (n)) (m))) (O))) (((((monotonic_le_minus_r) (m)) (n)) (n)) (lenm))) (((((((rewrite_l) (nat)) (O)) (\lambda Joker_ : nat. (((eq) Prop) (((le) (((minus) (n)) (m))) (Joker_))) (((le) (((minus) (n)) (m))) (O)))) (((refl) Prop) (((le) (((minus) (n)) (m))) (O)))) (((minus) (n)) (n))) ((minus_n_n) (n))))) (\lambda Joker_ : nat. (((eq) (nat)) (Joker_)) (O))) (((refl) (nat)) (O)).
definition distributive_times_minus : (((distributive) (nat)) (times)) (minus) := \lambda a : nat. \lambda b : nat. \lambda c : nat. ((((((match_Or_prop) (((lt) (b)) (c))) ((Not) (((lt) (b)) (c)))) ((((eq) (nat)) (((times) (a)) (((minus) (b)) (c)))) (((minus) (((times) (a)) (b))) (((times) (a)) (c))))) (\lambda Hbc : ((lt) (b)) (c). ((((((eq_ind_r) (nat)) (O)) (\lambda x : nat. (((eq) (nat)) (((times) (a)) (x))) (((minus) (((times) (a)) (b))) (((times) (a)) (c))))) (((((((eq_ind_r) (nat)) (O)) (\lambda x : nat. (((eq) (nat)) (((times) (a)) (O))) (x))) (((((((rewrite_l) (nat)) (O)) (\lambda Joker_ : nat. (((eq) (nat)) (Joker_)) (O))) (((refl) (nat)) (O))) (((times) (a)) (O))) ((times_n_O) (a)))) (((minus) (((times) (a)) (b))) (((times) (a)) (c)))) ((((eq_minus_O) (((times) (a)) (b))) (((times) (a)) (c))) (((((monotonic_le_times_r) (a)) (b)) (c)) ((((lt_to_le) (b)) (c)) (Hbc)))))) (((minus) (b)) (c))) ((((eq_minus_O) (b)) (c)) ((((lt_to_le) (b)) (c)) (Hbc))))) (\lambda Hbc : (Not) (((lt) (b)) (c)). ((((sym_eq) (nat)) (((minus) (((times) (a)) (b))) (((times) (a)) (c)))) (((times) (a)) (((minus) (b)) (c)))) (((((eq_coerc) ((((eq) (nat)) (((minus) (((times) (a)) (b))) (((times) (a)) (c)))) (((times) (a)) (((minus) (b)) (c))))) ((((eq) (nat)) (((minus) (((times) (a)) (b))) (((times) (a)) (c)))) (((times) (a)) (((minus) (b)) (c))))) (((((plus_to_minus) (((times) (a)) (b))) (((times) (a)) (c))) (((times) (a)) (((minus) (b)) (c)))) (((((((eq_ind) (nat)) (((times) (a)) (((plus) (c)) (((minus) (b)) (c))))) (\lambda x_1 : nat. (((eq) (nat)) (((times) (a)) (b))) (x_1))) (((((((eq_f) (nat)) (nat)) ((times) (a))) (b)) (((plus) (c)) (((minus) (b)) (c)))) (((((eq_coerc) ((((eq) (nat)) (b)) (((plus) (((minus) (b)) (c))) (c)))) ((((eq) (nat)) (b)) (((plus) (c)) (((minus) (b)) (c))))) ((((plus_minus_m_m) (b)) (c)) ((((not_lt_to_le) (b)) (c)) (Hbc)))) (((((((rewrite_r) (nat)) (((plus) (c)) (((minus) (b)) (c)))) (\lambda Joker_ : nat. (((eq) Prop) ((((eq) (nat)) (b)) (Joker_))) ((((eq) (nat)) (b)) (((plus) (c)) (((minus) (b)) (c)))))) (((refl) Prop) ((((eq) (nat)) (b)) (((plus) (c)) (((minus) (b)) (c)))))) (((plus) (((minus) (b)) (c))) (c))) (((commutative_plus) (((minus) (b)) (c))) (c)))))) (((plus) (((times) (a)) (c))) (((times) (a)) (((minus) (b)) (c))))) ((((distributive_times_plus) (a)) (c)) (((minus) (b)) (c)))))) (((refl) Prop) ((((eq) (nat)) (((minus) (((times) (a)) (b))) (((times) (a)) (c)))) (((times) (a)) (((minus) (b)) (c)))))))) (((decidable_lt) (b)) (c)).
definition minus_plus : \forall n : nat. \forall m : nat. \forall p : nat. (((eq) (nat)) (((minus) (((minus) (n)) (m))) (p))) (((minus) (n)) (((plus) (m)) (p))) := \lambda n : nat. \lambda m : nat. \lambda p : nat. ((((((match_Or_prop) (((le) (((plus) (m)) (p))) (n))) ((Not) (((le) (((plus) (m)) (p))) (n)))) ((((eq) (nat)) (((minus) (((minus) (n)) (m))) (p))) (((minus) (n)) (((plus) (m)) (p))))) (\lambda Hlt : ((le) (((plus) (m)) (p))) (n). ((((plus_to_minus) (((minus) (n)) (m))) (p)) (((minus) (n)) (((plus) (m)) (p)))) (((((plus_to_minus) (n)) (m)) (((plus) (p)) (((minus) (n)) (((plus) (m)) (p))))) (((((((eq_ind) (nat)) (((plus) (((plus) (m)) (p))) (((minus) (n)) (((plus) (m)) (p))))) (\lambda x_1 : nat. (((eq) (nat)) (n)) (x_1))) ((((((minus_to_plus) (n)) (((plus) (m)) (p))) (((minus) (n)) (((plus) (m)) (p)))) (Hlt)) (((refl) (nat)) (((minus) (n)) (((plus) (m)) (p)))))) (((plus) (m)) (((plus) (p)) (((minus) (n)) (((plus) (m)) (p)))))) ((((associative_plus) (m)) (p)) (((minus) (n)) (((plus) (m)) (p)))))))) (\lambda Hlt : (Not) (((le) (((plus) (m)) (p))) (n)). ((((((eq_ind_r) (nat)) (O)) (\lambda x : nat. (((eq) (nat)) (x)) (((minus) (n)) (((plus) (m)) (p))))) (((((sym_eq) (nat)) (((minus) (n)) (((plus) (m)) (p)))) (O)) (((((eq_coerc) ((((eq) (nat)) (((minus) (n)) (((plus) (m)) (p)))) (O))) ((((eq) (nat)) (((minus) (n)) (((plus) (m)) (p)))) (O))) ((((eq_minus_O) (n)) (((plus) (m)) (p))) ((((((transitive_le) (n)) ((S) (n))) (((plus) (m)) (p))) ((le_n_Sn) (n))) ((((not_le_to_lt) (((plus) (m)) (p))) (n)) (Hlt))))) (((refl) Prop) ((((eq) (nat)) (((minus) (n)) (((plus) (m)) (p)))) (O)))))) (((minus) (((minus) (n)) (m))) (p))) ((((eq_minus_O) (((minus) (n)) (m))) (p)) (((((eq_coerc) (((le) (((minus) (n)) (m))) (((minus) (((plus) (p)) (m))) (m)))) (((le) (((minus) (n)) (m))) (p))) (((((monotonic_le_minus_l) (((plus) (p)) (m))) (n)) (m)) (((((eq_coerc) (((le) (n)) (((plus) (m)) (p)))) (((le) (n)) (((plus) (p)) (m)))) ((((((transitive_le) (n)) ((S) (n))) (((plus) (m)) (p))) ((le_n_Sn) (n))) ((((not_le_to_lt) (((plus) (m)) (p))) (n)) (Hlt)))) (((((((rewrite_r) (nat)) (((plus) (m)) (p))) (\lambda Joker_ : nat. (((eq) Prop) (((le) (n)) (((plus) (m)) (p)))) (((le) (n)) (Joker_)))) (((refl) Prop) (((le) (n)) (((plus) (m)) (p))))) (((plus) (p)) (m))) (((commutative_plus) (p)) (m)))))) (((((((rewrite_l) (nat)) (p)) (\lambda Joker_ : nat. (((eq) Prop) (((le) (((minus) (n)) (m))) (Joker_))) (((le) (((minus) (n)) (m))) (p)))) (((refl) Prop) (((le) (((minus) (n)) (m))) (p)))) (((minus) (((plus) (p)) (m))) (m))) (((minus_plus_m_m) (p)) (m))))))) (((decidable_le) (((plus) (m)) (p))) (n)).
definition minus_minus : \forall n : nat. \forall m : nat. \forall p : nat. (((le) (p)) (m)) \to (((le) (m)) (n)) \to (((eq) (nat)) (((plus) (p)) (((minus) (n)) (m)))) (((minus) (n)) (((minus) (m)) (p))) := \lambda n : nat. \lambda m : nat. \lambda p : nat. \lambda lepm : ((le) (p)) (m). \lambda lemn : ((le) (m)) (n). ((((sym_eq) (nat)) (((minus) (n)) (((minus) (m)) (p)))) (((plus) (p)) (((minus) (n)) (m)))) (((((plus_to_minus) (n)) (((minus) (m)) (p))) (((plus) (p)) (((minus) (n)) (m)))) (((((((eq_ind) (nat)) (((plus) (((plus) (((minus) (m)) (p))) (p))) (((minus) (n)) (m)))) (\lambda x_1 : nat. (((eq) (nat)) (n)) (x_1))) (((((((eq_ind) (nat)) (m)) (\lambda x_1 : nat. (((eq) (nat)) (n)) (((plus) (x_1)) (((minus) (n)) (m))))) (((((((eq_ind) (nat)) (((plus) (((minus) (n)) (m))) (m))) (\lambda x_1 : nat. (((eq) (nat)) (n)) (x_1))) (((((((eq_ind) (nat)) (n)) (\lambda x_1 : nat. (((eq) (nat)) (n)) (x_1))) (((refl) (nat)) (n))) (((plus) (((minus) (n)) (m))) (m))) ((((plus_minus_m_m) (n)) (m)) (lemn)))) (((plus) (m)) (((minus) (n)) (m)))) (((commutative_plus) (((minus) (n)) (m))) (m)))) (((plus) (((minus) (m)) (p))) (p))) ((((plus_minus_m_m) (m)) (p)) (lepm)))) (((plus) (((minus) (m)) (p))) (((plus) (p)) (((minus) (n)) (m))))) ((((associative_plus) (((minus) (m)) (p))) (p)) (((minus) (n)) (m))))).
definition minus_minus_comm : \forall a : nat. \forall b : nat. \forall c : nat. (((eq) (nat)) (((minus) (((minus) (a)) (b))) (c))) (((minus) (((minus) (a)) (c))) (b)) := \lambda a : nat. \lambda b : nat. \lambda c : nat. ((((le_to_le_to_eq) (((minus) (((minus) (a)) (b))) (c))) (((minus) (((minus) (a)) (c))) (b))) (((((eq_coerc) (((le) (((minus) (((minus) (a)) (b))) (c))) (((minus) (((plus) (((minus) (((minus) (a)) (c))) (b))) (c))) (c)))) (((le) (((minus) (((minus) (a)) (b))) (c))) (((minus) (((minus) (a)) (c))) (b)))) (((((monotonic_le_minus_l) (((plus) (((minus) (((minus) (a)) (c))) (b))) (c))) (((minus) (a)) (b))) (c)) (((((eq_coerc) (((le) (((minus) (a)) (b))) (((plus) (((minus) (((minus) (a)) (b))) (c))) (c)))) (((le) (((minus) (a)) (b))) (((plus) (((minus) (((minus) (a)) (c))) (b))) (c)))) (((le_plus_minus_m_m) (((minus) (a)) (b))) (c))) (((((((rewrite_r) (nat)) (((minus) (a)) (((plus) (b)) (c)))) (\lambda Joker_ : nat. (((eq) Prop) (((le) (((minus) (a)) (b))) (((plus) (Joker_)) (c)))) (((le) (((minus) (a)) (b))) (((plus) (((minus) (((minus) (a)) (c))) (b))) (c))))) (((((((rewrite_r) (nat)) (((plus) (c)) (((minus) (a)) (((plus) (b)) (c))))) (\lambda Joker_ : nat. (((eq) Prop) (((le) (((minus) (a)) (b))) (Joker_))) (((le) (((minus) (a)) (b))) (((plus) (((minus) (((minus) (a)) (c))) (b))) (c))))) (((((((rewrite_r) (nat)) (((plus) (c)) (((minus) (((minus) (a)) (c))) (b)))) (\lambda Joker_ : nat. (((eq) Prop) (((le) (((minus) (a)) (b))) (((plus) (c)) (((minus) (a)) (((plus) (b)) (c)))))) (((le) (((minus) (a)) (b))) (Joker_)))) (((((((rewrite_l) (nat)) (((minus) (((minus) (a)) (c))) (b))) (\lambda Joker_ : nat. (((eq) Prop) (((le) (((minus) (a)) (b))) (((plus) (c)) (Joker_)))) (((le) (((minus) (a)) (b))) (((plus) (c)) (((minus) (((minus) (a)) (c))) (b)))))) (((refl) Prop) (((le) (((minus) (a)) (b))) (((plus) (c)) (((minus) (((minus) (a)) (c))) (b)))))) (((minus) (a)) (((plus) (b)) (c)))) (((((((rewrite_l) (nat)) (((plus) (c)) (b))) (\lambda Joker_ : nat. (((eq) (nat)) (((minus) (((minus) (a)) (c))) (b))) (((minus) (a)) (Joker_)))) ((((minus_plus) (a)) (c)) (b))) (((plus) (b)) (c))) (((commutative_plus) (c)) (b))))) (((plus) (((minus) (((minus) (a)) (c))) (b))) (c))) (((commutative_plus) (((minus) (((minus) (a)) (c))) (b))) (c)))) (((plus) (((minus) (a)) (((plus) (b)) (c)))) (c))) (((commutative_plus) (((minus) (a)) (((plus) (b)) (c)))) (c)))) (((minus) (((minus) (a)) (b))) (c))) ((((minus_plus) (a)) (b)) (c)))))) (((((((rewrite_l) (nat)) (((minus) (((minus) (a)) (c))) (b))) (\lambda Joker_ : nat. (((eq) Prop) (((le) (((minus) (((minus) (a)) (b))) (c))) (Joker_))) (((le) (((minus) (((minus) (a)) (b))) (c))) (((minus) (((minus) (a)) (c))) (b))))) (((refl) Prop) (((le) (((minus) (((minus) (a)) (b))) (c))) (((minus) (((minus) (a)) (c))) (b))))) (((minus) (((plus) (((minus) (((minus) (a)) (c))) (b))) (c))) (c))) (((minus_plus_m_m) (((minus) (((minus) (a)) (c))) (b))) (c))))) (((((eq_coerc) (((le) (((minus) (((minus) (a)) (c))) (b))) (((minus) (((plus) (((minus) (((minus) (a)) (b))) (c))) (b))) (b)))) (((le) (((minus) (((minus) (a)) (c))) (b))) (((minus) (((minus) (a)) (b))) (c)))) (((((monotonic_le_minus_l) (((plus) (((minus) (((minus) (a)) (b))) (c))) (b))) (((minus) (a)) (c))) (b)) (((((eq_coerc) (((le) (((minus) (a)) (c))) (((plus) (((minus) (((minus) (a)) (c))) (b))) (b)))) (((le) (((minus) (a)) (c))) (((plus) (((minus) (((minus) (a)) (b))) (c))) (b)))) (((le_plus_minus_m_m) (((minus) (a)) (c))) (b))) (((((((rewrite_r) (nat)) (((minus) (a)) (((plus) (c)) (b)))) (\lambda Joker_ : nat. (((eq) Prop) (((le) (((minus) (a)) (c))) (((plus) (Joker_)) (b)))) (((le) (((minus) (a)) (c))) (((plus) (((minus) (((minus) (a)) (b))) (c))) (b))))) (((((((rewrite_r) (nat)) (((plus) (b)) (((minus) (a)) (((plus) (c)) (b))))) (\lambda Joker_ : nat. (((eq) Prop) (((le) (((minus) (a)) (c))) (Joker_))) (((le) (((minus) (a)) (c))) (((plus) (((minus) (((minus) (a)) (b))) (c))) (b))))) (((((((rewrite_r) (nat)) (((plus) (b)) (((minus) (((minus) (a)) (b))) (c)))) (\lambda Joker_ : nat. (((eq) Prop) (((le) (((minus) (a)) (c))) (((plus) (b)) (((minus) (a)) (((plus) (c)) (b)))))) (((le) (((minus) (a)) (c))) (Joker_)))) (((((((rewrite_l) (nat)) (((minus) (((minus) (a)) (b))) (c))) (\lambda Joker_ : nat. (((eq) Prop) (((le) (((minus) (a)) (c))) (((plus) (b)) (Joker_)))) (((le) (((minus) (a)) (c))) (((plus) (b)) (((minus) (((minus) (a)) (b))) (c)))))) (((refl) Prop) (((le) (((minus) (a)) (c))) (((plus) (b)) (((minus) (((minus) (a)) (b))) (c)))))) (((minus) (a)) (((plus) (c)) (b)))) (((((((rewrite_l) (nat)) (((plus) (b)) (c))) (\lambda Joker_ : nat. (((eq) (nat)) (((minus) (((minus) (a)) (b))) (c))) (((minus) (a)) (Joker_)))) ((((minus_plus) (a)) (b)) (c))) (((plus) (c)) (b))) (((commutative_plus) (b)) (c))))) (((plus) (((minus) (((minus) (a)) (b))) (c))) (b))) (((commutative_plus) (((minus) (((minus) (a)) (b))) (c))) (b)))) (((plus) (((minus) (a)) (((plus) (c)) (b)))) (b))) (((commutative_plus) (((minus) (a)) (((plus) (c)) (b)))) (b)))) (((minus) (((minus) (a)) (c))) (b))) ((((minus_plus) (a)) (c)) (b)))))) (((((((rewrite_l) (nat)) (((minus) (((minus) (a)) (b))) (c))) (\lambda Joker_ : nat. (((eq) Prop) (((le) (((minus) (((minus) (a)) (c))) (b))) (Joker_))) (((le) (((minus) (((minus) (a)) (c))) (b))) (((minus) (((minus) (a)) (b))) (c))))) (((refl) Prop) (((le) (((minus) (((minus) (a)) (c))) (b))) (((minus) (((minus) (a)) (b))) (c))))) (((minus) (((plus) (((minus) (((minus) (a)) (b))) (c))) (b))) (b))) (((minus_plus_m_m) (((minus) (((minus) (a)) (b))) (c))) (b)))).
definition minus_le_minus_minus_comm : \forall b : nat. \forall c : nat. \forall a : nat. (((le) (c)) (b)) \to (((eq) (nat)) (((minus) (a)) (((minus) (b)) (c)))) (((minus) (((plus) (a)) (c))) (b)) := \lambda b : nat. \lambda c : nat. \lambda a : nat. \lambda H : ((le) (c)) (b). ((((((eq_ind_r) (nat)) (((plus) (((minus) (b)) (c))) (c))) (\lambda x : nat. (((eq) (nat)) (((minus) (a)) (((minus) (b)) (c)))) (((minus) (((plus) (a)) (c))) (x)))) (((((((rewrite_r) (nat)) (((plus) (c)) (a))) (\lambda Joker_ : nat. (((eq) (nat)) (((minus) (a)) (((minus) (b)) (c)))) (((minus) (Joker_)) (((plus) (((minus) (b)) (c))) (c))))) (((((((rewrite_r) (nat)) (((plus) (c)) (((minus) (b)) (c)))) (\lambda Joker_ : nat. (((eq) (nat)) (((minus) (a)) (((minus) (b)) (c)))) (((minus) (((plus) (c)) (a))) (Joker_)))) (((((((rewrite_l) (nat)) (((minus) (((minus) (((plus) (c)) (a))) (c))) (((minus) (b)) (c)))) (\lambda Joker_ : nat. (((eq) (nat)) (((minus) (a)) (((minus) (b)) (c)))) (Joker_))) (((((((rewrite_r) (nat)) (((minus) (((plus) (c)) (a))) (c))) (\lambda Joker_ : nat. (((eq) (nat)) (((minus) (Joker_)) (((minus) (b)) (c)))) (((minus) (((minus) (((plus) (c)) (a))) (c))) (((minus) (b)) (c))))) (((refl) (nat)) (((minus) (((minus) (((plus) (c)) (a))) (c))) (((minus) (b)) (c))))) (a)) (((((((rewrite_l) (nat)) (((plus) (a)) (c))) (\lambda Joker_ : nat. (((eq) (nat)) (a)) (((minus) (Joker_)) (c)))) (((minus_plus_m_m) (a)) (c))) (((plus) (c)) (a))) (((commutative_plus) (a)) (c))))) (((minus) (((plus) (c)) (a))) (((plus) (c)) (((minus) (b)) (c))))) ((((minus_plus) (((plus) (c)) (a))) (c)) (((minus) (b)) (c))))) (((plus) (((minus) (b)) (c))) (c))) (((commutative_plus) (((minus) (b)) (c))) (c)))) (((plus) (a)) (c))) (((commutative_plus) (a)) (c)))) (b)) ((((plus_minus_m_m) (b)) (c)) (H)).
definition minus_plus_plus_l : \forall x : nat. \forall y : nat. \forall h : nat. (((eq) (nat)) (((minus) (((plus) (x)) (h))) (((plus) (y)) (h)))) (((minus) (x)) (y)) := \lambda x : nat. \lambda y : nat. \lambda h : nat. ((((((rewrite_l) (nat)) (((minus) (((minus) (((plus) (x)) (h))) (y))) (h))) (\lambda Joker_ : nat. (((eq) (nat)) (Joker_)) (((minus) (x)) (y)))) (((((((rewrite_r) (nat)) (((minus) (x)) (y))) (\lambda Joker_ : nat. (((eq) (nat)) (Joker_)) (((minus) (x)) (y)))) (((refl) (nat)) (((minus) (x)) (y)))) (((minus) (((minus) (((plus) (x)) (h))) (y))) (h))) (((((((rewrite_r) (nat)) (((minus) (((plus) (x)) (h))) (h))) (\lambda Joker_ : nat. (((eq) (nat)) (((minus) (((minus) (((plus) (x)) (h))) (y))) (h))) (((minus) (Joker_)) (y)))) ((((minus_minus_comm) (((plus) (x)) (h))) (y)) (h))) (x)) (((minus_plus_m_m) (x)) (h))))) (((minus) (((plus) (x)) (h))) (((plus) (y)) (h)))) ((((minus_plus) (((plus) (x)) (h))) (y)) (h)).
axiom eqb : (nat) \to (nat) \to bool.
axiom eqb_body : (nat) \to (nat) \to bool.
axiom eq_eqb : \forall n : nat. (((leibniz) ((nat) \to bool)) ((eqb) (n))) ((((filter_nat_type) ((nat) \to bool)) (eqb_body)) (n)).
definition sym_eq_eqb : \forall n : nat. (((leibniz) ((nat) \to bool)) ((((filter_nat_type) ((nat) \to bool)) (eqb_body)) (n))) ((eqb) (n)) := \lambda n : nat. ((((sym_leibniz) ((nat) \to bool)) ((eqb) (n))) ((((filter_nat_type) ((nat) \to bool)) (eqb_body)) (n))) ((eq_eqb) (n)).
axiom eq_eqb_body_O : (((leibniz) ((nat) \to bool)) ((eqb_body) (O))) (\lambda m : nat. ((((match_nat_type) (bool)) (true)) (\lambda q : nat. false)) (m)).
definition sym_eq_eqb_body_O : (((leibniz) ((nat) \to bool)) (\lambda m : nat. ((((match_nat_type) (bool)) (true)) (\lambda q : nat. false)) (m))) ((eqb_body) (O)) := ((((sym_leibniz) ((nat) \to bool)) ((eqb_body) (O))) (\lambda m : nat. ((((match_nat_type) (bool)) (true)) (\lambda q : nat. false)) (m))) (eq_eqb_body_O).
axiom eq_eqb_body_S : \forall n : nat. (((leibniz) ((nat) \to bool)) ((eqb_body) ((S) (n)))) (\lambda m : nat. ((((match_nat_type) (bool)) (false)) (\lambda q : nat. ((eqb) (n)) (q))) (m)).
definition sym_eq_eqb_body_S : \forall n : nat. (((leibniz) ((nat) \to bool)) (\lambda m : nat. ((((match_nat_type) (bool)) (false)) (\lambda q : nat. ((eqb) (n)) (q))) (m))) ((eqb_body) ((S) (n))) := \lambda n : nat. ((((sym_leibniz) ((nat) \to bool)) ((eqb_body) ((S) (n)))) (\lambda m : nat. ((((match_nat_type) (bool)) (false)) (\lambda q : nat. ((eqb) (n)) (q))) (m))) ((eq_eqb_body_S) (n)).
definition eqb_elim : \forall n : nat. \forall m : nat. \forall P : (bool) \to Prop. (((((eq) (nat)) (n)) (m)) \to (P) (true)) \to (((Not) ((((eq) (nat)) (n)) (m))) \to (P) (false)) \to (P) (((eqb) (n)) (m)) := ((((nat_elim2) (\lambda Joker_ : nat. \lambda Joker0 : nat. \forall P : (bool) \to Prop. (((((eq) (nat)) (Joker_)) (Joker0)) \to (P) (true)) \to (((Not) ((((eq) (nat)) (Joker_)) (Joker0))) \to (P) (false)) \to (P) (((eqb) (Joker_)) (Joker0)))) (\lambda n : nat. ((((match_nat_prop) (\lambda Joker_ : nat. \forall P : (bool) \to Prop. (((((eq) (nat)) (O)) (Joker_)) \to (P) (true)) \to (((Not) ((((eq) (nat)) (O)) (Joker_))) \to (P) (false)) \to (P) (((eqb) (O)) (Joker_)))) ((((sym_eq_eqb) (O)) (\lambda y : (nat) \to bool. \forall P : (bool) \to Prop. (((((eq) (nat)) (O)) (O)) \to (P) (true)) \to (((Not) ((((eq) (nat)) (O)) (O))) \to (P) (false)) \to (P) ((y) (O)))) (((((sym_eq_filter_nat_type_O) ((nat) \to bool)) (eqb_body)) (\lambda y : (nat) \to bool. \forall P : (bool) \to Prop. (((((eq) (nat)) (O)) (O)) \to (P) (true)) \to (((Not) ((((eq) (nat)) (O)) (O))) \to (P) (false)) \to (P) ((y) (O)))) (((sym_eq_eqb_body_O) (\lambda y : (nat) \to bool. \forall P : (bool) \to Prop. (((((eq) (nat)) (O)) (O)) \to (P) (true)) \to (((Not) ((((eq) (nat)) (O)) (O))) \to (P) (false)) \to (P) ((y) (O)))) ((((((sym_eq_match_nat_type_O) (bool)) (true)) (\lambda q : nat. false)) (\lambda y : bool. \forall P : (bool) \to Prop. (((((eq) (nat)) (O)) (O)) \to (P) (true)) \to (((Not) ((((eq) (nat)) (O)) (O))) \to (P) (false)) \to (P) (y))) (\lambda P : (bool) \to Prop. \lambda auto : ((((eq) (nat)) (O)) (O)) \to (P) (true). \lambda auto' : ((Not) ((((eq) (nat)) (O)) (O))) \to (P) (false). (auto) (((refl) (nat)) (O)))))))) (\lambda auto : nat. (((sym_eq_eqb) (O)) (\lambda y : (nat) \to bool. \forall P : (bool) \to Prop. (((((eq) (nat)) (O)) ((S) (auto))) \to (P) (true)) \to (((Not) ((((eq) (nat)) (O)) ((S) (auto)))) \to (P) (false)) \to (P) ((y) ((S) (auto))))) (((((sym_eq_filter_nat_type_O) ((nat) \to bool)) (eqb_body)) (\lambda y : (nat) \to bool. \forall P : (bool) \to Prop. (((((eq) (nat)) (O)) ((S) (auto))) \to (P) (true)) \to (((Not) ((((eq) (nat)) (O)) ((S) (auto)))) \to (P) (false)) \to (P) ((y) ((S) (auto))))) (((sym_eq_eqb_body_O) (\lambda y : (nat) \to bool. \forall P : (bool) \to Prop. (((((eq) (nat)) (O)) ((S) (auto))) \to (P) (true)) \to (((Not) ((((eq) (nat)) (O)) ((S) (auto)))) \to (P) (false)) \to (P) ((y) ((S) (auto))))) (((((((sym_eq_match_nat_type_S) (bool)) (true)) (\lambda q : nat. false)) (auto)) (\lambda y : bool. \forall P : (bool) \to Prop. (((((eq) (nat)) (O)) ((S) (auto))) \to (P) (true)) \to (((Not) ((((eq) (nat)) (O)) ((S) (auto)))) \to (P) (false)) \to (P) (y))) (\lambda P : (bool) \to Prop. \lambda auto' : ((((eq) (nat)) (O)) ((S) (auto))) \to (P) (true). \lambda auto'' : ((Not) ((((eq) (nat)) (O)) ((S) (auto)))) \to (P) (false). (auto'') ((not_eq_O_S) (auto)))))))) (n))) (\lambda n : nat. (((sym_eq_eqb) ((S) (n))) (\lambda y : (nat) \to bool. \forall P : (bool) \to Prop. (((((eq) (nat)) ((S) (n))) (O)) \to (P) (true)) \to (((Not) ((((eq) (nat)) ((S) (n))) (O))) \to (P) (false)) \to (P) ((y) (O)))) ((((((sym_eq_filter_nat_type_S) ((nat) \to bool)) (eqb_body)) (n)) (\lambda y : (nat) \to bool. \forall P : (bool) \to Prop. (((((eq) (nat)) ((S) (n))) (O)) \to (P) (true)) \to (((Not) ((((eq) (nat)) ((S) (n))) (O))) \to (P) (false)) \to (P) ((y) (O)))) ((((sym_eq_eqb_body_S) (n)) (\lambda y : (nat) \to bool. \forall P : (bool) \to Prop. (((((eq) (nat)) ((S) (n))) (O)) \to (P) (true)) \to (((Not) ((((eq) (nat)) ((S) (n))) (O))) \to (P) (false)) \to (P) ((y) (O)))) ((((((sym_eq_match_nat_type_O) (bool)) (false)) (\lambda q : nat. ((eqb) (n)) (q))) (\lambda y : bool. \forall P : (bool) \to Prop. (((((eq) (nat)) ((S) (n))) (O)) \to (P) (true)) \to (((Not) ((((eq) (nat)) ((S) (n))) (O))) \to (P) (false)) \to (P) (y))) (\lambda P : (bool) \to Prop. \lambda auto : ((((eq) (nat)) ((S) (n))) (O)) \to (P) (true). \lambda auto' : ((Not) ((((eq) (nat)) ((S) (n))) (O))) \to (P) (false). (auto') (((((sym_not_eq) (nat)) (O)) ((S) (n))) ((not_eq_O_S) (n))))))))) (\lambda n : nat. \lambda m : nat. (((sym_eq_eqb) ((S) (n))) (\lambda y : (nat) \to bool. (\forall P : (bool) \to Prop. (((((eq) (nat)) (n)) (m)) \to (P) (true)) \to (((Not) ((((eq) (nat)) (n)) (m))) \to (P) (false)) \to (P) (((eqb) (n)) (m))) \to \forall P : (bool) \to Prop. (((((eq) (nat)) ((S) (n))) ((S) (m))) \to (P) (true)) \to (((Not) ((((eq) (nat)) ((S) (n))) ((S) (m)))) \to (P) (false)) \to (P) ((y) ((S) (m))))) ((((((sym_eq_filter_nat_type_S) ((nat) \to bool)) (eqb_body)) (n)) (\lambda y : (nat) \to bool. (\forall P : (bool) \to Prop. (((((eq) (nat)) (n)) (m)) \to (P) (true)) \to (((Not) ((((eq) (nat)) (n)) (m))) \to (P) (false)) \to (P) (((eqb) (n)) (m))) \to \forall P : (bool) \to Prop. (((((eq) (nat)) ((S) (n))) ((S) (m))) \to (P) (true)) \to (((Not) ((((eq) (nat)) ((S) (n))) ((S) (m)))) \to (P) (false)) \to (P) ((y) ((S) (m))))) ((((sym_eq_eqb_body_S) (n)) (\lambda y : (nat) \to bool. (\forall P : (bool) \to Prop. (((((eq) (nat)) (n)) (m)) \to (P) (true)) \to (((Not) ((((eq) (nat)) (n)) (m))) \to (P) (false)) \to (P) (((eqb) (n)) (m))) \to \forall P : (bool) \to Prop. (((((eq) (nat)) ((S) (n))) ((S) (m))) \to (P) (true)) \to (((Not) ((((eq) (nat)) ((S) (n))) ((S) (m)))) \to (P) (false)) \to (P) ((y) ((S) (m))))) (((((((sym_eq_match_nat_type_S) (bool)) (false)) (\lambda q : nat. ((eqb) (n)) (q))) (m)) (\lambda y : bool. (\forall P : (bool) \to Prop. (((((eq) (nat)) (n)) (m)) \to (P) (true)) \to (((Not) ((((eq) (nat)) (n)) (m))) \to (P) (false)) \to (P) (((eqb) (n)) (m))) \to \forall P : (bool) \to Prop. (((((eq) (nat)) ((S) (n))) ((S) (m))) \to (P) (true)) \to (((Not) ((((eq) (nat)) ((S) (n))) ((S) (m)))) \to (P) (false)) \to (P) (y))) (\lambda auto : \forall P : (bool) \to Prop. (((((eq) (nat)) (n)) (m)) \to (P) (true)) \to (((Not) ((((eq) (nat)) (n)) (m))) \to (P) (false)) \to (P) (((eqb) (n)) (m)). \lambda P : (bool) \to Prop. \lambda auto' : ((((eq) (nat)) ((S) (n))) ((S) (m))) \to (P) (true). \lambda auto'' : ((Not) ((((eq) (nat)) ((S) (n))) ((S) (m)))) \to (P) (false). (((auto) (P)) (\lambda auto''' : (((eq) (nat)) (n)) (m). (auto') (((((((rewrite_l) (nat)) (n)) (\lambda Joker_ : nat. (((eq) (nat)) ((S) (n))) ((S) (Joker_)))) (((refl) (nat)) ((S) (n)))) (m)) (auto''')))) (\lambda auto''' : (Not) ((((eq) (nat)) (n)) (m)). (auto'') ((((not_eq_S) (n)) (m)) (auto''')))))))).
definition eqb_n_n : \forall n : nat. (((eq) (bool)) (((eqb) (n)) (n))) (true) := \lambda n : nat. ((((nat_ind) (\lambda Jokerx_365 : nat. (((eq) (bool)) (((eqb) (Jokerx_365)) (Jokerx_365))) (true))) ((((sym_eq_eqb) (O)) (\lambda y : (nat) \to bool. (((eq) (bool)) ((y) (O))) (true))) (((((sym_eq_filter_nat_type_O) ((nat) \to bool)) (eqb_body)) (\lambda y : (nat) \to bool. (((eq) (bool)) ((y) (O))) (true))) (((sym_eq_eqb_body_O) (\lambda y : (nat) \to bool. (((eq) (bool)) ((y) (O))) (true))) ((((((sym_eq_match_nat_type_O) (bool)) (true)) (\lambda q : nat. false)) (\lambda y : bool. (((eq) (bool)) (y)) (true))) (((refl) (bool)) (true))))))) (\lambda x_366 : nat. (((sym_eq_eqb) ((S) (x_366))) (\lambda y : (nat) \to bool. ((((eq) (bool)) (((eqb) (x_366)) (x_366))) (true)) \to (((eq) (bool)) ((y) ((S) (x_366)))) (true))) ((((((sym_eq_filter_nat_type_S) ((nat) \to bool)) (eqb_body)) (x_366)) (\lambda y : (nat) \to bool. ((((eq) (bool)) (((eqb) (x_366)) (x_366))) (true)) \to (((eq) (bool)) ((y) ((S) (x_366)))) (true))) ((((sym_eq_eqb_body_S) (x_366)) (\lambda y : (nat) \to bool. ((((eq) (bool)) (((eqb) (x_366)) (x_366))) (true)) \to (((eq) (bool)) ((y) ((S) (x_366)))) (true))) (((((((sym_eq_match_nat_type_S) (bool)) (false)) (\lambda q : nat. ((eqb) (x_366)) (q))) (x_366)) (\lambda y : bool. ((((eq) (bool)) (((eqb) (x_366)) (x_366))) (true)) \to (((eq) (bool)) (y)) (true))) (\lambda Jokerx_368 : (((eq) (bool)) (((eqb) (x_366)) (x_366))) (true). ((((((rewrite_r) (bool)) (true)) (\lambda Joker_ : bool. (((eq) (bool)) (Joker_)) (true))) (((refl) (bool)) (true))) (((eqb) (x_366)) (x_366))) (Jokerx_368))))))) (n).
definition eqb_true_to_eq : \forall n : nat. \forall m : nat. ((((eq) (bool)) (((eqb) (n)) (m))) (true)) \to (((eq) (nat)) (n)) (m) := \lambda n : nat. \lambda m : nat. (((((eqb_elim) (n)) (m)) (\lambda Joker_ : bool. ((((eq) (bool)) (Joker_)) (true)) \to (((eq) (nat)) (n)) (m))) (\lambda auto : (((eq) (nat)) (n)) (m). \lambda auto' : (((eq) (bool)) (true)) (true). ((((((rewrite_l) (nat)) (n)) (\lambda Joker_ : nat. (((eq) (nat)) (n)) (Joker_))) (((refl) (nat)) (n))) (m)) (auto))) (\lambda Joker_ : (Not) ((((eq) (nat)) (n)) (m)). \lambda abs : (((eq) (bool)) (false)) (true). ((falsity) ((((eq) (nat)) (n)) (m))) ((((absurd) ((((eq) (bool)) (true)) (false))) (((((((rewrite_r) (bool)) (true)) (\lambda Joker_1 : bool. (((eq) (bool)) (true)) (Joker_1))) (((refl) (bool)) (true))) (false)) (abs))) (not_eq_true_false))).
definition eqb_false_to_not_eq : \forall n : nat. \forall m : nat. ((((eq) (bool)) (((eqb) (n)) (m))) (false)) \to (Not) ((((eq) (nat)) (n)) (m)) := \lambda n : nat. \lambda m : nat. (((((eqb_elim) (n)) (m)) (\lambda Joker_ : bool. ((((eq) (bool)) (Joker_)) (false)) \to (Not) ((((eq) (nat)) (n)) (m)))) (\lambda auto : (((eq) (nat)) (n)) (m). \lambda auto' : (((eq) (bool)) (true)) (false). ((((not_to_not) ((((eq) (nat)) (n)) (m))) ((((eq) (bool)) (true)) (false))) (\lambda auto'' : (((eq) (nat)) (n)) (m). ((((((rewrite_l) (bool)) (true)) (\lambda Joker_ : bool. (((eq) (bool)) (true)) (Joker_))) (((refl) (bool)) (true))) (false)) (auto'))) (not_eq_true_false))) (\lambda auto : (Not) ((((eq) (nat)) (n)) (m)). \lambda auto' : (((eq) (bool)) (false)) (false). auto).
definition eq_to_eqb_true : \forall n : nat. \forall m : nat. ((((eq) (nat)) (n)) (m)) \to (((eq) (bool)) (((eqb) (n)) (m))) (true) := \lambda n : nat. \lambda m : nat. \lambda auto : (((eq) (nat)) (n)) (m). ((((((rewrite_l) (nat)) (n)) (\lambda Joker_ : nat. (((eq) (bool)) (((eqb) (n)) (Joker_))) (true))) (((((((rewrite_r) (bool)) (true)) (\lambda Joker_ : bool. (((eq) (bool)) (Joker_)) (true))) (((refl) (bool)) (true))) (((eqb) (n)) (n))) ((eqb_n_n) (n)))) (m)) (auto).
definition not_eq_to_eqb_false : \forall n : nat. \forall m : nat. ((Not) ((((eq) (nat)) (n)) (m))) \to (((eq) (bool)) (((eqb) (n)) (m))) (false) := \lambda n : nat. \lambda m : nat. \lambda noteq : (Not) ((((eq) (nat)) (n)) (m)). (((((eqb_elim) (n)) (m)) (\lambda Joker_ : bool. (((eq) (bool)) (Joker_)) (false))) (\lambda Heq : (((eq) (nat)) (n)) (m). ((falsity) ((((eq) (bool)) (true)) (false))) ((((absurd) ((((eq) (nat)) (n)) (m))) (((((((rewrite_l) (nat)) (n)) (\lambda Joker_ : nat. (((eq) (nat)) (n)) (Joker_))) (((refl) (nat)) (n))) (m)) (Heq))) (noteq)))) (\lambda auto : (Not) ((((eq) (nat)) (n)) (m)). ((refl) (bool)) (false)).
axiom leb : (nat) \to (nat) \to bool.
axiom leb_body : (nat) \to (nat) \to bool.
axiom eq_leb : \forall n : nat. (((leibniz) ((nat) \to bool)) ((leb) (n))) ((((filter_nat_type) ((nat) \to bool)) (leb_body)) (n)).
definition sym_eq_leb : \forall n : nat. (((leibniz) ((nat) \to bool)) ((((filter_nat_type) ((nat) \to bool)) (leb_body)) (n))) ((leb) (n)) := \lambda n : nat. ((((sym_leibniz) ((nat) \to bool)) ((leb) (n))) ((((filter_nat_type) ((nat) \to bool)) (leb_body)) (n))) ((eq_leb) (n)).
axiom eq_leb_body_O : (((leibniz) ((nat) \to bool)) ((leb_body) (O))) (\lambda m : nat. true).
definition sym_eq_leb_body_O : (((leibniz) ((nat) \to bool)) (\lambda m : nat. true)) ((leb_body) (O)) := ((((sym_leibniz) ((nat) \to bool)) ((leb_body) (O))) (\lambda m : nat. true)) (eq_leb_body_O).
axiom eq_leb_body_S : \forall n : nat. (((leibniz) ((nat) \to bool)) ((leb_body) ((S) (n)))) (\lambda m : nat. ((((match_nat_type) (bool)) (false)) (\lambda q : nat. ((leb) (n)) (q))) (m)).
definition sym_eq_leb_body_S : \forall n : nat. (((leibniz) ((nat) \to bool)) (\lambda m : nat. ((((match_nat_type) (bool)) (false)) (\lambda q : nat. ((leb) (n)) (q))) (m))) ((leb_body) ((S) (n))) := \lambda n : nat. ((((sym_leibniz) ((nat) \to bool)) ((leb_body) ((S) (n)))) (\lambda m : nat. ((((match_nat_type) (bool)) (false)) (\lambda q : nat. ((leb) (n)) (q))) (m))) ((eq_leb_body_S) (n)).
definition leb_elim : \forall n : nat. \forall m : nat. \forall P : (bool) \to Prop. ((((le) (n)) (m)) \to (P) (true)) \to (((Not) (((le) (n)) (m))) \to (P) (false)) \to (P) (((leb) (n)) (m)) := ((((nat_elim2) (\lambda Joker_ : nat. \lambda Joker0 : nat. \forall P : (bool) \to Prop. ((((le) (Joker_)) (Joker0)) \to (P) (true)) \to (((Not) (((le) (Joker_)) (Joker0))) \to (P) (false)) \to (P) (((leb) (Joker_)) (Joker0)))) (\lambda n : nat. (((sym_eq_leb) (O)) (\lambda y : (nat) \to bool. \forall P : (bool) \to Prop. ((((le) (O)) (n)) \to (P) (true)) \to (((Not) (((le) (O)) (n))) \to (P) (false)) \to (P) ((y) (n)))) (((((sym_eq_filter_nat_type_O) ((nat) \to bool)) (leb_body)) (\lambda y : (nat) \to bool. \forall P : (bool) \to Prop. ((((le) (O)) (n)) \to (P) (true)) \to (((Not) (((le) (O)) (n))) \to (P) (false)) \to (P) ((y) (n)))) (((sym_eq_leb_body_O) (\lambda y : (nat) \to bool. \forall P : (bool) \to Prop. ((((le) (O)) (n)) \to (P) (true)) \to (((Not) (((le) (O)) (n))) \to (P) (false)) \to (P) ((y) (n)))) (\lambda P : (bool) \to Prop. \lambda auto : (((le) (O)) (n)) \to (P) (true). \lambda auto' : ((Not) (((le) (O)) (n))) \to (P) (false). (auto) ((le_O_n) (n))))))) (\lambda n : nat. (((sym_eq_leb) ((S) (n))) (\lambda y : (nat) \to bool. \forall P : (bool) \to Prop. ((((le) ((S) (n))) (O)) \to (P) (true)) \to (((Not) (((le) ((S) (n))) (O))) \to (P) (false)) \to (P) ((y) (O)))) ((((((sym_eq_filter_nat_type_S) ((nat) \to bool)) (leb_body)) (n)) (\lambda y : (nat) \to bool. \forall P : (bool) \to Prop. ((((le) ((S) (n))) (O)) \to (P) (true)) \to (((Not) (((le) ((S) (n))) (O))) \to (P) (false)) \to (P) ((y) (O)))) ((((sym_eq_leb_body_S) (n)) (\lambda y : (nat) \to bool. \forall P : (bool) \to Prop. ((((le) ((S) (n))) (O)) \to (P) (true)) \to (((Not) (((le) ((S) (n))) (O))) \to (P) (false)) \to (P) ((y) (O)))) ((((((sym_eq_match_nat_type_O) (bool)) (false)) (\lambda q : nat. ((leb) (n)) (q))) (\lambda y : bool. \forall P : (bool) \to Prop. ((((le) ((S) (n))) (O)) \to (P) (true)) \to (((Not) (((le) ((S) (n))) (O))) \to (P) (false)) \to (P) (y))) (\lambda P : (bool) \to Prop. \lambda auto : (((le) ((S) (n))) (O)) \to (P) (true). \lambda auto' : ((Not) (((le) ((S) (n))) (O))) \to (P) (false). (auto') ((not_le_Sn_O) (n)))))))) (\lambda n : nat. \lambda m : nat. (((sym_eq_leb) ((S) (n))) (\lambda y : (nat) \to bool. (\forall P : (bool) \to Prop. ((((le) (n)) (m)) \to (P) (true)) \to (((Not) (((le) (n)) (m))) \to (P) (false)) \to (P) (((leb) (n)) (m))) \to \forall P : (bool) \to Prop. ((((le) ((S) (n))) ((S) (m))) \to (P) (true)) \to (((Not) (((le) ((S) (n))) ((S) (m)))) \to (P) (false)) \to (P) ((y) ((S) (m))))) ((((((sym_eq_filter_nat_type_S) ((nat) \to bool)) (leb_body)) (n)) (\lambda y : (nat) \to bool. (\forall P : (bool) \to Prop. ((((le) (n)) (m)) \to (P) (true)) \to (((Not) (((le) (n)) (m))) \to (P) (false)) \to (P) (((leb) (n)) (m))) \to \forall P : (bool) \to Prop. ((((le) ((S) (n))) ((S) (m))) \to (P) (true)) \to (((Not) (((le) ((S) (n))) ((S) (m)))) \to (P) (false)) \to (P) ((y) ((S) (m))))) ((((sym_eq_leb_body_S) (n)) (\lambda y : (nat) \to bool. (\forall P : (bool) \to Prop. ((((le) (n)) (m)) \to (P) (true)) \to (((Not) (((le) (n)) (m))) \to (P) (false)) \to (P) (((leb) (n)) (m))) \to \forall P : (bool) \to Prop. ((((le) ((S) (n))) ((S) (m))) \to (P) (true)) \to (((Not) (((le) ((S) (n))) ((S) (m)))) \to (P) (false)) \to (P) ((y) ((S) (m))))) (((((((sym_eq_match_nat_type_S) (bool)) (false)) (\lambda q : nat. ((leb) (n)) (q))) (m)) (\lambda y : bool. (\forall P : (bool) \to Prop. ((((le) (n)) (m)) \to (P) (true)) \to (((Not) (((le) (n)) (m))) \to (P) (false)) \to (P) (((leb) (n)) (m))) \to \forall P : (bool) \to Prop. ((((le) ((S) (n))) ((S) (m))) \to (P) (true)) \to (((Not) (((le) ((S) (n))) ((S) (m)))) \to (P) (false)) \to (P) (y))) (\lambda Hind : \forall P : (bool) \to Prop. ((((le) (n)) (m)) \to (P) (true)) \to (((Not) (((le) (n)) (m))) \to (P) (false)) \to (P) (((leb) (n)) (m)). \lambda P : (bool) \to Prop. \lambda Pt : (((le) ((S) (n))) ((S) (m))) \to (P) (true). \lambda Pf : ((Not) (((le) ((S) (n))) ((S) (m)))) \to (P) (false). (((Hind) (P)) (\lambda lenm : ((le) (n)) (m). (Pt) ((((le_S_S) (n)) (m)) (lenm)))) (\lambda nlenm : (Not) (((le) (n)) (m)). (Pf) ((((not_le_to_not_le_S_S) (n)) (m)) (nlenm)))))))).
definition leb_true_to_le : \forall n : nat. \forall m : nat. ((((eq) (bool)) (((leb) (n)) (m))) (true)) \to ((le) (n)) (m) := \lambda n : nat. \lambda m : nat. (((((leb_elim) (n)) (m)) (\lambda Joker_ : bool. ((((eq) (bool)) (Joker_)) (true)) \to ((le) (n)) (m))) (\lambda auto : ((le) (n)) (m). \lambda auto' : (((eq) (bool)) (true)) (true). auto)) (\lambda Joker_ : (Not) (((le) (n)) (m)). \lambda abs : (((eq) (bool)) (false)) (true). ((falsity) (((le) (n)) (m))) ((((absurd) ((((eq) (bool)) (true)) (false))) (((((((rewrite_r) (bool)) (true)) (\lambda Joker_1 : bool. (((eq) (bool)) (true)) (Joker_1))) (((refl) (bool)) (true))) (false)) (abs))) (not_eq_true_false))).
definition le_to_leb_true : \forall n : nat. \forall m : nat. (((le) (n)) (m)) \to (((eq) (bool)) (((leb) (n)) (m))) (true) := \lambda n : nat. \lambda m : nat. (((((leb_elim) (n)) (m)) (\lambda Joker_ : bool. (((le) (n)) (m)) \to (((eq) (bool)) (Joker_)) (true))) (\lambda auto : ((le) (n)) (m). \lambda auto' : ((le) (n)) (m). ((refl) (bool)) (true))) (\lambda H : (Not) (((le) (n)) (m)). \lambda H1 : ((le) (n)) (m). ((falsity) ((((eq) (bool)) (false)) (true))) ((((absurd) (((le) (n)) (m))) (H1)) (H))).
definition not_le_to_leb_false : \forall n : nat. \forall m : nat. ((Not) (((le) (n)) (m))) \to (((eq) (bool)) (((leb) (n)) (m))) (false) := \lambda n : nat. \lambda m : nat. (((((leb_elim) (n)) (m)) (\lambda Joker_ : bool. ((Not) (((le) (n)) (m))) \to (((eq) (bool)) (Joker_)) (false))) (\lambda H : ((le) (n)) (m). \lambda H1 : (Not) (((le) (n)) (m)). ((falsity) ((((eq) (bool)) (true)) (false))) ((((absurd) (((le) (n)) (m))) (H)) (H1)))) (\lambda auto : (Not) (((le) (n)) (m)). \lambda auto' : (Not) (((le) (n)) (m)). ((refl) (bool)) (false)).
axiom mod_aux : (nat) \to (nat) \to (nat) \to nat.
axiom mod_aux_body : (nat) \to (nat) \to (nat) \to nat.
axiom eq_mod_aux : \forall p : nat. (((leibniz) ((nat) \to (nat) \to nat)) ((mod_aux) (p))) ((((filter_nat_type) ((nat) \to (nat) \to nat)) (mod_aux_body)) (p)).
definition sym_eq_mod_aux : \forall p : nat. (((leibniz) ((nat) \to (nat) \to nat)) ((((filter_nat_type) ((nat) \to (nat) \to nat)) (mod_aux_body)) (p))) ((mod_aux) (p)) := \lambda p : nat. ((((sym_leibniz) ((nat) \to (nat) \to nat)) ((mod_aux) (p))) ((((filter_nat_type) ((nat) \to (nat) \to nat)) (mod_aux_body)) (p))) ((eq_mod_aux) (p)).
axiom eq_mod_aux_body_O : (((leibniz) ((nat) \to (nat) \to nat)) ((mod_aux_body) (O))) (\lambda m : nat. \lambda n : nat. m).
definition sym_eq_mod_aux_body_O : (((leibniz) ((nat) \to (nat) \to nat)) (\lambda m : nat. \lambda n : nat. m)) ((mod_aux_body) (O)) := ((((sym_leibniz) ((nat) \to (nat) \to nat)) ((mod_aux_body) (O))) (\lambda m : nat. \lambda n : nat. m)) (eq_mod_aux_body_O).
axiom eq_mod_aux_body_S : \forall p : nat. (((leibniz) ((nat) \to (nat) \to nat)) ((mod_aux_body) ((S) (p)))) (\lambda m : nat. \lambda n : nat. ((((match_bool_type) (nat)) (m)) ((((mod_aux) (p)) (((minus) (m)) ((S) (n)))) (n))) (((leb) (m)) (n))).
definition sym_eq_mod_aux_body_S : \forall p : nat. (((leibniz) ((nat) \to (nat) \to nat)) (\lambda m : nat. \lambda n : nat. ((((match_bool_type) (nat)) (m)) ((((mod_aux) (p)) (((minus) (m)) ((S) (n)))) (n))) (((leb) (m)) (n)))) ((mod_aux_body) ((S) (p))) := \lambda p : nat. ((((sym_leibniz) ((nat) \to (nat) \to nat)) ((mod_aux_body) ((S) (p)))) (\lambda m : nat. \lambda n : nat. ((((match_bool_type) (nat)) (m)) ((((mod_aux) (p)) (((minus) (m)) ((S) (n)))) (n))) (((leb) (m)) (n)))) ((eq_mod_aux_body_S) (p)).
definition mod : (nat) \to (nat) \to nat := \lambda n : nat. \lambda m : nat. ((((match_nat_type) (nat)) (n)) (\lambda p : nat. (((mod_aux) (n)) (n)) (p))) (m).
axiom div_aux : (nat) \to (nat) \to (nat) \to nat.
axiom div_aux_body : (nat) \to (nat) \to (nat) \to nat.
axiom eq_div_aux : \forall p : nat. (((leibniz) ((nat) \to (nat) \to nat)) ((div_aux) (p))) ((((filter_nat_type) ((nat) \to (nat) \to nat)) (div_aux_body)) (p)).
definition sym_eq_div_aux : \forall p : nat. (((leibniz) ((nat) \to (nat) \to nat)) ((((filter_nat_type) ((nat) \to (nat) \to nat)) (div_aux_body)) (p))) ((div_aux) (p)) := \lambda p : nat. ((((sym_leibniz) ((nat) \to (nat) \to nat)) ((div_aux) (p))) ((((filter_nat_type) ((nat) \to (nat) \to nat)) (div_aux_body)) (p))) ((eq_div_aux) (p)).
axiom eq_div_aux_body_O : (((leibniz) ((nat) \to (nat) \to nat)) ((div_aux_body) (O))) (\lambda m : nat. \lambda n : nat. O).
definition sym_eq_div_aux_body_O : (((leibniz) ((nat) \to (nat) \to nat)) (\lambda m : nat. \lambda n : nat. O)) ((div_aux_body) (O)) := ((((sym_leibniz) ((nat) \to (nat) \to nat)) ((div_aux_body) (O))) (\lambda m : nat. \lambda n : nat. O)) (eq_div_aux_body_O).
axiom eq_div_aux_body_S : \forall p : nat. (((leibniz) ((nat) \to (nat) \to nat)) ((div_aux_body) ((S) (p)))) (\lambda m : nat. \lambda n : nat. ((((match_bool_type) (nat)) (O)) ((S) ((((div_aux) (p)) (((minus) (m)) ((S) (n)))) (n)))) (((leb) (m)) (n))).
definition sym_eq_div_aux_body_S : \forall p : nat. (((leibniz) ((nat) \to (nat) \to nat)) (\lambda m : nat. \lambda n : nat. ((((match_bool_type) (nat)) (O)) ((S) ((((div_aux) (p)) (((minus) (m)) ((S) (n)))) (n)))) (((leb) (m)) (n)))) ((div_aux_body) ((S) (p))) := \lambda p : nat. ((((sym_leibniz) ((nat) \to (nat) \to nat)) ((div_aux_body) ((S) (p)))) (\lambda m : nat. \lambda n : nat. ((((match_bool_type) (nat)) (O)) ((S) ((((div_aux) (p)) (((minus) (m)) ((S) (n)))) (n)))) (((leb) (m)) (n)))) ((eq_div_aux_body_S) (p)).
definition div : (nat) \to (nat) \to nat := \lambda n : nat. \lambda m : nat. ((((match_nat_type) (nat)) ((S) (n))) (\lambda p : nat. (((div_aux) (n)) (n)) (p))) (m).
definition le_mod_aux_m_m : \forall p : nat. \forall n : nat. \forall m : nat. (((le) (n)) (p)) \to ((le) ((((mod_aux) (p)) (n)) (m))) (m) := \lambda p : nat. ((((nat_ind) (\lambda Jokerx_365 : nat. \forall n : nat. \forall m : nat. (((le) (n)) (Jokerx_365)) \to ((le) ((((mod_aux) (Jokerx_365)) (n)) (m))) (m))) (\lambda n : nat. \lambda m : nat. (((sym_eq_mod_aux) (O)) (\lambda y : (nat) \to (nat) \to nat. (((le) (n)) (O)) \to ((le) (((y) (n)) (m))) (m))) (((((sym_eq_filter_nat_type_O) ((nat) \to (nat) \to nat)) (mod_aux_body)) (\lambda y : (nat) \to (nat) \to nat. (((le) (n)) (O)) \to ((le) (((y) (n)) (m))) (m))) (((sym_eq_mod_aux_body_O) (\lambda y : (nat) \to (nat) \to nat. (((le) (n)) (O)) \to ((le) (((y) (n)) (m))) (m))) (\lambda lenO : ((le) (n)) (O). ((((le_n_O_elim) (n)) (lenO)) (\lambda Joker_ : nat. ((le) (Joker_)) (m))) ((le_O_n) (m))))))) (\lambda q : nat. (((sym_eq_mod_aux) ((S) (q))) (\lambda y : (nat) \to (nat) \to nat. (\forall n : nat. \forall m : nat. (((le) (n)) (q)) \to ((le) ((((mod_aux) (q)) (n)) (m))) (m)) \to \forall n : nat. \forall m : nat. (((le) (n)) ((S) (q))) \to ((le) (((y) (n)) (m))) (m))) ((((((sym_eq_filter_nat_type_S) ((nat) \to (nat) \to nat)) (mod_aux_body)) (q)) (\lambda y : (nat) \to (nat) \to nat. (\forall n : nat. \forall m : nat. (((le) (n)) (q)) \to ((le) ((((mod_aux) (q)) (n)) (m))) (m)) \to \forall n : nat. \forall m : nat. (((le) (n)) ((S) (q))) \to ((le) (((y) (n)) (m))) (m))) ((((sym_eq_mod_aux_body_S) (q)) (\lambda y : (nat) \to (nat) \to nat. (\forall n : nat. \forall m : nat. (((le) (n)) (q)) \to ((le) ((((mod_aux) (q)) (n)) (m))) (m)) \to \forall n : nat. \forall m : nat. (((le) (n)) ((S) (q))) \to ((le) (((y) (n)) (m))) (m))) (\lambda Hind : \forall n : nat. \forall m : nat. (((le) (n)) (q)) \to ((le) ((((mod_aux) (q)) (n)) (m))) (m). \lambda n : nat. \lambda m : nat. \lambda len : ((le) (n)) ((S) (q)). (((((leb_elim) (n)) (m)) (\lambda Joker_ : bool. ((le) (((((match_bool_type) (nat)) (n)) ((((mod_aux) (q)) (((minus) (n)) ((S) (m)))) (m))) (Joker_))) (m))) ((((((sym_eq_match_bool_type_true) (nat)) (n)) ((((mod_aux) (q)) (((minus) (n)) ((S) (m)))) (m))) (\lambda y : nat. (((le) (n)) (m)) \to ((le) (y)) (m))) (\lambda auto : ((le) (n)) (m). auto))) ((((((sym_eq_match_bool_type_false) (nat)) (n)) ((((mod_aux) (q)) (((minus) (n)) ((S) (m)))) (m))) (\lambda y : nat. ((Not) (((le) (n)) (m))) \to ((le) (y)) (m))) (\lambda notlenm : (Not) (((le) (n)) (m)). (((Hind) (((minus) (n)) ((S) (m)))) (m)) (((((le_plus_to_minus) (n)) ((S) (m))) (q)) ((((((transitive_le) (n)) ((S) (q))) (((plus) (q)) ((S) (m)))) (len)) (((((eq_coerc) (((le) ((S) (q))) (((plus) ((S) (q))) (m)))) (((le) ((S) (q))) (((plus) (q)) ((S) (m))))) (((le_plus_n_r) (m)) ((S) (q)))) (((((((rewrite_l) (nat)) (((plus) (m)) ((S) (q)))) (\lambda Joker_ : nat. (((eq) Prop) (((le) ((S) (q))) (Joker_))) (((le) ((S) (q))) (((plus) (q)) ((S) (m)))))) (((((((rewrite_r) (nat)) (((plus) (q)) ((S) (m)))) (\lambda Joker_ : nat. (((eq) Prop) (((le) ((S) (q))) (Joker_))) (((le) ((S) (q))) (((plus) (q)) ((S) (m)))))) (((refl) Prop) (((le) ((S) (q))) (((plus) (q)) ((S) (m)))))) (((plus) (m)) ((S) (q)))) (((((((rewrite_l) (nat)) ((S) (((plus) (m)) (q)))) (\lambda Joker_ : nat. (((eq) (nat)) (Joker_)) (((plus) (q)) ((S) (m))))) (((((((rewrite_l) (nat)) (((plus) (q)) (m))) (\lambda Joker_ : nat. (((eq) (nat)) ((S) (Joker_))) (((plus) (q)) ((S) (m))))) (((plus_n_Sm) (q)) (m))) (((plus) (m)) (q))) (((commutative_plus) (q)) (m)))) (((plus) (m)) ((S) (q)))) (((plus_n_Sm) (m)) (q))))) (((plus) ((S) (q))) (m))) (((commutative_plus) (m)) ((S) (q)))))))))))))) (p).
definition lt_mod_m_m : \forall n : nat. \forall m : nat. (((lt) (O)) (m)) \to ((lt) (((mod) (n)) (m))) (m) := \lambda n : nat. \lambda m : nat. ((((match_nat_prop) (\lambda Joker_ : nat. (((lt) (O)) (Joker_)) \to ((lt) (((mod) (n)) (Joker_))) (Joker_))) (\lambda abs : ((lt) (O)) (O). ((falsity) (((lt) (((mod) (n)) (O))) (O))) ((((absurd) (((le) ((S) (O))) (O))) (abs)) ((not_le_Sn_O) (O))))) (\lambda p : nat. ((((((sym_eq_match_nat_type_S) (nat)) (n)) (\lambda q : nat. (((mod_aux) (n)) (n)) (q))) (p)) (\lambda y : nat. (((lt) (O)) ((S) (p))) \to ((lt) (y)) ((S) (p)))) (\lambda Joker_ : ((lt) (O)) ((S) (p)). (((le_S_S) ((((mod_aux) (n)) (n)) (p))) (p)) (((((le_mod_aux_m_m) (n)) (n)) (p)) ((le_n) (n)))))) (m).
definition div_aux_mod_aux : \forall p : nat. \forall n : nat. \forall m : nat. (((eq) (nat)) (n)) (((plus) (((times) ((((div_aux) (p)) (n)) (m))) ((S) (m)))) ((((mod_aux) (p)) (n)) (m))) := \lambda p : nat. ((((nat_ind) (\lambda Jokerx_365 : nat. \forall n : nat. \forall m : nat. (((eq) (nat)) (n)) (((plus) (((times) ((((div_aux) (Jokerx_365)) (n)) (m))) ((S) (m)))) ((((mod_aux) (Jokerx_365)) (n)) (m))))) (\lambda n : nat. \lambda m : nat. (((sym_eq_div_aux) (O)) (\lambda y : (nat) \to (nat) \to nat. (((eq) (nat)) (n)) (((plus) (((times) (((y) (n)) (m))) ((S) (m)))) ((((mod_aux) (O)) (n)) (m))))) (((((sym_eq_filter_nat_type_O) ((nat) \to (nat) \to nat)) (div_aux_body)) (\lambda y : (nat) \to (nat) \to nat. (((eq) (nat)) (n)) (((plus) (((times) (((y) (n)) (m))) ((S) (m)))) ((((mod_aux) (O)) (n)) (m))))) (((sym_eq_div_aux_body_O) (\lambda y : (nat) \to (nat) \to nat. (((eq) (nat)) (n)) (((plus) (((times) (((y) (n)) (m))) ((S) (m)))) ((((mod_aux) (O)) (n)) (m))))) ((((((eq_match_nat_type_O) (nat)) (O)) (\lambda q : nat. ((((match_bool_type) (nat)) (O)) ((S) ((((div_aux) (q)) (((minus) (n)) ((S) (m)))) (m)))) (((leb) (n)) (m)))) (\lambda y : nat. (((eq) (nat)) (n)) (((plus) (((times) (y)) ((S) (m)))) ((((mod_aux) (O)) (n)) (m))))) ((((sym_eq_mod_aux) (O)) (\lambda y : (nat) \to (nat) \to nat. (((eq) (nat)) (n)) (((plus) (((times) (((\lambda m0 : nat. \lambda n0 : nat. ((((match_nat_type) (nat)) (O)) (\lambda q : nat. ((((match_bool_type) (nat)) (O)) ((S) ((((div_aux) (q)) (((minus) (m0)) ((S) (n0)))) (n0)))) (((leb) (m0)) (n0)))) (O)) (n)) (m))) ((S) (m)))) (((y) (n)) (m))))) (((((sym_eq_filter_nat_type_O) ((nat) \to (nat) \to nat)) (mod_aux_body)) (\lambda y : (nat) \to (nat) \to nat. (((eq) (nat)) (n)) (((plus) (((times) (((\lambda m0 : nat. \lambda n0 : nat. ((((match_nat_type) (nat)) (O)) (\lambda q : nat. ((((match_bool_type) (nat)) (O)) ((S) ((((div_aux) (q)) (((minus) (m0)) ((S) (n0)))) (n0)))) (((leb) (m0)) (n0)))) (O)) (n)) (m))) ((S) (m)))) (((y) (n)) (m))))) (((sym_eq_mod_aux_body_O) (\lambda y : (nat) \to (nat) \to nat. (((eq) (nat)) (n)) (((plus) (((times) (((\lambda m0 : nat. \lambda n0 : nat. ((((match_nat_type) (nat)) (O)) (\lambda q : nat. ((((match_bool_type) (nat)) (O)) ((S) ((((div_aux) (q)) (((minus) (m0)) ((S) (n0)))) (n0)))) (((leb) (m0)) (n0)))) (O)) (n)) (m))) ((S) (m)))) (((y) (n)) (m))))) ((((((sym_eq_match_nat_type_O) (nat)) (O)) (\lambda q : nat. ((((match_bool_type) (nat)) (O)) ((S) ((((div_aux) (q)) (((minus) (n)) ((S) (m)))) (m)))) (((leb) (n)) (m)))) (\lambda y : nat. (((eq) (nat)) (n)) (((plus) (((times) (((\lambda m0 : nat. \lambda n0 : nat. y) (n)) (m))) ((S) (m)))) (n)))) ((((sym_eq_times) (O)) (\lambda y : (nat) \to nat. (((eq) (nat)) (n)) (((plus) ((y) ((S) (m)))) (n)))) (((((sym_eq_filter_nat_type_O) ((nat) \to nat)) (times_body)) (\lambda y : (nat) \to nat. (((eq) (nat)) (n)) (((plus) ((y) ((S) (m)))) (n)))) (((sym_eq_times_body_O) (\lambda y : (nat) \to nat. (((eq) (nat)) (n)) (((plus) ((y) ((S) (m)))) (n)))) ((((sym_eq_plus) (O)) (\lambda y : (nat) \to nat. (((eq) (nat)) (n)) ((y) (n)))) (((((sym_eq_filter_nat_type_O) ((nat) \to nat)) (plus_body)) (\lambda y : (nat) \to nat. (((eq) (nat)) (n)) ((y) (n)))) (((sym_eq_plus_body_O) (\lambda y : (nat) \to nat. (((eq) (nat)) (n)) ((y) (n)))) (((refl) (nat)) (n))))))))))))))))) (\lambda q : nat. (((sym_eq_div_aux) ((S) (q))) (\lambda y : (nat) \to (nat) \to nat. (\forall n : nat. \forall m : nat. (((eq) (nat)) (n)) (((plus) (((times) ((((div_aux) (q)) (n)) (m))) ((S) (m)))) ((((mod_aux) (q)) (n)) (m)))) \to \forall n : nat. \forall m : nat. (((eq) (nat)) (n)) (((plus) (((times) (((y) (n)) (m))) ((S) (m)))) ((((mod_aux) ((S) (q))) (n)) (m))))) ((((((sym_eq_filter_nat_type_S) ((nat) \to (nat) \to nat)) (div_aux_body)) (q)) (\lambda y : (nat) \to (nat) \to nat. (\forall n : nat. \forall m : nat. (((eq) (nat)) (n)) (((plus) (((times) ((((div_aux) (q)) (n)) (m))) ((S) (m)))) ((((mod_aux) (q)) (n)) (m)))) \to \forall n : nat. \forall m : nat. (((eq) (nat)) (n)) (((plus) (((times) (((y) (n)) (m))) ((S) (m)))) ((((mod_aux) ((S) (q))) (n)) (m))))) ((((sym_eq_div_aux_body_S) (q)) (\lambda y : (nat) \to (nat) \to nat. (\forall n : nat. \forall m : nat. (((eq) (nat)) (n)) (((plus) (((times) ((((div_aux) (q)) (n)) (m))) ((S) (m)))) ((((mod_aux) (q)) (n)) (m)))) \to \forall n : nat. \forall m : nat. (((eq) (nat)) (n)) (((plus) (((times) (((y) (n)) (m))) ((S) (m)))) ((((mod_aux) ((S) (q))) (n)) (m))))) (\lambda Hind : \forall n : nat. \forall m : nat. (((eq) (nat)) (n)) (((plus) (((times) ((((div_aux) (q)) (n)) (m))) ((S) (m)))) ((((mod_aux) (q)) (n)) (m))). \lambda n : nat. \lambda m : nat. ((((((eq_match_nat_type_S) (nat)) (O)) (\lambda q0 : nat. ((((match_bool_type) (nat)) (O)) ((S) ((((div_aux) (q0)) (((minus) (n)) ((S) (m)))) (m)))) (((leb) (n)) (m)))) (q)) (\lambda y : nat. (((eq) (nat)) (n)) (((plus) (((times) (y)) ((S) (m)))) ((((mod_aux) ((S) (q))) (n)) (m))))) ((((sym_eq_mod_aux) ((S) (q))) (\lambda y : (nat) \to (nat) \to nat. (((eq) (nat)) (n)) (((plus) (((times) (((\lambda m0 : nat. \lambda n0 : nat. ((((match_nat_type) (nat)) (O)) (\lambda q0 : nat. ((((match_bool_type) (nat)) (O)) ((S) ((((div_aux) (q0)) (((minus) (m0)) ((S) (n0)))) (n0)))) (((leb) (m0)) (n0)))) ((S) (q))) (n)) (m))) ((S) (m)))) (((y) (n)) (m))))) ((((((sym_eq_filter_nat_type_S) ((nat) \to (nat) \to nat)) (mod_aux_body)) (q)) (\lambda y : (nat) \to (nat) \to nat. (((eq) (nat)) (n)) (((plus) (((times) (((\lambda m0 : nat. \lambda n0 : nat. ((((match_nat_type) (nat)) (O)) (\lambda q0 : nat. ((((match_bool_type) (nat)) (O)) ((S) ((((div_aux) (q0)) (((minus) (m0)) ((S) (n0)))) (n0)))) (((leb) (m0)) (n0)))) ((S) (q))) (n)) (m))) ((S) (m)))) (((y) (n)) (m))))) ((((sym_eq_mod_aux_body_S) (q)) (\lambda y : (nat) \to (nat) \to nat. (((eq) (nat)) (n)) (((plus) (((times) (((\lambda m0 : nat. \lambda n0 : nat. ((((match_nat_type) (nat)) (O)) (\lambda q0 : nat. ((((match_bool_type) (nat)) (O)) ((S) ((((div_aux) (q0)) (((minus) (m0)) ((S) (n0)))) (n0)))) (((leb) (m0)) (n0)))) ((S) (q))) (n)) (m))) ((S) (m)))) (((y) (n)) (m))))) (((((((sym_eq_match_nat_type_S) (nat)) (O)) (\lambda z : nat. ((((match_bool_type) (nat)) (O)) ((S) ((((div_aux) (z)) (((minus) (n)) ((S) (m)))) (m)))) (((leb) (n)) (m)))) (q)) (\lambda y : nat. (((eq) (nat)) (n)) (((plus) (((times) (y)) ((S) (m)))) (((((match_bool_type) (nat)) (n)) ((((mod_aux) (q)) (((minus) (n)) ((S) (m)))) (m))) (((leb) (n)) (m)))))) ((((((leb_elim) (n)) (m)) (\lambda Joker_ : bool. (((eq) (nat)) (n)) (((plus) (((times) (((((match_bool_type) (nat)) (O)) ((S) ((((div_aux) (q)) (((minus) (n)) ((S) (m)))) (m)))) (Joker_))) ((S) (m)))) (((((match_bool_type) (nat)) (n)) ((((mod_aux) (q)) (((minus) (n)) ((S) (m)))) (m))) (Joker_))))) ((((((sym_eq_match_bool_type_true) (nat)) (O)) ((S) ((((div_aux) (q)) (((minus) (n)) ((S) (m)))) (m)))) (\lambda x : nat. (((le) (n)) (m)) \to (((eq) (nat)) (n)) (((plus) (((times) (x)) ((S) (m)))) (((((match_bool_type) (nat)) (n)) ((((mod_aux) (q)) (((minus) (n)) ((S) (m)))) (m))) (true))))) ((((sym_eq_times) (O)) (\lambda y : (nat) \to nat. (((le) (n)) (m)) \to (((eq) (nat)) (n)) (((plus) ((y) ((S) (m)))) (((((match_bool_type) (nat)) (n)) ((((mod_aux) (q)) (((minus) (n)) ((S) (m)))) (m))) (true))))) (((((sym_eq_filter_nat_type_O) ((nat) \to nat)) (times_body)) (\lambda y : (nat) \to nat. (((le) (n)) (m)) \to (((eq) (nat)) (n)) (((plus) ((y) ((S) (m)))) (((((match_bool_type) (nat)) (n)) ((((mod_aux) (q)) (((minus) (n)) ((S) (m)))) (m))) (true))))) (((sym_eq_times_body_O) (\lambda y : (nat) \to nat. (((le) (n)) (m)) \to (((eq) (nat)) (n)) (((plus) ((y) ((S) (m)))) (((((match_bool_type) (nat)) (n)) ((((mod_aux) (q)) (((minus) (n)) ((S) (m)))) (m))) (true))))) ((((((sym_eq_match_bool_type_true) (nat)) (n)) ((((mod_aux) (q)) (((minus) (n)) ((S) (m)))) (m))) (\lambda y : nat. (((le) (n)) (m)) \to (((eq) (nat)) (n)) (((plus) (O)) (y)))) ((((sym_eq_plus) (O)) (\lambda y : (nat) \to nat. (((le) (n)) (m)) \to (((eq) (nat)) (n)) ((y) (n)))) (((((sym_eq_filter_nat_type_O) ((nat) \to nat)) (plus_body)) (\lambda y : (nat) \to nat. (((le) (n)) (m)) \to (((eq) (nat)) (n)) ((y) (n)))) (((sym_eq_plus_body_O) (\lambda y : (nat) \to nat. (((le) (n)) (m)) \to (((eq) (nat)) (n)) ((y) (n)))) (\lambda lenm : ((le) (n)) (m). ((refl) (nat)) (n))))))))))) ((((((sym_eq_match_bool_type_false) (nat)) (n)) ((((mod_aux) (q)) (((minus) (n)) ((S) (m)))) (m))) (\lambda x : nat. ((Not) (((le) (n)) (m))) \to (((eq) (nat)) (n)) (((plus) (((times) (((((match_bool_type) (nat)) (O)) ((S) ((((div_aux) (q)) (((minus) (n)) ((S) (m)))) (m)))) (false))) ((S) (m)))) (x)))) ((((((sym_eq_match_bool_type_false) (nat)) (O)) ((S) ((((div_aux) (q)) (((minus) (n)) ((S) (m)))) (m)))) (\lambda y : nat. ((Not) (((le) (n)) (m))) \to (((eq) (nat)) (n)) (((plus) (((times) (y)) ((S) (m)))) ((((mod_aux) (q)) (((minus) (n)) ((S) (m)))) (m))))) ((((sym_eq_times) ((S) ((((div_aux) (q)) (((minus) (n)) ((S) (m)))) (m)))) (\lambda y : (nat) \to nat. ((Not) (((le) (n)) (m))) \to (((eq) (nat)) (n)) (((plus) ((y) ((S) (m)))) ((((mod_aux) (q)) (((minus) (n)) ((S) (m)))) (m))))) ((((((sym_eq_filter_nat_type_S) ((nat) \to nat)) (times_body)) ((((div_aux) (q)) (((minus) (n)) ((S) (m)))) (m))) (\lambda y : (nat) \to nat. ((Not) (((le) (n)) (m))) \to (((eq) (nat)) (n)) (((plus) ((y) ((S) (m)))) ((((mod_aux) (q)) (((minus) (n)) ((S) (m)))) (m))))) ((((sym_eq_times_body_S) ((((div_aux) (q)) (((minus) (n)) ((S) (m)))) (m))) (\lambda y : (nat) \to nat. ((Not) (((le) (n)) (m))) \to (((eq) (nat)) (n)) (((plus) ((y) ((S) (m)))) ((((mod_aux) (q)) (((minus) (n)) ((S) (m)))) (m))))) ((((sym_eq_plus) ((S) (m))) (\lambda y : (nat) \to nat. ((Not) (((le) (n)) (m))) \to (((eq) (nat)) (n)) (((plus) ((y) (((times) ((((div_aux) (q)) (((minus) (n)) ((S) (m)))) (m))) ((S) (m))))) ((((mod_aux) (q)) (((minus) (n)) ((S) (m)))) (m))))) ((((((sym_eq_filter_nat_type_S) ((nat) \to nat)) (plus_body)) (m)) (\lambda y : (nat) \to nat. ((Not) (((le) (n)) (m))) \to (((eq) (nat)) (n)) (((plus) ((y) (((times) ((((div_aux) (q)) (((minus) (n)) ((S) (m)))) (m))) ((S) (m))))) ((((mod_aux) (q)) (((minus) (n)) ((S) (m)))) (m))))) ((((sym_eq_plus_body_S) (m)) (\lambda y : (nat) \to nat. ((Not) (((le) (n)) (m))) \to (((eq) (nat)) (n)) (((plus) ((y) (((times) ((((div_aux) (q)) (((minus) (n)) ((S) (m)))) (m))) ((S) (m))))) ((((mod_aux) (q)) (((minus) (n)) ((S) (m)))) (m))))) ((((sym_eq_plus) ((S) (((plus) (m)) (((times) ((((div_aux) (q)) (((minus) (n)) ((S) (m)))) (m))) ((S) (m)))))) (\lambda y : (nat) \to nat. ((Not) (((le) (n)) (m))) \to (((eq) (nat)) (n)) ((y) ((((mod_aux) (q)) (((minus) (n)) ((S) (m)))) (m))))) ((((((sym_eq_filter_nat_type_S) ((nat) \to nat)) (plus_body)) (((plus) (m)) (((times) ((((div_aux) (q)) (((minus) (n)) ((S) (m)))) (m))) ((S) (m))))) (\lambda y : (nat) \to nat. ((Not) (((le) (n)) (m))) \to (((eq) (nat)) (n)) ((y) ((((mod_aux) (q)) (((minus) (n)) ((S) (m)))) (m))))) ((((sym_eq_plus_body_S) (((plus) (m)) (((times) ((((div_aux) (q)) (((minus) (n)) ((S) (m)))) (m))) ((S) (m))))) (\lambda y : (nat) \to nat. ((Not) (((le) (n)) (m))) \to (((eq) (nat)) (n)) ((y) ((((mod_aux) (q)) (((minus) (n)) ((S) (m)))) (m))))) (\lambda lenm : (Not) (((le) (n)) (m)). ((((((eq_ind_r) (nat)) (((plus) (m)) (((plus) (((times) ((((div_aux) (q)) (((minus) (n)) ((S) (m)))) (m))) ((S) (m)))) ((((mod_aux) (q)) (((minus) (n)) ((S) (m)))) (m))))) (\lambda x : nat. (((eq) (nat)) (n)) ((S) (x)))) (((((((eq_ind) (nat)) (((minus) (n)) ((S) (m)))) (\lambda x_1 : nat. (((eq) (nat)) (n)) ((S) (((plus) (m)) (x_1))))) (((((eq_coerc) ((((eq) (nat)) (n)) (((plus) (((minus) (n)) ((S) (m)))) ((S) (m))))) ((((eq) (nat)) (n)) ((S) (((plus) (m)) (((minus) (n)) ((S) (m))))))) ((((plus_minus_m_m) (n)) ((S) (m))) ((((not_le_to_lt) (n)) (m)) (lenm)))) (((((((rewrite_r) (nat)) ((pred) (((minus) (n)) (m)))) (\lambda Joker_ : nat. (((eq) Prop) ((((eq) (nat)) (n)) (((plus) (Joker_)) ((S) (m))))) ((((eq) (nat)) (n)) ((S) (((plus) (m)) (((minus) (n)) ((S) (m)))))))) (((((((rewrite_r) (nat)) ((pred) (((minus) (n)) (m)))) (\lambda Joker_ : nat. (((eq) Prop) ((((eq) (nat)) (n)) (((plus) ((pred) (((minus) (n)) (m)))) ((S) (m))))) ((((eq) (nat)) (n)) ((S) (((plus) (m)) (Joker_)))))) (((((((rewrite_r) (nat)) (((plus) (m)) ((S) ((pred) (((minus) (n)) (m)))))) (\lambda Joker_ : nat. (((eq) Prop) ((((eq) (nat)) (n)) (((plus) ((pred) (((minus) (n)) (m)))) ((S) (m))))) ((((eq) (nat)) (n)) (Joker_)))) (((((((rewrite_r) (nat)) (((plus) (m)) ((S) ((pred) (((minus) (n)) (m)))))) (\lambda Joker_ : nat. (((eq) Prop) ((((eq) (nat)) (n)) (Joker_))) ((((eq) (nat)) (n)) (((plus) (m)) ((S) ((pred) (((minus) (n)) (m)))))))) (((refl) Prop) ((((eq) (nat)) (n)) (((plus) (m)) ((S) ((pred) (((minus) (n)) (m)))))))) (((plus) ((pred) (((minus) (n)) (m)))) ((S) (m)))) (((((((rewrite_l) (nat)) ((S) (((plus) ((pred) (((minus) (n)) (m)))) (m)))) (\lambda Joker_ : nat. (((eq) (nat)) (Joker_)) (((plus) (m)) ((S) ((pred) (((minus) (n)) (m))))))) (((((((rewrite_l) (nat)) (((plus) (m)) ((pred) (((minus) (n)) (m))))) (\lambda Joker_ : nat. (((eq) (nat)) ((S) (Joker_))) (((plus) (m)) ((S) ((pred) (((minus) (n)) (m))))))) (((plus_n_Sm) (m)) ((pred) (((minus) (n)) (m))))) (((plus) ((pred) (((minus) (n)) (m)))) (m))) (((commutative_plus) (m)) ((pred) (((minus) (n)) (m)))))) (((plus) ((pred) (((minus) (n)) (m)))) ((S) (m)))) (((plus_n_Sm) ((pred) (((minus) (n)) (m)))) (m))))) ((S) (((plus) (m)) ((pred) (((minus) (n)) (m)))))) (((plus_n_Sm) (m)) ((pred) (((minus) (n)) (m)))))) (((minus) (n)) ((S) (m)))) (((eq_minus_S_pred) (n)) (m)))) (((minus) (n)) ((S) (m)))) (((eq_minus_S_pred) (n)) (m))))) (((plus) (((times) ((((div_aux) (q)) (((minus) (n)) ((S) (m)))) (m))) ((S) (m)))) ((((mod_aux) (q)) (((minus) (n)) ((S) (m)))) (m)))) (((Hind) (((minus) (n)) ((S) (m)))) (m)))) (((plus) (((plus) (m)) (((times) ((((div_aux) (q)) (((minus) (n)) ((S) (m)))) (m))) ((S) (m))))) ((((mod_aux) (q)) (((minus) (n)) ((S) (m)))) (m)))) ((((associative_plus) (m)) (((times) ((((div_aux) (q)) (((minus) (n)) ((S) (m)))) (m))) ((S) (m)))) ((((mod_aux) (q)) (((minus) (n)) ((S) (m)))) (m))))))))))))))))))))))))) (p).
definition div_mod : \forall n : nat. \forall m : nat. (((eq) (nat)) (n)) (((plus) (((times) (((div) (n)) (m))) (m))) (((mod) (n)) (m))) := \lambda n : nat. \lambda m : nat. ((((match_nat_prop) (\lambda Joker_ : nat. (((eq) (nat)) (n)) (((plus) (((times) (((div) (n)) (Joker_))) (Joker_))) (((mod) (n)) (Joker_))))) ((((sym_eq_times) (((div) (n)) (O))) (\lambda y : (nat) \to nat. (((eq) (nat)) (n)) (((plus) ((y) (O))) (((mod) (n)) (O))))) ((((((sym_eq_match_nat_type_O) (nat)) ((S) (n))) (\lambda p : nat. (((div_aux) (n)) (n)) (p))) (\lambda y : nat. (((eq) (nat)) (n)) (((plus) (((((filter_nat_type) ((nat) \to nat)) (times_body)) (y)) (O))) (((((match_nat_type) (nat)) (n)) (\lambda p : nat. (((mod_aux) (n)) (n)) (p))) (O))))) ((((((sym_eq_filter_nat_type_S) ((nat) \to nat)) (times_body)) (n)) (\lambda y : (nat) \to nat. (((eq) (nat)) (n)) (((plus) ((y) (O))) (((mod) (n)) (O))))) ((((sym_eq_times_body_S) (n)) (\lambda y : (nat) \to nat. (((eq) (nat)) (n)) (((plus) ((y) (O))) (((mod) (n)) (O))))) ((((((sym_eq_match_nat_type_O) (nat)) (n)) (\lambda p : nat. (((mod_aux) (n)) (n)) (p))) (\lambda y : nat. (((eq) (nat)) (n)) (((plus) (((plus) (O)) (((times) (n)) (O)))) (y)))) ((((sym_eq_plus) (O)) (\lambda y : (nat) \to nat. (((eq) (nat)) (n)) (((plus) ((y) (((times) (n)) (O)))) (n)))) (((((sym_eq_filter_nat_type_O) ((nat) \to nat)) (plus_body)) (\lambda y : (nat) \to nat. (((eq) (nat)) (n)) (((plus) ((y) (((times) (n)) (O)))) (n)))) (((sym_eq_plus_body_O) (\lambda y : (nat) \to nat. (((eq) (nat)) (n)) (((plus) ((y) (((times) (n)) (O)))) (n)))) (((((((rewrite_l) (nat)) (O)) (\lambda Joker_ : nat. (((eq) (nat)) (n)) (((plus) (Joker_)) (n)))) (((((((rewrite_r) (nat)) (((plus) (n)) (O))) (\lambda Joker_ : nat. (((eq) (nat)) (n)) (Joker_))) (((((((rewrite_l) (nat)) (n)) (\lambda Joker_ : nat. (((eq) (nat)) (n)) (Joker_))) (((refl) (nat)) (n))) (((plus) (n)) (O))) ((plus_n_O) (n)))) (((plus) (O)) (n))) (((commutative_plus) (O)) (n)))) (((times) (n)) (O))) ((times_n_O) (n)))))))))))) (\lambda auto : nat. ((((((sym_eq_match_nat_type_S) (nat)) ((S) (n))) (\lambda p : nat. (((div_aux) (n)) (n)) (p))) (auto)) (\lambda y : nat. (((eq) (nat)) (n)) (((plus) (((times) (y)) ((S) (auto)))) (((((match_nat_type) (nat)) (n)) (\lambda p : nat. (((mod_aux) (n)) (n)) (p))) ((S) (auto)))))) (((((((sym_eq_match_nat_type_S) (nat)) (n)) (\lambda p : nat. (((mod_aux) (n)) (n)) (p))) (auto)) (\lambda y : nat. (((eq) (nat)) (n)) (((plus) (((times) ((((div_aux) (n)) (n)) (auto))) ((S) (auto)))) (y)))) (((((((rewrite_r) (nat)) (((plus) (((times) ((((div_aux) (n)) (n)) (auto))) ((S) (auto)))) ((((mod_aux) (n)) (n)) (auto)))) (\lambda Joker_ : nat. (((eq) (nat)) (Joker_)) (((plus) (((times) ((((div_aux) (n)) (n)) (auto))) ((S) (auto)))) ((((mod_aux) (n)) (n)) (auto))))) (((refl) (nat)) (((plus) (((times) ((((div_aux) (n)) (n)) (auto))) ((S) (auto)))) ((((mod_aux) (n)) (n)) (auto))))) (n)) ((((div_aux_mod_aux) (n)) (n)) (auto)))))) (m).
definition eq_times_div_minus_mod : \forall a : nat. \forall b : nat. (((eq) (nat)) (((times) (((div) (a)) (b))) (b))) (((minus) (a)) (((mod) (a)) (b))) := \lambda a : nat. \lambda b : nat. ((((eq_coerc) ((((eq) (nat)) (((times) (b)) (((div) (a)) (b)))) (((minus) (((plus) (((times) (b)) (((div) (a)) (b)))) (((mod) (a)) (b)))) (((mod) (a)) (b))))) ((((eq) (nat)) (((times) (((div) (a)) (b))) (b))) (((minus) (a)) (((mod) (a)) (b))))) (((minus_plus_m_m) (((times) (b)) (((div) (a)) (b)))) (((mod) (a)) (b)))) (((((((rewrite_r) (nat)) (((plus) (((mod) (a)) (b))) (((times) (b)) (((div) (a)) (b))))) (\lambda Joker_ : nat. (((eq) Prop) ((((eq) (nat)) (((times) (b)) (((div) (a)) (b)))) (((minus) (Joker_)) (((mod) (a)) (b))))) ((((eq) (nat)) (((times) (((div) (a)) (b))) (b))) (((minus) (a)) (((mod) (a)) (b)))))) (((((((rewrite_r) (nat)) (((times) (b)) (((div) (a)) (b)))) (\lambda Joker_ : nat. (((eq) Prop) ((((eq) (nat)) (((times) (b)) (((div) (a)) (b)))) (((minus) (((plus) (((mod) (a)) (b))) (((times) (b)) (((div) (a)) (b))))) (((mod) (a)) (b))))) ((((eq) (nat)) (Joker_)) (((minus) (a)) (((mod) (a)) (b)))))) (((((((rewrite_l) (nat)) (a)) (\lambda Joker_ : nat. (((eq) Prop) ((((eq) (nat)) (((times) (b)) (((div) (a)) (b)))) (((minus) (Joker_)) (((mod) (a)) (b))))) ((((eq) (nat)) (((times) (b)) (((div) (a)) (b)))) (((minus) (a)) (((mod) (a)) (b)))))) (((refl) Prop) ((((eq) (nat)) (((times) (b)) (((div) (a)) (b)))) (((minus) (a)) (((mod) (a)) (b)))))) (((plus) (((mod) (a)) (b))) (((times) (b)) (((div) (a)) (b))))) (((((((rewrite_l) (nat)) (((plus) (((times) (b)) (((div) (a)) (b)))) (((mod) (a)) (b)))) (\lambda Joker_ : nat. (((eq) (nat)) (a)) (Joker_))) (((((((rewrite_l) (nat)) (((times) (((div) (a)) (b))) (b))) (\lambda Joker_ : nat. (((eq) (nat)) (a)) (((plus) (Joker_)) (((mod) (a)) (b))))) (((div_mod) (a)) (b))) (((times) (b)) (((div) (a)) (b)))) (((commutative_times) (((div) (a)) (b))) (b)))) (((plus) (((mod) (a)) (b))) (((times) (b)) (((div) (a)) (b))))) (((commutative_plus) (((times) (b)) (((div) (a)) (b)))) (((mod) (a)) (b)))))) (((times) (((div) (a)) (b))) (b))) (((commutative_times) (((div) (a)) (b))) (b)))) (((plus) (((times) (b)) (((div) (a)) (b)))) (((mod) (a)) (b)))) (((commutative_plus) (((times) (b)) (((div) (a)) (b)))) (((mod) (a)) (b)))).
axiom div_mod_spec : (nat) \to (nat) \to (nat) \to (nat) \to Prop.
axiom div_mod_spec_intro : \forall n : nat. \forall m : nat. \forall q : nat. \forall r : nat. (((lt) (r)) (m)) \to ((((eq) (nat)) (n)) (((plus) (((times) (q)) (m))) (r))) \to ((((div_mod_spec) (n)) (m)) (q)) (r).
axiom match_div_mod_spec_prop : \forall n : nat. \forall m : nat. \forall q : nat. \forall r : nat. \forall return_ : Prop. ((((lt) (r)) (m)) \to ((((eq) (nat)) (n)) (((plus) (((times) (q)) (m))) (r))) \to return_) \to (((((div_mod_spec) (n)) (m)) (q)) (r)) \to return_.
definition div_mod_spec_div_mod : \forall n : nat. \forall m : nat. (((lt) (O)) (m)) \to ((((div_mod_spec) (n)) (m)) (((div) (n)) (m))) (((mod) (n)) (m)) := \lambda n : nat. \lambda m : nat. \lambda posm : ((lt) (O)) (m). ((((((div_mod_spec_intro) (n)) (m)) (((div) (n)) (m))) (((mod) (n)) (m))) ((((lt_mod_m_m) (n)) (m)) (posm))) (((((((rewrite_r) (nat)) (((times) (m)) (((div) (n)) (m)))) (\lambda Joker_ : nat. (((eq) (nat)) (n)) (((plus) (Joker_)) (((mod) (n)) (m))))) (((((((rewrite_r) (nat)) (((plus) (((mod) (n)) (m))) (((times) (m)) (((div) (n)) (m))))) (\lambda Joker_ : nat. (((eq) (nat)) (n)) (Joker_))) (((((((rewrite_l) (nat)) (n)) (\lambda Joker_ : nat. (((eq) (nat)) (n)) (Joker_))) (((refl) (nat)) (n))) (((plus) (((mod) (n)) (m))) (((times) (m)) (((div) (n)) (m))))) (((((((rewrite_l) (nat)) (((plus) (((times) (m)) (((div) (n)) (m)))) (((mod) (n)) (m)))) (\lambda Joker_ : nat. (((eq) (nat)) (n)) (Joker_))) (((((((rewrite_l) (nat)) (((times) (((div) (n)) (m))) (m))) (\lambda Joker_ : nat. (((eq) (nat)) (n)) (((plus) (Joker_)) (((mod) (n)) (m))))) (((div_mod) (n)) (m))) (((times) (m)) (((div) (n)) (m)))) (((commutative_times) (((div) (n)) (m))) (m)))) (((plus) (((mod) (n)) (m))) (((times) (m)) (((div) (n)) (m))))) (((commutative_plus) (((times) (m)) (((div) (n)) (m)))) (((mod) (n)) (m)))))) (((plus) (((times) (m)) (((div) (n)) (m)))) (((mod) (n)) (m)))) (((commutative_plus) (((times) (m)) (((div) (n)) (m)))) (((mod) (n)) (m))))) (((times) (((div) (n)) (m))) (m))) (((commutative_times) (((div) (n)) (m))) (m))).
definition let_clause_1078 : \forall a : nat. \forall b : nat. \forall q : nat. \forall r : nat. \forall q1 : nat. \forall r1 : nat. (((((div_mod_spec) (a)) (b)) (q)) (r)) \to (((lt) (r)) (b)) \to ((((eq) (nat)) (a)) (((plus) (((times) (q)) (b))) (r))) \to (((((div_mod_spec) (a)) (b)) (q1)) (r1)) \to (((lt) (r1)) (b)) \to ((((eq) (nat)) (a)) (((plus) (((times) (q1)) (b))) (r1))) \to (((le) (q)) (q1)) \to (((lt) (q)) (q1)) \to (((eq) (nat)) (a)) (((plus) (r)) (((times) (b)) (q))) := \lambda a : nat. \lambda b : nat. \lambda q : nat. \lambda r : nat. \lambda q1 : nat. \lambda r1 : nat. \lambda Jokerclearme : ((((div_mod_spec) (a)) (b)) (q)) (r). \lambda ltrb : ((lt) (r)) (b). \lambda spec : (((eq) (nat)) (a)) (((plus) (((times) (q)) (b))) (r)). \lambda Jokerclearme0 : ((((div_mod_spec) (a)) (b)) (q1)) (r1). \lambda ltr1b : ((lt) (r1)) (b). \lambda spec1 : (((eq) (nat)) (a)) (((plus) (((times) (q1)) (b))) (r1)). \lambda leqq1 : ((le) (q)) (q1). \lambda ltqq1 : ((lt) (q)) (q1). ((((((rewrite_l) (nat)) (((plus) (((times) (b)) (q))) (r))) (\lambda Joker_ : nat. (((eq) (nat)) (a)) (Joker_))) (((((((rewrite_l) (nat)) (((times) (q)) (b))) (\lambda Joker_ : nat. (((eq) (nat)) (a)) (((plus) (Joker_)) (r)))) (spec)) (((times) (b)) (q))) (((commutative_times) (q)) (b)))) (((plus) (r)) (((times) (b)) (q)))) (((commutative_plus) (((times) (b)) (q))) (r)).
definition let_clause_1062 : \forall a : nat. \forall b : nat. \forall q : nat. \forall r : nat. \forall q1 : nat. \forall r1 : nat. (((((div_mod_spec) (a)) (b)) (q)) (r)) \to (((lt) (r)) (b)) \to ((((eq) (nat)) (a)) (((plus) (((times) (q)) (b))) (r))) \to (((((div_mod_spec) (a)) (b)) (q1)) (r1)) \to (((lt) (r1)) (b)) \to ((((eq) (nat)) (a)) (((plus) (((times) (q1)) (b))) (r1))) \to ((Not) (((le) (q)) (q1))) \to (((eq) (nat)) (a)) (((plus) (r1)) (((times) (b)) (q1))) := \lambda a : nat. \lambda b : nat. \lambda q : nat. \lambda r : nat. \lambda q1 : nat. \lambda r1 : nat. \lambda Jokerclearme : ((((div_mod_spec) (a)) (b)) (q)) (r). \lambda ltrb : ((lt) (r)) (b). \lambda spec : (((eq) (nat)) (a)) (((plus) (((times) (q)) (b))) (r)). \lambda Jokerclearme0 : ((((div_mod_spec) (a)) (b)) (q1)) (r1). \lambda ltr1b : ((lt) (r1)) (b). \lambda spec1 : (((eq) (nat)) (a)) (((plus) (((times) (q1)) (b))) (r1)). \lambda leqq1 : (Not) (((le) (q)) (q1)). ((((((rewrite_l) (nat)) (((plus) (((times) (b)) (q1))) (r1))) (\lambda Joker_ : nat. (((eq) (nat)) (a)) (Joker_))) (((((((rewrite_l) (nat)) (((times) (q1)) (b))) (\lambda Joker_ : nat. (((eq) (nat)) (a)) (((plus) (Joker_)) (r1)))) (spec1)) (((times) (b)) (q1))) (((commutative_times) (q1)) (b)))) (((plus) (r1)) (((times) (b)) (q1)))) (((commutative_plus) (((times) (b)) (q1))) (r1)).
definition div_mod_spec_to_eq : \forall a : nat. \forall b : nat. \forall q : nat. \forall r : nat. \forall q1 : nat. \forall r1 : nat. (((((div_mod_spec) (a)) (b)) (q)) (r)) \to (((((div_mod_spec) (a)) (b)) (q1)) (r1)) \to (((eq) (nat)) (q)) (q1) := \lambda a : nat. \lambda b : nat. \lambda q : nat. \lambda r : nat. \lambda q1 : nat. \lambda r1 : nat. \lambda Jokerclearme : ((((div_mod_spec) (a)) (b)) (q)) (r). (((((((match_div_mod_spec_prop) (a)) (b)) (q)) (r)) ((((((div_mod_spec) (a)) (b)) (q1)) (r1)) \to (((eq) (nat)) (q)) (q1))) (\lambda ltrb : ((lt) (r)) (b). \lambda spec : (((eq) (nat)) (a)) (((plus) (((times) (q)) (b))) (r)). \lambda Jokerclearme0 : ((((div_mod_spec) (a)) (b)) (q1)) (r1). (((((((match_div_mod_spec_prop) (a)) (b)) (q1)) (r1)) ((((eq) (nat)) (q)) (q1))) (\lambda ltr1b : ((lt) (r1)) (b). \lambda spec1 : (((eq) (nat)) (a)) (((plus) (((times) (q1)) (b))) (r1)). (((((leb_elim) (q)) (q1)) (\lambda Joker_ : bool. (((eq) (nat)) (q)) (q1))) (\lambda leqq1 : ((le) (q)) (q1). ((((((match_Or_prop) (((lt) (q)) (q1))) ((((eq) (nat)) (q)) (q1))) ((((eq) (nat)) (q)) (q1))) (\lambda ltqq1 : ((lt) (q)) (q1). ((falsity) ((((eq) (nat)) (q)) (q1))) ((((absurd) (((le) ((S) (a))) (a))) ((((((lt_to_le_to_lt) (a)) (((times) ((S) (q))) (b))) (a)) (((((((eq_ind_r) (nat)) (((plus) (((times) (q)) (b))) (r))) (\lambda x : nat. ((lt) (x)) (((times) ((S) (q))) (b)))) (((((eq_coerc) (((lt) (((plus) (((times) (q)) (b))) (r))) (((plus) (((times) (q)) (b))) (b)))) (((lt) (((plus) (((times) (q)) (b))) (r))) (((times) ((S) (q))) (b)))) (((((monotonic_lt_plus_r) (((times) (q)) (b))) (r)) (b)) (ltrb))) (((((((rewrite_r) (nat)) (((times) (b)) (q))) (\lambda Joker_ : nat. (((eq) Prop) (((lt) (((plus) (Joker_)) (r))) (((plus) (Joker_)) (b)))) (((lt) (((plus) (Joker_)) (r))) (((times) ((S) (q))) (b))))) (((((((rewrite_r) (nat)) (((plus) (r)) (((times) (b)) (q)))) (\lambda Joker_ : nat. (((eq) Prop) (((lt) (((plus) (((times) (b)) (q))) (r))) (((plus) (((times) (b)) (q))) (b)))) (((lt) (Joker_)) (((times) ((S) (q))) (b))))) (((((((rewrite_l) (nat)) (a)) (\lambda Joker_ : nat. (((eq) Prop) (((lt) (((plus) (((times) (b)) (q))) (r))) (((plus) (((times) (b)) (q))) (b)))) (((lt) (Joker_)) (((times) ((S) (q))) (b))))) (((((((rewrite_r) (nat)) (((times) (b)) ((S) (q)))) (\lambda Joker_ : nat. (((eq) Prop) (((lt) (((plus) (((times) (b)) (q))) (r))) (((plus) (((times) (b)) (q))) (b)))) (((lt) (a)) (Joker_)))) (((((((rewrite_l) (nat)) (((plus) (b)) (((times) (b)) (q)))) (\lambda Joker_ : nat. (((eq) Prop) (((lt) (((plus) (((times) (b)) (q))) (r))) (((plus) (((times) (b)) (q))) (b)))) (((lt) (a)) (Joker_)))) (((((((rewrite_r) (nat)) (((plus) (r)) (((times) (b)) (q)))) (\lambda Joker_ : nat. (((eq) Prop) (((lt) (Joker_)) (((plus) (((times) (b)) (q))) (b)))) (((lt) (a)) (((plus) (b)) (((times) (b)) (q)))))) (((((((rewrite_l) (nat)) (a)) (\lambda Joker_ : nat. (((eq) Prop) (((lt) (Joker_)) (((plus) (((times) (b)) (q))) (b)))) (((lt) (a)) (((plus) (b)) (((times) (b)) (q)))))) (((((((rewrite_r) (nat)) (((plus) (b)) (((times) (b)) (q)))) (\lambda Joker_ : nat. (((eq) Prop) (((lt) (a)) (Joker_))) (((lt) (a)) (((plus) (b)) (((times) (b)) (q)))))) (((refl) Prop) (((lt) (a)) (((plus) (b)) (((times) (b)) (q)))))) (((plus) (((times) (b)) (q))) (b))) (((commutative_plus) (((times) (b)) (q))) (b)))) (((plus) (r)) (((times) (b)) (q)))) (((((((((((((((let_clause_1078) (a)) (b)) (q)) (r)) (q1)) (r1)) (Jokerclearme)) (ltrb)) (spec)) (Jokerclearme0)) (ltr1b)) (spec1)) (leqq1)) (ltqq1)))) (((plus) (((times) (b)) (q))) (r))) (((commutative_plus) (((times) (b)) (q))) (r)))) (((times) (b)) ((S) (q)))) (((times_n_Sm) (b)) (q)))) (((times) ((S) (q))) (b))) (((commutative_times) ((S) (q))) (b)))) (((plus) (r)) (((times) (b)) (q)))) (((((((((((((((let_clause_1078) (a)) (b)) (q)) (r)) (q1)) (r1)) (Jokerclearme)) (ltrb)) (spec)) (Jokerclearme0)) (ltr1b)) (spec1)) (leqq1)) (ltqq1)))) (((plus) (((times) (b)) (q))) (r))) (((commutative_plus) (((times) (b)) (q))) (r)))) (((times) (q)) (b))) (((commutative_times) (q)) (b))))) (a)) (spec))) ((((((transitive_le) (((times) ((S) (q))) (b))) (((times) (q1)) (b))) (a)) (((((eq_coerc) (((le) (((times) (b)) ((S) (q)))) (((times) (b)) (q1)))) (((le) (((times) ((S) (q))) (b))) (((times) (q1)) (b)))) (((((monotonic_le_times_r) (b)) ((S) (q))) (q1)) (ltqq1))) (((((((rewrite_r) (nat)) (((times) (b)) ((S) (q)))) (\lambda Joker_ : nat. (((eq) Prop) (((le) (((times) (b)) ((S) (q)))) (((times) (b)) (q1)))) (((le) (Joker_)) (((times) (q1)) (b))))) (((((((rewrite_l) (nat)) (((plus) (b)) (((times) (b)) (q)))) (\lambda Joker_ : nat. (((eq) Prop) (((le) (((times) (b)) ((S) (q)))) (((times) (b)) (q1)))) (((le) (Joker_)) (((times) (q1)) (b))))) (((((((rewrite_r) (nat)) (((times) (b)) (q1))) (\lambda Joker_ : nat. (((eq) Prop) (((le) (((times) (b)) ((S) (q)))) (((times) (b)) (q1)))) (((le) (((plus) (b)) (((times) (b)) (q)))) (Joker_)))) (((((((rewrite_l) (nat)) (((plus) (b)) (((times) (b)) (q)))) (\lambda Joker_ : nat. (((eq) Prop) (((le) (Joker_)) (((times) (b)) (q1)))) (((le) (((plus) (b)) (((times) (b)) (q)))) (((times) (b)) (q1))))) (((refl) Prop) (((le) (((plus) (b)) (((times) (b)) (q)))) (((times) (b)) (q1))))) (((times) (b)) ((S) (q)))) (((times_n_Sm) (b)) (q)))) (((times) (q1)) (b))) (((commutative_times) (q1)) (b)))) (((times) (b)) ((S) (q)))) (((times_n_Sm) (b)) (q)))) (((times) ((S) (q))) (b))) (((commutative_times) ((S) (q))) (b))))) (((((eq_coerc) (((le) (((times) (q1)) (b))) (((plus) (((times) (q1)) (b))) (r1)))) (((le) (((times) (q1)) (b))) (a))) (((le_plus_n_r) (r1)) (((times) (q1)) (b)))) (((((((rewrite_r) (nat)) (((times) (b)) (q1))) (\lambda Joker_ : nat. (((eq) Prop) (((le) (Joker_)) (((plus) (Joker_)) (r1)))) (((le) (Joker_)) (a)))) (((((((rewrite_r) (nat)) (((plus) (r1)) (((times) (b)) (q1)))) (\lambda Joker_ : nat. (((eq) Prop) (((le) (((times) (b)) (q1))) (Joker_))) (((le) (((times) (b)) (q1))) (a)))) (((((((rewrite_l) (nat)) (a)) (\lambda Joker_ : nat. (((eq) Prop) (((le) (((times) (b)) (q1))) (Joker_))) (((le) (((times) (b)) (q1))) (a)))) (((refl) Prop) (((le) (((times) (b)) (q1))) (a)))) (((plus) (r1)) (((times) (b)) (q1)))) (((((((rewrite_l) (nat)) (((plus) (((times) (b)) (q1))) (r1))) (\lambda Joker_ : nat. (((eq) (nat)) (a)) (Joker_))) (((((((rewrite_l) (nat)) (((times) (q1)) (b))) (\lambda Joker_ : nat. (((eq) (nat)) (a)) (((plus) (Joker_)) (r1)))) (spec1)) (((times) (b)) (q1))) (((commutative_times) (q1)) (b)))) (((plus) (r1)) (((times) (b)) (q1)))) (((commutative_plus) (((times) (b)) (q1))) (r1))))) (((plus) (((times) (b)) (q1))) (r1))) (((commutative_plus) (((times) (b)) (q1))) (r1)))) (((times) (q1)) (b))) (((commutative_times) (q1)) (b))))))) ((not_le_Sn_n) (a))))) (\lambda Jokerx_172 : (((eq) (nat)) (q)) (q1). ((((((rewrite_l) (nat)) (q)) (\lambda Joker_ : nat. (((eq) (nat)) (q)) (Joker_))) (((refl) (nat)) (q))) (q1)) (Jokerx_172))) ((((le_to_or_lt_eq) (q)) (q1)) (leqq1)))) (\lambda leqq1 : (Not) (((le) (q)) (q1)). ((falsity) ((((eq) (nat)) (q)) (q1))) ((((absurd) (((le) ((S) (a))) (a))) ((((((lt_to_le_to_lt) (a)) (((times) ((S) (q1))) (b))) (a)) (((((((eq_ind_r) (nat)) (((plus) (((times) (q1)) (b))) (r1))) (\lambda x : nat. ((lt) (x)) (((times) ((S) (q1))) (b)))) (((((eq_coerc) (((lt) (((plus) (((times) (q1)) (b))) (r1))) (((plus) (((times) (q1)) (b))) (b)))) (((lt) (((plus) (((times) (q1)) (b))) (r1))) (((times) ((S) (q1))) (b)))) (((((monotonic_lt_plus_r) (((times) (q1)) (b))) (r1)) (b)) (ltr1b))) (((((((rewrite_r) (nat)) (((times) (b)) (q1))) (\lambda Joker_ : nat. (((eq) Prop) (((lt) (((plus) (Joker_)) (r1))) (((plus) (Joker_)) (b)))) (((lt) (((plus) (Joker_)) (r1))) (((times) ((S) (q1))) (b))))) (((((((rewrite_r) (nat)) (((plus) (r1)) (((times) (b)) (q1)))) (\lambda Joker_ : nat. (((eq) Prop) (((lt) (((plus) (((times) (b)) (q1))) (r1))) (((plus) (((times) (b)) (q1))) (b)))) (((lt) (Joker_)) (((times) ((S) (q1))) (b))))) (((((((rewrite_l) (nat)) (a)) (\lambda Joker_ : nat. (((eq) Prop) (((lt) (((plus) (((times) (b)) (q1))) (r1))) (((plus) (((times) (b)) (q1))) (b)))) (((lt) (Joker_)) (((times) ((S) (q1))) (b))))) (((((((rewrite_r) (nat)) (((times) (b)) ((S) (q1)))) (\lambda Joker_ : nat. (((eq) Prop) (((lt) (((plus) (((times) (b)) (q1))) (r1))) (((plus) (((times) (b)) (q1))) (b)))) (((lt) (a)) (Joker_)))) (((((((rewrite_l) (nat)) (((plus) (b)) (((times) (b)) (q1)))) (\lambda Joker_ : nat. (((eq) Prop) (((lt) (((plus) (((times) (b)) (q1))) (r1))) (((plus) (((times) (b)) (q1))) (b)))) (((lt) (a)) (Joker_)))) (((((((rewrite_r) (nat)) (((plus) (r1)) (((times) (b)) (q1)))) (\lambda Joker_ : nat. (((eq) Prop) (((lt) (Joker_)) (((plus) (((times) (b)) (q1))) (b)))) (((lt) (a)) (((plus) (b)) (((times) (b)) (q1)))))) (((((((rewrite_l) (nat)) (a)) (\lambda Joker_ : nat. (((eq) Prop) (((lt) (Joker_)) (((plus) (((times) (b)) (q1))) (b)))) (((lt) (a)) (((plus) (b)) (((times) (b)) (q1)))))) (((((((rewrite_r) (nat)) (((plus) (b)) (((times) (b)) (q1)))) (\lambda Joker_ : nat. (((eq) Prop) (((lt) (a)) (Joker_))) (((lt) (a)) (((plus) (b)) (((times) (b)) (q1)))))) (((refl) Prop) (((lt) (a)) (((plus) (b)) (((times) (b)) (q1)))))) (((plus) (((times) (b)) (q1))) (b))) (((commutative_plus) (((times) (b)) (q1))) (b)))) (((plus) (r1)) (((times) (b)) (q1)))) ((((((((((((((let_clause_1062) (a)) (b)) (q)) (r)) (q1)) (r1)) (Jokerclearme)) (ltrb)) (spec)) (Jokerclearme0)) (ltr1b)) (spec1)) (leqq1)))) (((plus) (((times) (b)) (q1))) (r1))) (((commutative_plus) (((times) (b)) (q1))) (r1)))) (((times) (b)) ((S) (q1)))) (((times_n_Sm) (b)) (q1)))) (((times) ((S) (q1))) (b))) (((commutative_times) ((S) (q1))) (b)))) (((plus) (r1)) (((times) (b)) (q1)))) ((((((((((((((let_clause_1062) (a)) (b)) (q)) (r)) (q1)) (r1)) (Jokerclearme)) (ltrb)) (spec)) (Jokerclearme0)) (ltr1b)) (spec1)) (leqq1)))) (((plus) (((times) (b)) (q1))) (r1))) (((commutative_plus) (((times) (b)) (q1))) (r1)))) (((times) (q1)) (b))) (((commutative_times) (q1)) (b))))) (a)) (spec1))) ((((((transitive_le) (((times) ((S) (q1))) (b))) (((times) (q)) (b))) (a)) (((((eq_coerc) (((le) (((times) (b)) ((S) (q1)))) (((times) (b)) (q)))) (((le) (((times) ((S) (q1))) (b))) (((times) (q)) (b)))) (((((monotonic_le_times_r) (b)) ((S) (q1))) (q)) ((((not_le_to_lt) (q)) (q1)) (leqq1)))) (((((((rewrite_r) (nat)) (((times) (b)) ((S) (q1)))) (\lambda Joker_ : nat. (((eq) Prop) (((le) (((times) (b)) ((S) (q1)))) (((times) (b)) (q)))) (((le) (Joker_)) (((times) (q)) (b))))) (((((((rewrite_l) (nat)) (((plus) (b)) (((times) (b)) (q1)))) (\lambda Joker_ : nat. (((eq) Prop) (((le) (((times) (b)) ((S) (q1)))) (((times) (b)) (q)))) (((le) (Joker_)) (((times) (q)) (b))))) (((((((rewrite_r) (nat)) (((times) (b)) (q))) (\lambda Joker_ : nat. (((eq) Prop) (((le) (((times) (b)) ((S) (q1)))) (((times) (b)) (q)))) (((le) (((plus) (b)) (((times) (b)) (q1)))) (Joker_)))) (((((((rewrite_l) (nat)) (((plus) (b)) (((times) (b)) (q1)))) (\lambda Joker_ : nat. (((eq) Prop) (((le) (Joker_)) (((times) (b)) (q)))) (((le) (((plus) (b)) (((times) (b)) (q1)))) (((times) (b)) (q))))) (((refl) Prop) (((le) (((plus) (b)) (((times) (b)) (q1)))) (((times) (b)) (q))))) (((times) (b)) ((S) (q1)))) (((times_n_Sm) (b)) (q1)))) (((times) (q)) (b))) (((commutative_times) (q)) (b)))) (((times) (b)) ((S) (q1)))) (((times_n_Sm) (b)) (q1)))) (((times) ((S) (q1))) (b))) (((commutative_times) ((S) (q1))) (b))))) (((((eq_coerc) (((le) (((times) (q)) (b))) (((plus) (((times) (q)) (b))) (r)))) (((le) (((times) (q)) (b))) (a))) (((le_plus_n_r) (r)) (((times) (q)) (b)))) (((((((rewrite_r) (nat)) (((times) (b)) (q))) (\lambda Joker_ : nat. (((eq) Prop) (((le) (Joker_)) (((plus) (Joker_)) (r)))) (((le) (Joker_)) (a)))) (((((((rewrite_r) (nat)) (((plus) (r)) (((times) (b)) (q)))) (\lambda Joker_ : nat. (((eq) Prop) (((le) (((times) (b)) (q))) (Joker_))) (((le) (((times) (b)) (q))) (a)))) (((((((rewrite_l) (nat)) (a)) (\lambda Joker_ : nat. (((eq) Prop) (((le) (((times) (b)) (q))) (Joker_))) (((le) (((times) (b)) (q))) (a)))) (((refl) Prop) (((le) (((times) (b)) (q))) (a)))) (((plus) (r)) (((times) (b)) (q)))) (((((((rewrite_l) (nat)) (((plus) (((times) (b)) (q))) (r))) (\lambda Joker_ : nat. (((eq) (nat)) (a)) (Joker_))) (((((((rewrite_l) (nat)) (((times) (q)) (b))) (\lambda Joker_ : nat. (((eq) (nat)) (a)) (((plus) (Joker_)) (r)))) (spec)) (((times) (b)) (q))) (((commutative_times) (q)) (b)))) (((plus) (r)) (((times) (b)) (q)))) (((commutative_plus) (((times) (b)) (q))) (r))))) (((plus) (((times) (b)) (q))) (r))) (((commutative_plus) (((times) (b)) (q))) (r)))) (((times) (q)) (b))) (((commutative_times) (q)) (b))))))) ((not_le_Sn_n) (a)))))) (Jokerclearme0))) (Jokerclearme).
definition div_mod_spec_to_eq2 : \forall a : nat. \forall b : nat. \forall q : nat. \forall r : nat. \forall q1 : nat. \forall r1 : nat. (((((div_mod_spec) (a)) (b)) (q)) (r)) \to (((((div_mod_spec) (a)) (b)) (q1)) (r1)) \to (((eq) (nat)) (r)) (r1) := \lambda a : nat. \lambda b : nat. \lambda q : nat. \lambda r : nat. \lambda q1 : nat. \lambda r1 : nat. \lambda spec : ((((div_mod_spec) (a)) (b)) (q)) (r). \lambda spec1 : ((((div_mod_spec) (a)) (b)) (q1)) (r1). (((((((match_div_mod_spec_prop) (a)) (b)) (q)) (r)) ((((eq) (nat)) (r)) (r1))) (\lambda Joker_ : ((lt) (r)) (b). \lambda eqa : (((eq) (nat)) (a)) (((plus) (((times) (q)) (b))) (r)). (((((((match_div_mod_spec_prop) (a)) (b)) (q1)) (r1)) ((((eq) (nat)) (r)) (r1))) (\lambda Joker0 : ((lt) (r1)) (b). \lambda eqa1 : (((eq) (nat)) (a)) (((plus) (((times) (q1)) (b))) (r1)). ((((injective_plus_r) (((times) (q)) (b))) (r)) (r1)) (((((((rewrite_r) (nat)) (((times) (b)) (q))) (\lambda Joker_1 : nat. (((eq) (nat)) (((plus) (Joker_1)) (r))) (((plus) (((times) (q)) (b))) (r1)))) (((((((rewrite_r) (nat)) (((plus) (r)) (((times) (b)) (q)))) (\lambda Joker_1 : nat. (((eq) (nat)) (Joker_1)) (((plus) (((times) (q)) (b))) (r1)))) (((((((rewrite_l) (nat)) (a)) (\lambda Joker_1 : nat. (((eq) (nat)) (Joker_1)) (((plus) (((times) (q)) (b))) (r1)))) (((((((rewrite_r) (nat)) (((times) (b)) (q))) (\lambda Joker_1 : nat. (((eq) (nat)) (a)) (((plus) (Joker_1)) (r1)))) (((((((rewrite_r) (nat)) (((plus) (r1)) (((times) (b)) (q)))) (\lambda Joker_1 : nat. (((eq) (nat)) (a)) (Joker_1))) (((((((rewrite_l) (nat)) (a)) (\lambda Joker_1 : nat. (((eq) (nat)) (a)) (Joker_1))) (((refl) (nat)) (a))) (((plus) (r1)) (((times) (b)) (q)))) (((((((rewrite_r) (nat)) (q1)) (\lambda Joker_1 : nat. (((eq) (nat)) (a)) (((plus) (r1)) (((times) (b)) (Joker_1))))) (((((((rewrite_l) (nat)) (((plus) (((times) (b)) (q1))) (r1))) (\lambda Joker_1 : nat. (((eq) (nat)) (a)) (Joker_1))) (((((((rewrite_l) (nat)) (((times) (q1)) (b))) (\lambda Joker_1 : nat. (((eq) (nat)) (a)) (((plus) (Joker_1)) (r1)))) (eqa1)) (((times) (b)) (q1))) (((commutative_times) (q1)) (b)))) (((plus) (r1)) (((times) (b)) (q1)))) (((commutative_plus) (((times) (b)) (q1))) (r1)))) (q)) (((((((((div_mod_spec_to_eq) (a)) (b)) (q)) (r)) (q1)) (r1)) (spec)) (spec1))))) (((plus) (((times) (b)) (q))) (r1))) (((commutative_plus) (((times) (b)) (q))) (r1)))) (((times) (q)) (b))) (((commutative_times) (q)) (b)))) (((plus) (r)) (((times) (b)) (q)))) (((((((rewrite_l) (nat)) (((plus) (((times) (b)) (q))) (r))) (\lambda Joker_1 : nat. (((eq) (nat)) (a)) (Joker_1))) (((((((rewrite_l) (nat)) (((times) (q)) (b))) (\lambda Joker_1 : nat. (((eq) (nat)) (a)) (((plus) (Joker_1)) (r)))) (eqa)) (((times) (b)) (q))) (((commutative_times) (q)) (b)))) (((plus) (r)) (((times) (b)) (q)))) (((commutative_plus) (((times) (b)) (q))) (r))))) (((plus) (((times) (b)) (q))) (r))) (((commutative_plus) (((times) (b)) (q))) (r)))) (((times) (q)) (b))) (((commutative_times) (q)) (b))))) (spec1))) (spec).
definition div_times : \forall a : nat. \forall b : nat. (((lt) (O)) (b)) \to (((eq) (nat)) (((div) (((times) (a)) (b))) (b))) (a) := \lambda a : nat. \lambda b : nat. \lambda posb : ((lt) (O)) (b). ((((((((div_mod_spec_to_eq) (((times) (a)) (b))) (b)) (((div) (((times) (a)) (b))) (b))) (((mod) (((times) (a)) (b))) (b))) (a)) (O)) ((((div_mod_spec_div_mod) (((times) (a)) (b))) (b)) (posb))) (((((((div_mod_spec_intro) (((times) (a)) (b))) (b)) (a)) (O)) (posb)) (((((((rewrite_r) (nat)) (((plus) (O)) (((times) (a)) (b)))) (\lambda Joker_ : nat. (((eq) (nat)) (((times) (a)) (b))) (Joker_))) (((((((rewrite_l) (nat)) (((times) (a)) (b))) (\lambda Joker_ : nat. (((eq) (nat)) (((times) (a)) (b))) (Joker_))) (((refl) (nat)) (((times) (a)) (b)))) (((plus) (O)) (((times) (a)) (b)))) ((plus_O_n) (((times) (a)) (b))))) (((plus) (((times) (a)) (b))) (O))) (((commutative_plus) (((times) (a)) (b))) (O)))).
definition eq_div_O : \forall n : nat. \forall m : nat. (((lt) (n)) (m)) \to (((eq) (nat)) (((div) (n)) (m))) (O) := \lambda n : nat. \lambda m : nat. \lambda ltnm : ((lt) (n)) (m). ((((((((div_mod_spec_to_eq) (n)) (m)) (((div) (n)) (m))) (((mod) (n)) (m))) (O)) (n)) ((((div_mod_spec_div_mod) (n)) (m)) ((((ltn_to_ltO) (n)) (m)) (ltnm)))) (((((((div_mod_spec_intro) (n)) (m)) (O)) (n)) (ltnm)) (((((((rewrite_r) (nat)) (((times) (m)) (O))) (\lambda Joker_ : nat. (((eq) (nat)) (n)) (((plus) (Joker_)) (n)))) (((((((rewrite_l) (nat)) (O)) (\lambda Joker_ : nat. (((eq) (nat)) (n)) (((plus) (Joker_)) (n)))) (((((((rewrite_r) (nat)) (((plus) (n)) (O))) (\lambda Joker_ : nat. (((eq) (nat)) (n)) (Joker_))) (((((((rewrite_l) (nat)) (n)) (\lambda Joker_ : nat. (((eq) (nat)) (n)) (Joker_))) (((refl) (nat)) (n))) (((plus) (n)) (O))) ((plus_n_O) (n)))) (((plus) (O)) (n))) (((commutative_plus) (O)) (n)))) (((times) (m)) (O))) ((times_n_O) (m)))) (((times) (O)) (m))) (((commutative_times) (O)) (m)))).
definition mod_O_n : \forall n : nat. (((eq) (nat)) (((mod) (O)) (n))) (O) := \lambda n : nat. ((((sym_eq) (nat)) (O)) (((mod) (O)) (n))) (((((eq_coerc) ((((eq) (nat)) (O)) (((mod) (O)) (n)))) ((((eq) (nat)) (O)) (((mod) (O)) (n)))) (((le_n_O_to_eq) (((mod) (O)) (n))) (((((eq_coerc) (((le) (((minus) (((plus) (((mod) (O)) (n))) (((times) (n)) (((div) (O)) (n))))) (((plus) (O)) (((times) (n)) (((div) (O)) (n)))))) (((plus) (((mod) (O)) (n))) (((times) (n)) (((div) (O)) (n)))))) (((le) (((mod) (O)) (n))) (O))) (((minus_le) (((plus) (((mod) (O)) (n))) (((times) (n)) (((div) (O)) (n))))) (((plus) (O)) (((times) (n)) (((div) (O)) (n)))))) (((((((rewrite_r) (nat)) (((minus) (((mod) (O)) (n))) (O))) (\lambda Joker_ : nat. (((eq) Prop) (((le) (Joker_)) (((plus) (((mod) (O)) (n))) (((times) (n)) (((div) (O)) (n)))))) (((le) (((mod) (O)) (n))) (O)))) (((((((rewrite_l) (nat)) (((mod) (O)) (n))) (\lambda Joker_ : nat. (((eq) Prop) (((le) (Joker_)) (((plus) (((mod) (O)) (n))) (((times) (n)) (((div) (O)) (n)))))) (((le) (((mod) (O)) (n))) (O)))) (((((((rewrite_l) (nat)) (O)) (\lambda Joker_ : nat. (((eq) Prop) (((le) (((mod) (O)) (n))) (Joker_))) (((le) (((mod) (O)) (n))) (O)))) (((refl) Prop) (((le) (((mod) (O)) (n))) (O)))) (((plus) (((mod) (O)) (n))) (((times) (n)) (((div) (O)) (n))))) (((((((rewrite_l) (nat)) (((plus) (((times) (n)) (((div) (O)) (n)))) (((mod) (O)) (n)))) (\lambda Joker_ : nat. (((eq) (nat)) (O)) (Joker_))) (((((((rewrite_l) (nat)) (((times) (((div) (O)) (n))) (n))) (\lambda Joker_ : nat. (((eq) (nat)) (O)) (((plus) (Joker_)) (((mod) (O)) (n))))) (((div_mod) (O)) (n))) (((times) (n)) (((div) (O)) (n)))) (((commutative_times) (((div) (O)) (n))) (n)))) (((plus) (((mod) (O)) (n))) (((times) (n)) (((div) (O)) (n))))) (((commutative_plus) (((times) (n)) (((div) (O)) (n)))) (((mod) (O)) (n)))))) (((minus) (((mod) (O)) (n))) (O))) ((minus_n_O) (((mod) (O)) (n))))) (((minus) (((plus) (((mod) (O)) (n))) (((times) (n)) (((div) (O)) (n))))) (((plus) (O)) (((times) (n)) (((div) (O)) (n)))))) ((((minus_plus_plus_l) (((mod) (O)) (n))) (O)) (((times) (n)) (((div) (O)) (n)))))))) (((refl) Prop) ((((eq) (nat)) (O)) (((mod) (O)) (n))))).
definition sameF_upto : \forall A : Type[0]. (nat) \to ((nat) \to A) \to ((nat) \to A) \to Prop := \lambda A : Type[0]. \lambda k : nat. \lambda f : (nat) \to A. \lambda g : (nat) \to A. \forall i : nat. (((lt) (i)) (k)) \to (((eq) (A)) ((f) (i))) ((g) (i)).
definition sameF_p : \forall A : Type[0]. (nat) \to ((nat) \to bool) \to ((nat) \to A) \to ((nat) \to A) \to Prop := \lambda A : Type[0]. \lambda k : nat. \lambda p : (nat) \to bool. \lambda f : (nat) \to A. \lambda g : (nat) \to A. \forall i : nat. (((lt) (i)) (k)) \to ((((eq) (bool)) ((p) (i))) (true)) \to (((eq) (A)) ((f) (i))) ((g) (i)).
definition sameF_upto_le : \forall A : Type[0]. \forall f : (nat) \to A. \forall g : (nat) \to A. \forall n : nat. \forall m : nat. (((le) (n)) (m)) \to (((((sameF_upto) (A)) (m)) (f)) (g)) \to ((((sameF_upto) (A)) (n)) (f)) (g) := \lambda A : Type[0]. \lambda f : (nat) \to A. \lambda g : (nat) \to A. \lambda n : nat. \lambda m : nat. \lambda lenm : ((le) (n)) (m). \lambda samef : ((((sameF_upto) (A)) (m)) (f)) (g). \lambda i : nat. \lambda ltin : ((lt) (i)) (n). ((samef) (i)) ((((((lt_to_le_to_lt) (i)) (n)) (m)) (ltin)) (lenm)).
definition sameF_p_le : \forall A : Type[0]. \forall p : (nat) \to bool. \forall f : (nat) \to A. \forall g : (nat) \to A. \forall n : nat. \forall m : nat. (((le) (n)) (m)) \to ((((((sameF_p) (A)) (m)) (p)) (f)) (g)) \to (((((sameF_p) (A)) (n)) (p)) (f)) (g) := \lambda A : Type[0]. \lambda p : (nat) \to bool. \lambda f : (nat) \to A. \lambda g : (nat) \to A. \lambda n : nat. \lambda m : nat. \lambda lenm : ((le) (n)) (m). \lambda samef : (((((sameF_p) (A)) (m)) (p)) (f)) (g). \lambda i : nat. \lambda ltin : ((lt) (i)) (n). \lambda pi : (((eq) (bool)) ((p) (i))) (true). (((samef) (i)) ((((((lt_to_le_to_lt) (i)) (n)) (m)) (ltin)) (lenm))) (((((((rewrite_r) (bool)) (true)) (\lambda Joker_ : bool. (((eq) (bool)) (Joker_)) (true))) (((refl) (bool)) (true))) ((p) (i))) (pi)).
axiom bigop : \forall H : Type[0]. (nat) \to ((nat) \to bool) \to (H) \to ((H) \to (H) \to H) \to ((nat) \to H) \to H.
axiom bigop_body : \forall H : Type[0]. (nat) \to ((nat) \to bool) \to (H) \to ((H) \to (H) \to H) \to ((nat) \to H) \to H.
axiom eq_bigop_O : \forall H : Type[0]. (((leibniz) (((nat) \to bool) \to (H) \to ((H) \to (H) \to H) \to ((nat) \to H) \to H)) (((bigop) (H)) (O))) (((bigop_body) (H)) (O)).
definition sym_eq_bigop_O : \forall H : Type[0]. (((leibniz) (((nat) \to bool) \to (H) \to ((H) \to (H) \to H) \to ((nat) \to H) \to H)) (((bigop_body) (H)) (O))) (((bigop) (H)) (O)) := \lambda H : Type[0]. ((((sym_leibniz) (((nat) \to bool) \to (H) \to ((H) \to (H) \to H) \to ((nat) \to H) \to H)) (((bigop) (H)) (O))) (((bigop_body) (H)) (O))) ((eq_bigop_O) (H)).
axiom eq_bigop_S : \forall H : Type[0]. \forall n : nat. (((leibniz) (((nat) \to bool) \to (H) \to ((H) \to (H) \to H) \to ((nat) \to H) \to H)) (((bigop) (H)) ((S) (n)))) (((bigop_body) (H)) ((S) (n))).
definition sym_eq_bigop_S : \forall H : Type[0]. \forall n : nat. (((leibniz) (((nat) \to bool) \to (H) \to ((H) \to (H) \to H) \to ((nat) \to H) \to H)) (((bigop_body) (H)) ((S) (n)))) (((bigop) (H)) ((S) (n))) := \lambda H : Type[0]. \lambda n : nat. ((((sym_leibniz) (((nat) \to bool) \to (H) \to ((H) \to (H) \to H) \to ((nat) \to H) \to H)) (((bigop) (H)) ((S) (n)))) (((bigop_body) (H)) ((S) (n)))) (((eq_bigop_S) (H)) (n)).
axiom eq_bigop_body_O : \forall H : Type[0]. (((leibniz) (((nat) \to bool) \to (H) \to ((H) \to (H) \to H) \to ((nat) \to H) \to H)) (((bigop_body) (H)) (O))) (\lambda p : (nat) \to bool. \lambda nil : H. \lambda op : (H) \to (H) \to H. \lambda f : (nat) \to H. nil).
definition sym_eq_bigop_body_O : \forall H : Type[0]. (((leibniz) (((nat) \to bool) \to (H) \to ((H) \to (H) \to H) \to ((nat) \to H) \to H)) (\lambda p : (nat) \to bool. \lambda nil : H. \lambda op : (H) \to (H) \to H. \lambda f : (nat) \to H. nil)) (((bigop_body) (H)) (O)) := \lambda H : Type[0]. ((((sym_leibniz) (((nat) \to bool) \to (H) \to ((H) \to (H) \to H) \to ((nat) \to H) \to H)) (((bigop_body) (H)) (O))) (\lambda p : (nat) \to bool. \lambda nil : H. \lambda op : (H) \to (H) \to H. \lambda f : (nat) \to H. nil)) ((eq_bigop_body_O) (H)).
axiom eq_bigop_body_S : \forall H : Type[0]. \forall n : nat. (((leibniz) (((nat) \to bool) \to (H) \to ((H) \to (H) \to H) \to ((nat) \to H) \to H)) (((bigop_body) (H)) ((S) (n)))) (\lambda p : (nat) \to bool. \lambda nil : H. \lambda op : (H) \to (H) \to H. \lambda f : (nat) \to H. ((((match_bool_type) (H)) (((op) ((f) (n))) (((((((bigop) (H)) (n)) (p)) (nil)) (op)) (f)))) (((((((bigop) (H)) (n)) (p)) (nil)) (op)) (f))) ((p) (n))).
definition sym_eq_bigop_body_S : \forall H : Type[0]. \forall n : nat. (((leibniz) (((nat) \to bool) \to (H) \to ((H) \to (H) \to H) \to ((nat) \to H) \to H)) (\lambda p : (nat) \to bool. \lambda nil : H. \lambda op : (H) \to (H) \to H. \lambda f : (nat) \to H. ((((match_bool_type) (H)) (((op) ((f) (n))) (((((((bigop) (H)) (n)) (p)) (nil)) (op)) (f)))) (((((((bigop) (H)) (n)) (p)) (nil)) (op)) (f))) ((p) (n)))) (((bigop_body) (H)) ((S) (n))) := \lambda H : Type[0]. \lambda n : nat. ((((sym_leibniz) (((nat) \to bool) \to (H) \to ((H) \to (H) \to H) \to ((nat) \to H) \to H)) (((bigop_body) (H)) ((S) (n)))) (\lambda p : (nat) \to bool. \lambda nil : H. \lambda op : (H) \to (H) \to H. \lambda f : (nat) \to H. ((((match_bool_type) (H)) (((op) ((f) (n))) (((((((bigop) (H)) (n)) (p)) (nil)) (op)) (f)))) (((((((bigop) (H)) (n)) (p)) (nil)) (op)) (f))) ((p) (n)))) (((eq_bigop_body_S) (H)) (n)).
definition bigop_Strue : \forall B : Type[0]. \forall k : nat. \forall p : (nat) \to bool. \forall nil : B. \forall op : (B) \to (B) \to B. \forall f : (nat) \to B. ((((eq) (bool)) ((p) (k))) (true)) \to (((eq) (B)) (((((((bigop) (B)) ((S) (k))) (\lambda i : nat. (p) (i))) (nil)) (op)) (\lambda i : nat. (f) (i)))) (((op) ((f) (k))) (((((((bigop) (B)) (k)) (\lambda i : nat. (p) (i))) (nil)) (op)) (\lambda i : nat. (f) (i)))) := \lambda B : Type[0]. \lambda k : nat. \lambda p : (nat) \to bool. \lambda nil : B. \lambda op : (B) \to (B) \to B. \lambda f : (nat) \to B. ((((sym_eq_bigop_S) (B)) (k)) (\lambda y : ((nat) \to bool) \to (B) \to ((B) \to (B) \to B) \to ((nat) \to B) \to B. ((((eq) (bool)) ((p) (k))) (true)) \to (((eq) (B)) (((((y) (\lambda i : nat. (p) (i))) (nil)) (op)) (\lambda i : nat. (f) (i)))) (((op) ((f) (k))) (((((((bigop) (B)) (k)) (\lambda i : nat. (p) (i))) (nil)) (op)) (\lambda i : nat. (f) (i)))))) (((((sym_eq_bigop_body_S) (B)) (k)) (\lambda y : ((nat) \to bool) \to (B) \to ((B) \to (B) \to B) \to ((nat) \to B) \to B. ((((eq) (bool)) ((p) (k))) (true)) \to (((eq) (B)) (((((y) (\lambda i : nat. (p) (i))) (nil)) (op)) (\lambda i : nat. (f) (i)))) (((op) ((f) (k))) (((((((bigop) (B)) (k)) (\lambda i : nat. (p) (i))) (nil)) (op)) (\lambda i : nat. (f) (i)))))) (\lambda H : (((eq) (bool)) ((p) (k))) (true). ((((((eq_ind_r) (bool)) (true)) (\lambda x : bool. (((eq) (B)) (((((match_bool_type) (B)) (((op) ((f) (k))) (((((((bigop) (B)) (k)) (\lambda i : nat. (p) (i))) (nil)) (op)) (\lambda i : nat. (f) (i))))) (((((((bigop) (B)) (k)) (\lambda i : nat. (p) (i))) (nil)) (op)) (\lambda i : nat. (f) (i)))) (x))) (((op) ((f) (k))) (((((((bigop) (B)) (k)) (\lambda i : nat. (p) (i))) (nil)) (op)) (\lambda i : nat. (f) (i)))))) ((((((eq_match_bool_type_true) (B)) (((op) ((f) (k))) (((((((bigop) (B)) (k)) (\lambda i : nat. (p) (i))) (nil)) (op)) (\lambda i : nat. (f) (i))))) (((((((bigop) (B)) (k)) (\lambda i : nat. (p) (i))) (nil)) (op)) (\lambda i : nat. (f) (i)))) (\lambda y : B. (((eq) (B)) (((((match_bool_type) (B)) (((op) ((f) (k))) (((((((bigop) (B)) (k)) (\lambda i : nat. (p) (i))) (nil)) (op)) (\lambda i : nat. (f) (i))))) (((((((bigop) (B)) (k)) (\lambda i : nat. (p) (i))) (nil)) (op)) (\lambda i : nat. (f) (i)))) (true))) (y))) (((refl) (B)) (((((match_bool_type) (B)) (((op) ((f) (k))) (((((((bigop) (B)) (k)) (\lambda i : nat. (p) (i))) (nil)) (op)) (\lambda i : nat. (f) (i))))) (((((((bigop) (B)) (k)) (\lambda i : nat. (p) (i))) (nil)) (op)) (\lambda i : nat. (f) (i)))) (true))))) ((p) (k))) (H))).
definition bigop_Sfalse : \forall B : Type[0]. \forall k : nat. \forall p : (nat) \to bool. \forall nil : B. \forall op : (B) \to (B) \to B. \forall f : (nat) \to B. ((((eq) (bool)) ((p) (k))) (false)) \to (((eq) (B)) (((((((bigop) (B)) ((S) (k))) (\lambda i : nat. (p) (i))) (nil)) (op)) (\lambda i : nat. (f) (i)))) (((((((bigop) (B)) (k)) (\lambda i : nat. (p) (i))) (nil)) (op)) (\lambda i : nat. (f) (i))) := \lambda B : Type[0]. \lambda k : nat. \lambda p : (nat) \to bool. \lambda nil : B. \lambda op : (B) \to (B) \to B. \lambda f : (nat) \to B. ((((sym_eq_bigop_S) (B)) (k)) (\lambda y : ((nat) \to bool) \to (B) \to ((B) \to (B) \to B) \to ((nat) \to B) \to B. ((((eq) (bool)) ((p) (k))) (false)) \to (((eq) (B)) (((((y) (\lambda i : nat. (p) (i))) (nil)) (op)) (\lambda i : nat. (f) (i)))) (((((((bigop) (B)) (k)) (\lambda i : nat. (p) (i))) (nil)) (op)) (\lambda i : nat. (f) (i))))) (((((sym_eq_bigop_body_S) (B)) (k)) (\lambda y : ((nat) \to bool) \to (B) \to ((B) \to (B) \to B) \to ((nat) \to B) \to B. ((((eq) (bool)) ((p) (k))) (false)) \to (((eq) (B)) (((((y) (\lambda i : nat. (p) (i))) (nil)) (op)) (\lambda i : nat. (f) (i)))) (((((((bigop) (B)) (k)) (\lambda i : nat. (p) (i))) (nil)) (op)) (\lambda i : nat. (f) (i))))) (\lambda H : (((eq) (bool)) ((p) (k))) (false). ((((((eq_ind_r) (bool)) (false)) (\lambda x : bool. (((eq) (B)) (((((match_bool_type) (B)) (((op) ((f) (k))) (((((((bigop) (B)) (k)) (\lambda i : nat. (p) (i))) (nil)) (op)) (\lambda i : nat. (f) (i))))) (((((((bigop) (B)) (k)) (\lambda i : nat. (p) (i))) (nil)) (op)) (\lambda i : nat. (f) (i)))) (x))) (((((((bigop) (B)) (k)) (\lambda i : nat. (p) (i))) (nil)) (op)) (\lambda i : nat. (f) (i))))) ((((((eq_match_bool_type_false) (B)) (((op) ((f) (k))) (((((((bigop) (B)) (k)) (\lambda i : nat. (p) (i))) (nil)) (op)) (\lambda i : nat. (f) (i))))) (((((((bigop) (B)) (k)) (\lambda i : nat. (p) (i))) (nil)) (op)) (\lambda i : nat. (f) (i)))) (\lambda y : B. (((eq) (B)) (((((match_bool_type) (B)) (((op) ((f) (k))) (((((((bigop) (B)) (k)) (\lambda i : nat. (p) (i))) (nil)) (op)) (\lambda i : nat. (f) (i))))) (((((((bigop) (B)) (k)) (\lambda i : nat. (p) (i))) (nil)) (op)) (\lambda i : nat. (f) (i)))) (false))) (y))) (((refl) (B)) (((((match_bool_type) (B)) (((op) ((f) (k))) (((((((bigop) (B)) (k)) (\lambda i : nat. (p) (i))) (nil)) (op)) (\lambda i : nat. (f) (i))))) (((((((bigop) (B)) (k)) (\lambda i : nat. (p) (i))) (nil)) (op)) (\lambda i : nat. (f) (i)))) (false))))) ((p) (k))) (H))).
definition same_bigop : \forall B : Type[0]. \forall k : nat. \forall p1 : (nat) \to bool. \forall p2 : (nat) \to bool. \forall nil : B. \forall op : (B) \to (B) \to B. \forall f : (nat) \to B. \forall g : (nat) \to B. (((((sameF_upto) (bool)) (k)) (p1)) (p2)) \to ((((((sameF_p) (B)) (k)) (p1)) (f)) (g)) \to (((eq) (B)) (((((((bigop) (B)) (k)) (\lambda i : nat. (p1) (i))) (nil)) (op)) (\lambda i : nat. (f) (i)))) (((((((bigop) (B)) (k)) (\lambda i : nat. (p2) (i))) (nil)) (op)) (\lambda i : nat. (g) (i))) := \lambda B : Type[0]. \lambda k : nat. \lambda p1 : (nat) \to bool. \lambda p2 : (nat) \to bool. \lambda nil : B. \lambda op : (B) \to (B) \to B. \lambda f : (nat) \to B. \lambda g : (nat) \to B. ((((nat_ind) (\lambda Jokerx_365 : nat. (((((sameF_upto) (bool)) (Jokerx_365)) (p1)) (p2)) \to ((((((sameF_p) (B)) (Jokerx_365)) (p1)) (f)) (g)) \to (((eq) (B)) (((((((bigop) (B)) (Jokerx_365)) (\lambda i : nat. (p1) (i))) (nil)) (op)) (\lambda i : nat. (f) (i)))) (((((((bigop) (B)) (Jokerx_365)) (\lambda i : nat. (p2) (i))) (nil)) (op)) (\lambda i : nat. (g) (i))))) ((((sym_eq_bigop_O) (B)) (\lambda y : ((nat) \to bool) \to (B) \to ((B) \to (B) \to B) \to ((nat) \to B) \to B. (((((sameF_upto) (bool)) (O)) (p1)) (p2)) \to ((((((sameF_p) (B)) (O)) (p1)) (f)) (g)) \to (((eq) (B)) (((((((bigop) (B)) (O)) (\lambda i : nat. (p1) (i))) (nil)) (op)) (\lambda i : nat. (f) (i)))) (((((y) (\lambda i : nat. (p2) (i))) (nil)) (op)) (\lambda i : nat. (g) (i))))) ((((sym_eq_bigop_body_O) (B)) (\lambda y : ((nat) \to bool) \to (B) \to ((B) \to (B) \to B) \to ((nat) \to B) \to B. (((((sameF_upto) (bool)) (O)) (p1)) (p2)) \to ((((((sameF_p) (B)) (O)) (p1)) (f)) (g)) \to (((eq) (B)) (((((((bigop) (B)) (O)) (\lambda i : nat. (p1) (i))) (nil)) (op)) (\lambda i : nat. (f) (i)))) (((((y) (\lambda i : nat. (p2) (i))) (nil)) (op)) (\lambda i : nat. (g) (i))))) ((((eq_bigop_body_O) (B)) (\lambda y : ((nat) \to bool) \to (B) \to ((B) \to (B) \to B) \to ((nat) \to B) \to B. (((((sameF_upto) (bool)) (O)) (p1)) (p2)) \to ((((((sameF_p) (B)) (O)) (p1)) (f)) (g)) \to (((eq) (B)) (((((((bigop) (B)) (O)) (\lambda i : nat. (p1) (i))) (nil)) (op)) (\lambda i : nat. (f) (i)))) (((((y) (\lambda i : nat. (p1) (i))) (nil)) (op)) (\lambda i : nat. (f) (i))))) ((((eq_bigop_O) (B)) (\lambda y : ((nat) \to bool) \to (B) \to ((B) \to (B) \to B) \to ((nat) \to B) \to B. (((((sameF_upto) (bool)) (O)) (p1)) (p2)) \to ((((((sameF_p) (B)) (O)) (p1)) (f)) (g)) \to (((eq) (B)) (((((((bigop) (B)) (O)) (\lambda i : nat. (p1) (i))) (nil)) (op)) (\lambda i : nat. (f) (i)))) (((((y) (\lambda i : nat. (p1) (i))) (nil)) (op)) (\lambda i : nat. (f) (i))))) (\lambda auto : ((((sameF_upto) (bool)) (O)) (p1)) (p2). \lambda auto' : (((((sameF_p) (B)) (O)) (p1)) (f)) (g). ((refl) (B)) (((((((bigop) (B)) (O)) (\lambda i : nat. (p1) (i))) (nil)) (op)) (\lambda i : nat. (f) (i))))))))) (\lambda n : nat. ((((sym_eq_bigop_S) (B)) (n)) (\lambda y : ((nat) \to bool) \to (B) \to ((B) \to (B) \to B) \to ((nat) \to B) \to B. ((((((sameF_upto) (bool)) (n)) (p1)) (p2)) \to ((((((sameF_p) (B)) (n)) (p1)) (f)) (g)) \to (((eq) (B)) (((((((bigop) (B)) (n)) (\lambda i : nat. (p1) (i))) (nil)) (op)) (\lambda i : nat. (f) (i)))) (((((((bigop) (B)) (n)) (\lambda i : nat. (p2) (i))) (nil)) (op)) (\lambda i : nat. (g) (i)))) \to (((((sameF_upto) (bool)) ((S) (n))) (p1)) (p2)) \to ((((((sameF_p) (B)) ((S) (n))) (p1)) (f)) (g)) \to (((eq) (B)) (((((((bigop) (B)) ((S) (n))) (\lambda i : nat. (p1) (i))) (nil)) (op)) (\lambda i : nat. (f) (i)))) (((((y) (\lambda i : nat. (p2) (i))) (nil)) (op)) (\lambda i : nat. (g) (i))))) (((((sym_eq_bigop_S) (B)) (n)) (\lambda y : ((nat) \to bool) \to (B) \to ((B) \to (B) \to B) \to ((nat) \to B) \to B. ((((((sameF_upto) (bool)) (n)) (p1)) (p2)) \to ((((((sameF_p) (B)) (n)) (p1)) (f)) (g)) \to (((eq) (B)) (((((((bigop) (B)) (n)) (\lambda i : nat. (p1) (i))) (nil)) (op)) (\lambda i : nat. (f) (i)))) (((((((bigop) (B)) (n)) (\lambda i : nat. (p2) (i))) (nil)) (op)) (\lambda i : nat. (g) (i)))) \to (((((sameF_upto) (bool)) ((S) (n))) (p1)) (p2)) \to ((((((sameF_p) (B)) ((S) (n))) (p1)) (f)) (g)) \to (((eq) (B)) (((((y) (\lambda i : nat. (p1) (i))) (nil)) (op)) (\lambda i : nat. (f) (i)))) (((((((bigop_body) (B)) ((S) (n))) (\lambda i : nat. (p2) (i))) (nil)) (op)) (\lambda i : nat. (g) (i))))) (((((sym_eq_bigop_body_S) (B)) (n)) (\lambda y : ((nat) \to bool) \to (B) \to ((B) \to (B) \to B) \to ((nat) \to B) \to B. ((((((sameF_upto) (bool)) (n)) (p1)) (p2)) \to ((((((sameF_p) (B)) (n)) (p1)) (f)) (g)) \to (((eq) (B)) (((((((bigop) (B)) (n)) (\lambda i : nat. (p1) (i))) (nil)) (op)) (\lambda i : nat. (f) (i)))) (((((((bigop) (B)) (n)) (\lambda i : nat. (p2) (i))) (nil)) (op)) (\lambda i : nat. (g) (i)))) \to (((((sameF_upto) (bool)) ((S) (n))) (p1)) (p2)) \to ((((((sameF_p) (B)) ((S) (n))) (p1)) (f)) (g)) \to (((eq) (B)) (((((y) (\lambda i : nat. (p1) (i))) (nil)) (op)) (\lambda i : nat. (f) (i)))) (((((((bigop_body) (B)) ((S) (n))) (\lambda i : nat. (p2) (i))) (nil)) (op)) (\lambda i : nat. (g) (i))))) (((((sym_eq_bigop_body_S) (B)) (n)) (\lambda y : ((nat) \to bool) \to (B) \to ((B) \to (B) \to B) \to ((nat) \to B) \to B. ((((((sameF_upto) (bool)) (n)) (p1)) (p2)) \to ((((((sameF_p) (B)) (n)) (p1)) (f)) (g)) \to (((eq) (B)) (((((((bigop) (B)) (n)) (\lambda i : nat. (p1) (i))) (nil)) (op)) (\lambda i : nat. (f) (i)))) (((((((bigop) (B)) (n)) (\lambda i : nat. (p2) (i))) (nil)) (op)) (\lambda i : nat. (g) (i)))) \to (((((sameF_upto) (bool)) ((S) (n))) (p1)) (p2)) \to ((((((sameF_p) (B)) ((S) (n))) (p1)) (f)) (g)) \to (((eq) (B)) (((((\lambda p : (nat) \to bool. \lambda nil0 : B. \lambda op0 : (B) \to (B) \to B. \lambda f0 : (nat) \to B. ((((match_bool_type) (B)) (((op0) ((f0) (n))) (((((((bigop) (B)) (n)) (p)) (nil0)) (op0)) (f0)))) (((((((bigop) (B)) (n)) (p)) (nil0)) (op0)) (f0))) ((p) (n))) (\lambda i : nat. (p1) (i))) (nil)) (op)) (\lambda i : nat. (f) (i)))) (((((y) (\lambda i : nat. (p2) (i))) (nil)) (op)) (\lambda i : nat. (g) (i))))) (\lambda Hind : (((((sameF_upto) (bool)) (n)) (p1)) (p2)) \to ((((((sameF_p) (B)) (n)) (p1)) (f)) (g)) \to (((eq) (B)) (((((((bigop) (B)) (n)) (\lambda i : nat. (p1) (i))) (nil)) (op)) (\lambda i : nat. (f) (i)))) (((((((bigop) (B)) (n)) (\lambda i : nat. (p2) (i))) (nil)) (op)) (\lambda i : nat. (g) (i))). \lambda samep : ((((sameF_upto) (bool)) ((S) (n))) (p1)) (p2). \lambda samef : (((((sameF_p) (B)) ((S) (n))) (p1)) (f)) (g). ((((((eq_ind_r) (B)) (((((((bigop) (B)) (n)) (\lambda i : nat. (p2) (i))) (nil)) (op)) (\lambda i : nat. (g) (i)))) (\lambda x : B. (((eq) (B)) (((((match_bool_type) (B)) (((op) ((f) (n))) (x))) (x)) ((p1) (n)))) (((((match_bool_type) (B)) (((op) ((g) (n))) (((((((bigop) (B)) (n)) (\lambda i : nat. (p2) (i))) (nil)) (op)) (\lambda i : nat. (g) (i))))) (((((((bigop) (B)) (n)) (\lambda i : nat. (p2) (i))) (nil)) (op)) (\lambda i : nat. (g) (i)))) ((p2) (n))))) (((((((eq_ind) (bool)) ((p1) (n))) (\lambda x_1 : bool. (((eq) (B)) (((((match_bool_type) (B)) (((op) ((f) (n))) (((((((bigop) (B)) (n)) (\lambda i : nat. (p2) (i))) (nil)) (op)) (\lambda i : nat. (g) (i))))) (((((((bigop) (B)) (n)) (\lambda i : nat. (p2) (i))) (nil)) (op)) (\lambda i : nat. (g) (i)))) ((p1) (n)))) (((((match_bool_type) (B)) (((op) ((g) (n))) (((((((bigop) (B)) (n)) (\lambda i : nat. (p2) (i))) (nil)) (op)) (\lambda i : nat. (g) (i))))) (((((((bigop) (B)) (n)) (\lambda i : nat. (p2) (i))) (nil)) (op)) (\lambda i : nat. (g) (i)))) (x_1)))) (((((((match_Or_prop) ((((eq) (bool)) ((p1) (n))) (true))) ((((eq) (bool)) ((p1) (n))) (false))) ((((eq) (B)) (((((match_bool_type) (B)) (((op) ((f) (n))) (((((((bigop) (B)) (n)) (\lambda i : nat. (p2) (i))) (nil)) (op)) (\lambda i : nat. (g) (i))))) (((((((bigop) (B)) (n)) (\lambda i : nat. (p2) (i))) (nil)) (op)) (\lambda i : nat. (g) (i)))) ((p1) (n)))) (((((match_bool_type) (B)) (((op) ((g) (n))) (((((((bigop) (B)) (n)) (\lambda i : nat. (p2) (i))) (nil)) (op)) (\lambda i : nat. (g) (i))))) (((((((bigop) (B)) (n)) (\lambda i : nat. (p2) (i))) (nil)) (op)) (\lambda i : nat. (g) (i)))) ((p1) (n))))) (\lambda H1 : (((eq) (bool)) ((p1) (n))) (true). ((((((eq_ind_r) (bool)) (true)) (\lambda x : bool. (((eq) (B)) (((((match_bool_type) (B)) (((op) ((f) (n))) (((((((bigop) (B)) (n)) (\lambda i : nat. (p2) (i))) (nil)) (op)) (\lambda i : nat. (g) (i))))) (((((((bigop) (B)) (n)) (\lambda i : nat. (p2) (i))) (nil)) (op)) (\lambda i : nat. (g) (i)))) (x))) (((((match_bool_type) (B)) (((op) ((g) (n))) (((((((bigop) (B)) (n)) (\lambda i : nat. (p2) (i))) (nil)) (op)) (\lambda i : nat. (g) (i))))) (((((((bigop) (B)) (n)) (\lambda i : nat. (p2) (i))) (nil)) (op)) (\lambda i : nat. (g) (i)))) (x)))) ((((((sym_eq_match_bool_type_true) (B)) (((op) ((f) (n))) (((((((bigop) (B)) (n)) (\lambda i : nat. (p2) (i))) (nil)) (op)) (\lambda i : nat. (g) (i))))) (((((((bigop) (B)) (n)) (\lambda i : nat. (p2) (i))) (nil)) (op)) (\lambda i : nat. (g) (i)))) (\lambda y : B. (((eq) (B)) (y)) (((((match_bool_type) (B)) (((op) ((g) (n))) (((((((bigop) (B)) (n)) (\lambda i : nat. (p2) (i))) (nil)) (op)) (\lambda i : nat. (g) (i))))) (((((((bigop) (B)) (n)) (\lambda i : nat. (p2) (i))) (nil)) (op)) (\lambda i : nat. (g) (i)))) (true)))) ((((((sym_eq_match_bool_type_true) (B)) (((op) ((g) (n))) (((((((bigop) (B)) (n)) (\lambda i : nat. (p2) (i))) (nil)) (op)) (\lambda i : nat. (g) (i))))) (((((((bigop) (B)) (n)) (\lambda i : nat. (p2) (i))) (nil)) (op)) (\lambda i : nat. (g) (i)))) (\lambda y : B. (((eq) (B)) (((op) ((f) (n))) (((((((bigop) (B)) (n)) (\lambda i : nat. (p2) (i))) (nil)) (op)) (\lambda i : nat. (g) (i))))) (y))) (((((((eq_ind) (B)) ((f) (n))) (\lambda x_1 : B. (((eq) (B)) (((op) ((f) (n))) (((((((bigop) (B)) (n)) (\lambda i : nat. (p2) (i))) (nil)) (op)) (\lambda i : nat. (g) (i))))) (((op) (x_1)) (((((((bigop) (B)) (n)) (\lambda i : nat. (p2) (i))) (nil)) (op)) (\lambda i : nat. (g) (i)))))) (((refl) (B)) (((op) ((f) (n))) (((((((bigop) (B)) (n)) (\lambda i : nat. (p2) (i))) (nil)) (op)) (\lambda i : nat. (g) (i)))))) ((g) (n))) ((((samef) (n)) ((le_n) ((S) (n)))) (H1)))))) ((p1) (n))) (H1))) (\lambda H1 : (((eq) (bool)) ((p1) (n))) (false). ((((((eq_ind_r) (bool)) (false)) (\lambda x : bool. (((eq) (B)) (((((match_bool_type) (B)) (((op) ((f) (n))) (((((((bigop) (B)) (n)) (\lambda i : nat. (p2) (i))) (nil)) (op)) (\lambda i : nat. (g) (i))))) (((((((bigop) (B)) (n)) (\lambda i : nat. (p2) (i))) (nil)) (op)) (\lambda i : nat. (g) (i)))) (x))) (((((match_bool_type) (B)) (((op) ((g) (n))) (((((((bigop) (B)) (n)) (\lambda i : nat. (p2) (i))) (nil)) (op)) (\lambda i : nat. (g) (i))))) (((((((bigop) (B)) (n)) (\lambda i : nat. (p2) (i))) (nil)) (op)) (\lambda i : nat. (g) (i)))) (x)))) ((((((sym_eq_match_bool_type_false) (B)) (((op) ((f) (n))) (((((((bigop) (B)) (n)) (\lambda i : nat. (p2) (i))) (nil)) (op)) (\lambda i : nat. (g) (i))))) (((((((bigop) (B)) (n)) (\lambda i : nat. (p2) (i))) (nil)) (op)) (\lambda i : nat. (g) (i)))) (\lambda y : B. (((eq) (B)) (y)) (((((match_bool_type) (B)) (((op) ((g) (n))) (((((((bigop) (B)) (n)) (\lambda i : nat. (p2) (i))) (nil)) (op)) (\lambda i : nat. (g) (i))))) (((((((bigop) (B)) (n)) (\lambda i : nat. (p2) (i))) (nil)) (op)) (\lambda i : nat. (g) (i)))) (false)))) ((((((sym_eq_match_bool_type_false) (B)) (((op) ((g) (n))) (((((((bigop) (B)) (n)) (\lambda i : nat. (p2) (i))) (nil)) (op)) (\lambda i : nat. (g) (i))))) (((((((bigop) (B)) (n)) (\lambda i : nat. (p2) (i))) (nil)) (op)) (\lambda i : nat. (g) (i)))) (\lambda y : B. (((eq) (B)) (((((((bigop) (B)) (n)) (\lambda i : nat. (p2) (i))) (nil)) (op)) (\lambda i : nat. (g) (i)))) (y))) (((refl) (B)) (((((((bigop) (B)) (n)) (\lambda i : nat. (p2) (i))) (nil)) (op)) (\lambda i : nat. (g) (i))))))) ((p1) (n))) (H1))) ((true_or_false) ((p1) (n))))) ((p2) (n))) (((samep) (n)) ((le_n) ((S) (n)))))) (((((((bigop) (B)) (n)) (\lambda i : nat. (p1) (i))) (nil)) (op)) (\lambda i : nat. (f) (i)))) (((Hind) ((((((((sameF_upto_le) (bool)) (p1)) (p2)) (n)) ((S) (n))) (((((eq_coerc) (((le) ((pred) ((S) (n)))) ((S) (n)))) (((le) (n)) ((S) (n)))) ((le_pred_n) ((S) (n)))) (((((((rewrite_l) (nat)) (n)) (\lambda Joker_ : nat. (((eq) Prop) (((le) (Joker_)) ((S) (n)))) (((le) (n)) ((S) (n))))) (((refl) Prop) (((le) (n)) ((S) (n))))) ((pred) ((S) (n)))) ((pred_Sn) (n))))) (samep))) (((((((((sameF_p_le) (B)) (p1)) (f)) (g)) (n)) ((S) (n))) (((((eq_coerc) (((le) ((pred) ((S) (n)))) ((S) (n)))) (((le) (n)) ((S) (n)))) ((le_pred_n) ((S) (n)))) (((((((rewrite_l) (nat)) (n)) (\lambda Joker_ : nat. (((eq) Prop) (((le) (Joker_)) ((S) (n)))) (((le) (n)) ((S) (n))))) (((refl) Prop) (((le) (n)) ((S) (n))))) ((pred) ((S) (n)))) ((pred_Sn) (n))))) (samef))))))))) (k).
definition bigop_false : \forall B : Type[0]. \forall n : nat. \forall nil : B. \forall op : (B) \to (B) \to B. \forall f : (nat) \to B. (((eq) (B)) (((((((bigop) (B)) (n)) (\lambda i : nat. false)) (nil)) (op)) (\lambda i : nat. (f) (i)))) (nil) := \lambda B : Type[0]. \lambda n : nat. \lambda nil : B. \lambda op : (B) \to (B) \to B. \lambda f : (nat) \to B. ((((nat_ind) (\lambda Jokerx_365 : nat. (((eq) (B)) (((((((bigop) (B)) (Jokerx_365)) (\lambda i : nat. false)) (nil)) (op)) (\lambda i : nat. (f) (i)))) (nil))) ((((eq_bigop_body_O) (B)) (\lambda y : ((nat) \to bool) \to (B) \to ((B) \to (B) \to B) \to ((nat) \to B) \to B. (((eq) (B)) (((((((bigop) (B)) (O)) (\lambda i : nat. false)) (nil)) (op)) (\lambda i : nat. (f) (i)))) (((((y) (\lambda i : nat. false)) (nil)) (op)) (\lambda i : nat. (f) (i))))) ((((eq_bigop_O) (B)) (\lambda y : ((nat) \to bool) \to (B) \to ((B) \to (B) \to B) \to ((nat) \to B) \to B. (((eq) (B)) (((((((bigop) (B)) (O)) (\lambda i : nat. false)) (nil)) (op)) (\lambda i : nat. (f) (i)))) (((((y) (\lambda i : nat. false)) (nil)) (op)) (\lambda i : nat. (f) (i))))) (((refl) (B)) (((((((bigop) (B)) (O)) (\lambda i : nat. false)) (nil)) (op)) (\lambda i : nat. (f) (i))))))) (\lambda n1 : nat. \lambda Hind : (((eq) (B)) (((((((bigop) (B)) (n1)) (\lambda i : nat. false)) (nil)) (op)) (\lambda i : nat. (f) (i)))) (nil). ((((((eq_ind_r) (B)) (((((((bigop) (B)) (n1)) (\lambda i : nat. false)) (nil)) (op)) (\lambda i : nat. (f) (i)))) (\lambda x : B. (((eq) (B)) (x)) (nil))) (((((((rewrite_r) (B)) (nil)) (\lambda Joker_ : B. (((eq) (B)) (Joker_)) (nil))) (((refl) (B)) (nil))) (((((((bigop) (B)) (n1)) (\lambda i : nat. false)) (nil)) (op)) (\lambda i : nat. (f) (i)))) (Hind))) (((((((bigop) (B)) ((S) (n1))) (\lambda i : nat. false)) (nil)) (op)) (\lambda i : nat. (f) (i)))) ((((((((bigop_Sfalse) (B)) (n1)) (\lambda Joker_ : nat. false)) (nil)) (op)) (f)) (((refl) (bool)) (false))))) (n).
axiom Aop : \forall A : Type[0]. (A) \to Prop.
axiom mk_Aop : \forall A : Type[0]. \forall nil : A. \forall op : (A) \to (A) \to A. (\forall a : A. (((eq) (A)) (((op) (nil)) (a))) (a)) \to (\forall a : A. (((eq) (A)) (((op) (a)) (nil))) (a)) \to (\forall a : A. \forall b : A. \forall c : A. (((eq) (A)) (((op) (a)) (((op) (b)) (c)))) (((op) (((op) (a)) (b))) (c))) \to ((Aop) (A)) (nil).
definition assoc : \forall a : nat. \forall b : nat. \forall c : nat. (((eq) (nat)) (((times) (a)) (((times) (b)) (c)))) (((times) (((times) (a)) (b))) (c)) := \lambda a : nat. \lambda b : nat. \lambda c : nat. ((((sym_eq) (nat)) (((times) (((times) (a)) (b))) (c))) (((times) (a)) (((times) (b)) (c)))) ((((associative_times) (a)) (b)) (c)).
definition timesA : ((Aop) (nat)) ((S) (O)) := ((((((mk_Aop) (nat)) ((S) (O))) (times)) (\lambda a : nat. (((sym_eq_times) ((S) (O))) (\lambda y : (nat) \to nat. (((eq) (nat)) ((y) (a))) (a))) ((((((sym_eq_filter_nat_type_S) ((nat) \to nat)) (times_body)) (O)) (\lambda y : (nat) \to nat. (((eq) (nat)) ((y) (a))) (a))) ((((sym_eq_times_body_S) (O)) (\lambda y : (nat) \to nat. (((eq) (nat)) ((y) (a))) (a))) ((((sym_eq_times) (O)) (\lambda y : (nat) \to nat. (((eq) (nat)) (((plus) (a)) ((y) (a)))) (a))) (((((sym_eq_filter_nat_type_O) ((nat) \to nat)) (times_body)) (\lambda y : (nat) \to nat. (((eq) (nat)) (((plus) (a)) ((y) (a)))) (a))) (((sym_eq_times_body_O) (\lambda y : (nat) \to nat. (((eq) (nat)) (((plus) (a)) ((y) (a)))) (a))) (((((sym_eq) (nat)) (a)) (((plus) (a)) (O))) ((plus_n_O) (a)))))))))) (\lambda n : nat. ((((sym_eq) (nat)) (n)) (((times) (n)) ((S) (O)))) ((times_n_1) (n)))) (\lambda a : nat. \lambda b : nat. \lambda c : nat. ((((sym_eq) (nat)) (((times) (((times) (a)) (b))) (c))) (((times) (a)) (((times) (b)) (c)))) ((((associative_times) (a)) (b)) (c))).
definition bigop_I_gen : \forall a : nat. \forall b : nat. \forall p : (nat) \to bool. \forall f : (nat) \to nat. (((le) (a)) (b)) \to (((eq) (nat)) (((((((bigop) (nat)) (((minus) (b)) (a))) (\lambda i : nat. (p) (((plus) (i)) (a)))) ((S) (O))) (times)) (\lambda i : nat. (f) (((plus) (i)) (a))))) (((((((bigop) (nat)) (b)) (\lambda i : nat. ((andb) (((leb) (a)) (i))) ((p) (i)))) ((S) (O))) (times)) (\lambda i : nat. (f) (i))) := \lambda a : nat. \lambda b : nat. ((((nat_ind) (\lambda Jokerx_365 : nat. \forall p : (nat) \to bool. \forall f : (nat) \to nat. (((le) (a)) (Jokerx_365)) \to (((eq) (nat)) (((((((bigop) (nat)) (((minus) (Jokerx_365)) (a))) (\lambda i : nat. (p) (((plus) (i)) (a)))) ((S) (O))) (times)) (\lambda i : nat. (f) (((plus) (i)) (a))))) (((((((bigop) (nat)) (Jokerx_365)) (\lambda i : nat. ((andb) (((leb) (a)) (i))) ((p) (i)))) ((S) (O))) (times)) (\lambda i : nat. (f) (i))))) (\lambda p : (nat) \to bool. \lambda f : (nat) \to nat. (((sym_eq_bigop_O) (nat)) (\lambda y : ((nat) \to bool) \to (nat) \to ((nat) \to (nat) \to nat) \to ((nat) \to nat) \to nat. (((le) (a)) (O)) \to (((eq) (nat)) (((((((bigop) (nat)) (((minus) (O)) (a))) (\lambda i : nat. (p) (((plus) (i)) (a)))) ((S) (O))) (times)) (\lambda i : nat. (f) (((plus) (i)) (a))))) (((((y) (\lambda i : nat. ((andb) (((leb) (a)) (i))) ((p) (i)))) ((S) (O))) (times)) (\lambda i : nat. (f) (i))))) ((((sym_eq_bigop_body_O) (nat)) (\lambda y : ((nat) \to bool) \to (nat) \to ((nat) \to (nat) \to nat) \to ((nat) \to nat) \to nat. (((le) (a)) (O)) \to (((eq) (nat)) (((((((bigop) (nat)) (((minus) (O)) (a))) (\lambda i : nat. (p) (((plus) (i)) (a)))) ((S) (O))) (times)) (\lambda i : nat. (f) (((plus) (i)) (a))))) (((((y) (\lambda i : nat. ((andb) (((leb) (a)) (i))) ((p) (i)))) ((S) (O))) (times)) (\lambda i : nat. (f) (i))))) ((((eq_bigop_body_O) (nat)) (\lambda y : ((nat) \to bool) \to (nat) \to ((nat) \to (nat) \to nat) \to ((nat) \to nat) \to nat. (((le) (a)) (O)) \to (((eq) (nat)) (((((((bigop) (nat)) (((minus) (O)) (a))) (\lambda i : nat. (p) (((plus) (i)) (a)))) ((S) (O))) (times)) (\lambda i : nat. (f) (((plus) (i)) (a))))) (((((y) (\lambda i : nat. (p) (((plus) (i)) (a)))) ((S) (O))) (times)) (\lambda i : nat. (f) (((plus) (i)) (a)))))) ((((eq_bigop_O) (nat)) (\lambda y : ((nat) \to bool) \to (nat) \to ((nat) \to (nat) \to nat) \to ((nat) \to nat) \to nat. (((le) (a)) (O)) \to (((eq) (nat)) (((((((bigop) (nat)) (((minus) (O)) (a))) (\lambda i : nat. (p) (((plus) (i)) (a)))) ((S) (O))) (times)) (\lambda i : nat. (f) (((plus) (i)) (a))))) (((((y) (\lambda i : nat. (p) (((plus) (i)) (a)))) ((S) (O))) (times)) (\lambda i : nat. (f) (((plus) (i)) (a)))))) (((eq_minus_body_O) (\lambda y : (nat) \to nat. (((le) (a)) (O)) \to (((eq) (nat)) (((((((bigop) (nat)) (((minus) (O)) (a))) (\lambda i : nat. (p) (((plus) (i)) (a)))) ((S) (O))) (times)) (\lambda i : nat. (f) (((plus) (i)) (a))))) (((((((bigop) (nat)) ((y) (a))) (\lambda i : nat. (p) (((plus) (i)) (a)))) ((S) (O))) (times)) (\lambda i : nat. (f) (((plus) (i)) (a)))))) (((((eq_filter_nat_type_O) ((nat) \to nat)) (minus_body)) (\lambda y : (nat) \to nat. (((le) (a)) (O)) \to (((eq) (nat)) (((((((bigop) (nat)) (((minus) (O)) (a))) (\lambda i : nat. (p) (((plus) (i)) (a)))) ((S) (O))) (times)) (\lambda i : nat. (f) (((plus) (i)) (a))))) (((((((bigop) (nat)) ((y) (a))) (\lambda i : nat. (p) (((plus) (i)) (a)))) ((S) (O))) (times)) (\lambda i : nat. (f) (((plus) (i)) (a)))))) ((((eq_minus) (O)) (\lambda y : (nat) \to nat. (((le) (a)) (O)) \to (((eq) (nat)) (((((((bigop) (nat)) (((minus) (O)) (a))) (\lambda i : nat. (p) (((plus) (i)) (a)))) ((S) (O))) (times)) (\lambda i : nat. (f) (((plus) (i)) (a))))) (((((((bigop) (nat)) ((y) (a))) (\lambda i : nat. (p) (((plus) (i)) (a)))) ((S) (O))) (times)) (\lambda i : nat. (f) (((plus) (i)) (a)))))) (\lambda auto : ((le) (a)) (O). ((refl) (nat)) (((((((bigop) (nat)) (((minus) (O)) (a))) (\lambda i : nat. (p) (((plus) (i)) (a)))) ((S) (O))) (times)) (\lambda i : nat. (f) (((plus) (i)) (a))))))))))))) (\lambda b0 : nat. \lambda Hind : \forall p : (nat) \to bool. \forall f : (nat) \to nat. (((le) (a)) (b0)) \to (((eq) (nat)) (((((((bigop) (nat)) (((minus) (b0)) (a))) (\lambda i : nat. (p) (((plus) (i)) (a)))) ((S) (O))) (times)) (\lambda i : nat. (f) (((plus) (i)) (a))))) (((((((bigop) (nat)) (b0)) (\lambda i : nat. ((andb) (((leb) (a)) (i))) ((p) (i)))) ((S) (O))) (times)) (\lambda i : nat. (f) (i))). \lambda p : (nat) \to bool. \lambda f : (nat) \to nat. \lambda lea : ((le) (a)) ((S) (b0)). ((((((match_Or_prop) (((lt) (a)) ((S) (b0)))) ((((eq) (nat)) (a)) ((S) (b0)))) ((((eq) (nat)) (((((((bigop) (nat)) (((minus) ((S) (b0))) (a))) (\lambda i : nat. (p) (((plus) (i)) (a)))) ((S) (O))) (times)) (\lambda i : nat. (f) (((plus) (i)) (a))))) (((((((bigop) (nat)) ((S) (b0))) (\lambda i : nat. ((andb) (((leb) (a)) (i))) ((p) (i)))) ((S) (O))) (times)) (\lambda i : nat. (f) (i))))) (\lambda Ha : ((lt) (a)) ((S) (b0)). ((((((match_Or_prop) ((((eq) (bool)) ((p) (b0))) (true))) ((((eq) (bool)) ((p) (b0))) (false))) ((((eq) (nat)) (((((((bigop) (nat)) (((minus) ((S) (b0))) (a))) (\lambda i : nat. (p) (((plus) (i)) (a)))) ((S) (O))) (times)) (\lambda i : nat. (f) (((plus) (i)) (a))))) (((((((bigop) (nat)) ((S) (b0))) (\lambda i : nat. ((andb) (((leb) (a)) (i))) ((p) (i)))) ((S) (O))) (times)) (\lambda i : nat. (f) (i))))) (\lambda Hcase : (((eq) (bool)) ((p) (b0))) (true). ((((((eq_ind_r) (nat)) (((times) ((f) (b0))) (((((((bigop) (nat)) (b0)) (\lambda i : nat. ((andb) (((leb) (a)) (i))) ((p) (i)))) ((S) (O))) (times)) (\lambda i : nat. (f) (i))))) (\lambda x : nat. (((eq) (nat)) (((((((bigop) (nat)) (((minus) ((S) (b0))) (a))) (\lambda i : nat. (p) (((plus) (i)) (a)))) ((S) (O))) (times)) (\lambda i : nat. (f) (((plus) (i)) (a))))) (x))) (((((((eq_ind_r) (nat)) ((S) (((minus) (b0)) (a)))) (\lambda x : nat. (((eq) (nat)) (((((((bigop) (nat)) (x)) (\lambda i : nat. (p) (((plus) (i)) (a)))) ((S) (O))) (times)) (\lambda i : nat. (f) (((plus) (i)) (a))))) (((times) ((f) (b0))) (((((((bigop) (nat)) (b0)) (\lambda i : nat. ((andb) (((leb) (a)) (i))) ((p) (i)))) ((S) (O))) (times)) (\lambda i : nat. (f) (i)))))) (((((((eq_ind_r) (nat)) (((times) ((f) (((plus) (((minus) (b0)) (a))) (a)))) (((((((bigop) (nat)) (((minus) (b0)) (a))) (\lambda i : nat. (p) (((plus) (i)) (a)))) ((S) (O))) (times)) (\lambda i : nat. (f) (((plus) (i)) (a)))))) (\lambda x : nat. (((eq) (nat)) (x)) (((times) ((f) (b0))) (((((((bigop) (nat)) (b0)) (\lambda i : nat. ((andb) (((leb) (a)) (i))) ((p) (i)))) ((S) (O))) (times)) (\lambda i : nat. (f) (i)))))) (((((((((((eq_f2) (nat)) (nat)) (nat)) (times)) ((f) (((plus) (((minus) (b0)) (a))) (a)))) ((f) (b0))) (((((((bigop) (nat)) (((minus) (b0)) (a))) (\lambda i : nat. (p) (((plus) (i)) (a)))) ((S) (O))) (times)) (\lambda i : nat. (f) (((plus) (i)) (a))))) (((((((bigop) (nat)) (b0)) (\lambda i : nat. ((andb) (((leb) (a)) (i))) ((p) (i)))) ((S) (O))) (times)) (\lambda i : nat. (f) (i)))) (((((((eq_f) (nat)) (nat)) (f)) (((plus) (((minus) (b0)) (a))) (a))) (b0)) (((((((eq_ind) (nat)) (b0)) (\lambda x_1 : nat. (((eq) (nat)) (x_1)) (b0))) (((refl) (nat)) (b0))) (((plus) (((minus) (b0)) (a))) (a))) ((((plus_minus_m_m) (b0)) (a)) ((((le_S_S_to_le) (a)) (b0)) (Ha)))))) ((((Hind) (p)) (f)) ((((le_S_S_to_le) (a)) (b0)) (Ha))))) (((((((bigop) (nat)) ((S) (((minus) (b0)) (a)))) (\lambda i : nat. (p) (((plus) (i)) (a)))) ((S) (O))) (times)) (\lambda i : nat. (f) (((plus) (i)) (a))))) ((((((((bigop_Strue) (nat)) (((minus) (b0)) (a))) (\lambda Joker_ : nat. (p) (((plus) (Joker_)) (a)))) ((S) (O))) (times)) (\lambda Joker_ : nat. (f) (((plus) (Joker_)) (a)))) (((((((eq_ind) (nat)) (b0)) (\lambda x_1 : nat. (((eq) (bool)) ((p) (x_1))) (true))) (((((((rewrite_r) (bool)) (true)) (\lambda Joker_ : bool. (((eq) (bool)) (Joker_)) (true))) (((refl) (bool)) (true))) ((p) (b0))) (Hcase))) (((plus) (((minus) (b0)) (a))) (a))) ((((plus_minus_m_m) (b0)) (a)) ((((le_S_S_to_le) (a)) (b0)) (Ha))))))) (((minus) ((S) (b0))) (a))) ((((((match_nat_prop) (\lambda Joker_ : nat. (((le) (Joker_)) (b0)) \to (((eq) (nat)) (((minus) ((S) (b0))) (Joker_))) ((S) (((minus) (b0)) (Joker_))))) (\lambda auto : ((le) (O)) (b0). ((((((rewrite_l) (nat)) ((S) (b0))) (\lambda Joker_ : nat. (((eq) (nat)) (Joker_)) ((S) (((minus) (b0)) (O))))) (((((((rewrite_l) (nat)) (b0)) (\lambda Joker_ : nat. (((eq) (nat)) ((S) (b0))) ((S) (Joker_)))) (((refl) (nat)) ((S) (b0)))) (((minus) (b0)) (O))) ((minus_n_O) (b0)))) (((minus) ((S) (b0))) (O))) ((minus_n_O) ((S) (b0))))) ((((sym_eq_minus) ((S) (b0))) (\lambda y : (nat) \to nat. \forall n : nat. (((le) ((S) (n))) (b0)) \to (((eq) (nat)) ((y) ((S) (n)))) ((S) (((minus) (b0)) ((S) (n)))))) ((((((sym_eq_filter_nat_type_S) ((nat) \to nat)) (minus_body)) (b0)) (\lambda y : (nat) \to nat. \forall n : nat. (((le) ((S) (n))) (b0)) \to (((eq) (nat)) ((y) ((S) (n)))) ((S) (((minus) (b0)) ((S) (n)))))) (\lambda a1 : nat. (((sym_eq_minus_body_S) (b0)) (\lambda y : (nat) \to nat. (((le) ((S) (a1))) (b0)) \to (((eq) (nat)) ((y) ((S) (a1)))) ((S) (((minus) (b0)) ((S) (a1)))))) (((((((sym_eq_match_nat_type_S) (nat)) ((S) (b0))) (\lambda q : nat. ((minus) (b0)) (q))) (a1)) (\lambda y : nat. (((le) ((S) (a1))) (b0)) \to (((eq) (nat)) (y)) ((S) (((minus) (b0)) ((S) (a1)))))) (\lambda lta1 : ((le) ((S) (a1))) (b0). ((((((eq_ind_r) (nat)) ((pred) (((minus) (b0)) (a1)))) (\lambda x : nat. (((eq) (nat)) (((minus) (b0)) (a1))) ((S) (x)))) (((((((eq_ind_r) (nat)) (((minus) (b0)) (a1))) (\lambda x : nat. (((eq) (nat)) (((minus) (b0)) (a1))) (x))) (((refl) (nat)) (((minus) (b0)) (a1)))) ((S) ((pred) (((minus) (b0)) (a1))))) (((S_pred) (((minus) (b0)) (a1))) (((((lt_plus_to_minus_r) (O)) (a1)) (b0)) ((((sym_eq_plus) (O)) (\lambda y : (nat) \to nat. ((le) ((S) ((y) (a1)))) (b0))) (((((sym_eq_filter_nat_type_O) ((nat) \to nat)) (plus_body)) (\lambda y : (nat) \to nat. ((le) ((S) ((y) (a1)))) (b0))) (((sym_eq_plus_body_O) (\lambda y : (nat) \to nat. ((le) ((S) ((y) (a1)))) (b0))) (lta1)))))))) (((minus) (b0)) ((S) (a1)))) (((eq_minus_S_pred) (b0)) (a1)))))))) (a)) ((((le_S_S_to_le) (a)) (b0)) (Ha))))) (((((((bigop) (nat)) ((S) (b0))) (\lambda i : nat. ((andb) (((leb) (a)) (i))) ((p) (i)))) ((S) (O))) (times)) (\lambda i : nat. (f) (i)))) ((((((((bigop_Strue) (nat)) (b0)) (\lambda Joker_ : nat. ((andb) (((leb) (a)) (Joker_))) ((p) (Joker_)))) ((S) (O))) (times)) (f)) (((((((eq_ind_r) (bool)) (true)) (\lambda x : bool. (((eq) (bool)) (((andb) (((leb) (a)) (b0))) (x))) (true))) (((((((eq_ind_r) (bool)) (true)) (\lambda x : bool. (((eq) (bool)) (((andb) (x)) (true))) (true))) ((((((eq_match_bool_type_true) (bool)) (true)) (false)) (\lambda y : bool. (((eq) (bool)) (((((match_bool_type) (bool)) (true)) (false)) (true))) (y))) (((refl) (bool)) (((andb) (true)) (true))))) (((leb) (a)) (b0))) ((((le_to_leb_true) (a)) (b0)) ((((le_S_S_to_le) (a)) (b0)) (Ha))))) ((p) (b0))) (Hcase))))) (\lambda Hcase : (((eq) (bool)) ((p) (b0))) (false). ((((((eq_ind_r) (nat)) (((((((bigop) (nat)) (b0)) (\lambda i : nat. ((andb) (((leb) (a)) (i))) ((p) (i)))) ((S) (O))) (times)) (\lambda i : nat. (f) (i)))) (\lambda x : nat. (((eq) (nat)) (((((((bigop) (nat)) (((minus) ((S) (b0))) (a))) (\lambda i : nat. (p) (((plus) (i)) (a)))) ((S) (O))) (times)) (\lambda i : nat. (f) (((plus) (i)) (a))))) (x))) (((((((eq_ind_r) (nat)) ((S) (((minus) (b0)) (a)))) (\lambda x : nat. (((eq) (nat)) (((((((bigop) (nat)) (x)) (\lambda i : nat. (p) (((plus) (i)) (a)))) ((S) (O))) (times)) (\lambda i : nat. (f) (((plus) (i)) (a))))) (((((((bigop) (nat)) (b0)) (\lambda i : nat. ((andb) (((leb) (a)) (i))) ((p) (i)))) ((S) (O))) (times)) (\lambda i : nat. (f) (i))))) (((((((eq_ind_r) (nat)) (((((((bigop) (nat)) (((minus) (b0)) (a))) (\lambda i : nat. (p) (((plus) (i)) (a)))) ((S) (O))) (times)) (\lambda i : nat. (f) (((plus) (i)) (a))))) (\lambda x : nat. (((eq) (nat)) (x)) (((((((bigop) (nat)) (b0)) (\lambda i : nat. ((andb) (((leb) (a)) (i))) ((p) (i)))) ((S) (O))) (times)) (\lambda i : nat. (f) (i))))) ((((Hind) (p)) (f)) ((((le_S_S_to_le) (a)) (b0)) (Ha)))) (((((((bigop) (nat)) ((S) (((minus) (b0)) (a)))) (\lambda i : nat. (p) (((plus) (i)) (a)))) ((S) (O))) (times)) (\lambda i : nat. (f) (((plus) (i)) (a))))) ((((((((bigop_Sfalse) (nat)) (((minus) (b0)) (a))) (\lambda Joker_ : nat. (p) (((plus) (Joker_)) (a)))) ((S) (O))) (times)) (\lambda Joker_ : nat. (f) (((plus) (Joker_)) (a)))) (((((((eq_ind) (nat)) (b0)) (\lambda x_1 : nat. (((eq) (bool)) ((p) (x_1))) (false))) (((((((rewrite_r) (bool)) (false)) (\lambda Joker_ : bool. (((eq) (bool)) (Joker_)) (false))) (((refl) (bool)) (false))) ((p) (b0))) (Hcase))) (((plus) (((minus) (b0)) (a))) (a))) ((((plus_minus_m_m) (b0)) (a)) ((((le_S_S_to_le) (a)) (b0)) (Ha))))))) (((minus) ((S) (b0))) (a))) ((((((match_nat_prop) (\lambda Joker_ : nat. (((le) (Joker_)) (b0)) \to (((eq) (nat)) (((minus) ((S) (b0))) (Joker_))) ((S) (((minus) (b0)) (Joker_))))) (\lambda auto : ((le) (O)) (b0). ((((((rewrite_l) (nat)) ((S) (b0))) (\lambda Joker_ : nat. (((eq) (nat)) (Joker_)) ((S) (((minus) (b0)) (O))))) (((((((rewrite_l) (nat)) (b0)) (\lambda Joker_ : nat. (((eq) (nat)) ((S) (b0))) ((S) (Joker_)))) (((refl) (nat)) ((S) (b0)))) (((minus) (b0)) (O))) ((minus_n_O) (b0)))) (((minus) ((S) (b0))) (O))) ((minus_n_O) ((S) (b0))))) ((((sym_eq_minus) ((S) (b0))) (\lambda y : (nat) \to nat. \forall n : nat. (((le) ((S) (n))) (b0)) \to (((eq) (nat)) ((y) ((S) (n)))) ((S) (((minus) (b0)) ((S) (n)))))) ((((((sym_eq_filter_nat_type_S) ((nat) \to nat)) (minus_body)) (b0)) (\lambda y : (nat) \to nat. \forall n : nat. (((le) ((S) (n))) (b0)) \to (((eq) (nat)) ((y) ((S) (n)))) ((S) (((minus) (b0)) ((S) (n)))))) (\lambda a1 : nat. (((sym_eq_minus_body_S) (b0)) (\lambda y : (nat) \to nat. (((le) ((S) (a1))) (b0)) \to (((eq) (nat)) ((y) ((S) (a1)))) ((S) (((minus) (b0)) ((S) (a1)))))) (((((((sym_eq_match_nat_type_S) (nat)) ((S) (b0))) (\lambda q : nat. ((minus) (b0)) (q))) (a1)) (\lambda y : nat. (((le) ((S) (a1))) (b0)) \to (((eq) (nat)) (y)) ((S) (((minus) (b0)) ((S) (a1)))))) (\lambda lta1 : ((le) ((S) (a1))) (b0). ((((((eq_ind_r) (nat)) ((pred) (((minus) (b0)) (a1)))) (\lambda x : nat. (((eq) (nat)) (((minus) (b0)) (a1))) ((S) (x)))) (((((((eq_ind_r) (nat)) (((minus) (b0)) (a1))) (\lambda x : nat. (((eq) (nat)) (((minus) (b0)) (a1))) (x))) (((refl) (nat)) (((minus) (b0)) (a1)))) ((S) ((pred) (((minus) (b0)) (a1))))) (((S_pred) (((minus) (b0)) (a1))) (((((lt_plus_to_minus_r) (O)) (a1)) (b0)) ((((sym_eq_plus) (O)) (\lambda y : (nat) \to nat. ((le) ((S) ((y) (a1)))) (b0))) (((((sym_eq_filter_nat_type_O) ((nat) \to nat)) (plus_body)) (\lambda y : (nat) \to nat. ((le) ((S) ((y) (a1)))) (b0))) (((sym_eq_plus_body_O) (\lambda y : (nat) \to nat. ((le) ((S) ((y) (a1)))) (b0))) (lta1)))))))) (((minus) (b0)) ((S) (a1)))) (((eq_minus_S_pred) (b0)) (a1)))))))) (a)) ((((le_S_S_to_le) (a)) (b0)) (Ha))))) (((((((bigop) (nat)) ((S) (b0))) (\lambda i : nat. ((andb) (((leb) (a)) (i))) ((p) (i)))) ((S) (O))) (times)) (\lambda i : nat. (f) (i)))) ((((((((bigop_Sfalse) (nat)) (b0)) (\lambda Joker_ : nat. ((andb) (((leb) (a)) (Joker_))) ((p) (Joker_)))) ((S) (O))) (times)) (f)) (((((((eq_ind_r) (bool)) (false)) (\lambda x : bool. (((eq) (bool)) (((andb) (((leb) (a)) (b0))) (x))) (false))) (((((match_bool_prop) (\lambda Joker_ : bool. (((eq) (bool)) (((andb) (Joker_)) (false))) (false))) ((((((eq_match_bool_type_true) (bool)) (false)) (false)) (\lambda y : bool. (((eq) (bool)) (((((match_bool_type) (bool)) (false)) (false)) (true))) (y))) (((refl) (bool)) (((andb) (true)) (false))))) ((((((eq_match_bool_type_false) (bool)) (false)) (false)) (\lambda y : bool. (((eq) (bool)) (((((match_bool_type) (bool)) (false)) (false)) (false))) (y))) (((refl) (bool)) (((andb) (false)) (false))))) (((leb) (a)) (b0)))) ((p) (b0))) (Hcase))))) ((true_or_false) ((p) (b0))))) (\lambda Ha : (((eq) (nat)) (a)) ((S) (b0)). ((((((eq_ind) (nat)) (a)) (\lambda x_1 : nat. (((eq) (nat)) (((((((bigop) (nat)) (((minus) (x_1)) (a))) (\lambda i : nat. (p) (((plus) (i)) (a)))) ((S) (O))) (times)) (\lambda i : nat. (f) (((plus) (i)) (a))))) (((((((bigop) (nat)) (x_1)) (\lambda i : nat. ((andb) (((leb) (a)) (i))) ((p) (i)))) ((S) (O))) (times)) (\lambda i : nat. (f) (i))))) (((((((eq_ind) (nat)) (O)) (\lambda x_1 : nat. (((eq) (nat)) (((((((bigop) (nat)) (x_1)) (\lambda i : nat. (p) (((plus) (i)) (a)))) ((S) (O))) (times)) (\lambda i : nat. (f) (((plus) (i)) (a))))) (((((((bigop) (nat)) (a)) (\lambda i : nat. ((andb) (((leb) (a)) (i))) ((p) (i)))) ((S) (O))) (times)) (\lambda i : nat. (f) (i))))) ((((sym_eq_bigop_O) (nat)) (\lambda y : ((nat) \to bool) \to (nat) \to ((nat) \to (nat) \to nat) \to ((nat) \to nat) \to nat. (((eq) (nat)) (((((y) (\lambda i : nat. (p) (((plus) (i)) (a)))) ((S) (O))) (times)) (\lambda i : nat. (f) (((plus) (i)) (a))))) (((((((bigop) (nat)) (a)) (\lambda i : nat. ((andb) (((leb) (a)) (i))) ((p) (i)))) ((S) (O))) (times)) (\lambda i : nat. (f) (i))))) ((((sym_eq_bigop_body_O) (nat)) (\lambda y : ((nat) \to bool) \to (nat) \to ((nat) \to (nat) \to nat) \to ((nat) \to nat) \to nat. (((eq) (nat)) (((((y) (\lambda i : nat. (p) (((plus) (i)) (a)))) ((S) (O))) (times)) (\lambda i : nat. (f) (((plus) (i)) (a))))) (((((((bigop) (nat)) (a)) (\lambda i : nat. ((andb) (((leb) (a)) (i))) ((p) (i)))) ((S) (O))) (times)) (\lambda i : nat. (f) (i))))) (((((((eq_ind) (nat)) (((((((bigop) (nat)) (a)) (\lambda i : nat. false)) ((S) (O))) (times)) (\lambda i : nat. (f) (i)))) (\lambda x_1 : nat. (((eq) (nat)) (x_1)) (((((((bigop) (nat)) (a)) (\lambda i : nat. ((andb) (((leb) (a)) (i))) ((p) (i)))) ((S) (O))) (times)) (\lambda i : nat. (f) (i))))) (((((((((((same_bigop) (nat)) (a)) (\lambda Joker_ : nat. false)) (\lambda Joker_ : nat. ((andb) (((leb) (a)) (Joker_))) ((p) (Joker_)))) ((S) (O))) (times)) (f)) (f)) (\lambda i : nat. \lambda ltia : ((lt) (i)) (a). ((((((eq_ind_r) (bool)) (false)) (\lambda x : bool. (((eq) (bool)) (false)) (((andb) (x)) ((p) (i))))) ((((((sym_eq_match_bool_type_false) (bool)) ((p) (i))) (false)) (\lambda y : bool. (((eq) (bool)) (false)) (y))) (((refl) (bool)) (false)))) (((leb) (a)) (i))) ((((not_le_to_leb_false) (a)) (i)) ((((lt_to_not_le) (i)) (a)) (ltia))))) (\lambda i : nat. \lambda auto : ((lt) (i)) (a). \lambda auto' : (((eq) (bool)) (false)) (true). ((refl) (nat)) ((f) (i))))) ((S) (O))) ((((((bigop_false) (nat)) (a)) ((S) (O))) (times)) (f)))))) (((minus) (a)) (a))) ((minus_n_n) (a)))) ((S) (b0))) (Ha))) ((((le_to_or_lt_eq) (a)) ((S) (b0))) (lea)))) (b).
axiom ACop : \forall A : Type[0]. (A) \to Prop.
axiom mk_ACop : \forall A : Type[0]. \forall nil : A. \forall op : (A) \to (A) \to A. (\forall a : A. (((eq) (A)) (((op) (nil)) (a))) (a)) \to (\forall a : A. (((eq) (A)) (((op) (a)) (nil))) (a)) \to (\forall a : A. \forall b : A. \forall c : A. (((eq) (A)) (((op) (a)) (((op) (b)) (c)))) (((op) (((op) (a)) (b))) (c))) \to (\forall a : A. \forall b : A. (((eq) (A)) (((op) (a)) (b))) (((op) (b)) (a))) \to ((ACop) (A)) (nil).
definition timesAC : ((ACop) (nat)) ((S) (O)) := (((((((mk_ACop) (nat)) ((S) (O))) (times)) (\lambda a : nat. (((sym_eq_times) ((S) (O))) (\lambda y : (nat) \to nat. (((eq) (nat)) ((y) (a))) (a))) ((((((sym_eq_filter_nat_type_S) ((nat) \to nat)) (times_body)) (O)) (\lambda y : (nat) \to nat. (((eq) (nat)) ((y) (a))) (a))) ((((sym_eq_times_body_S) (O)) (\lambda y : (nat) \to nat. (((eq) (nat)) ((y) (a))) (a))) ((((sym_eq_times) (O)) (\lambda y : (nat) \to nat. (((eq) (nat)) (((plus) (a)) ((y) (a)))) (a))) (((((sym_eq_filter_nat_type_O) ((nat) \to nat)) (times_body)) (\lambda y : (nat) \to nat. (((eq) (nat)) (((plus) (a)) ((y) (a)))) (a))) (((sym_eq_times_body_O) (\lambda y : (nat) \to nat. (((eq) (nat)) (((plus) (a)) ((y) (a)))) (a))) (((((sym_eq) (nat)) (a)) (((plus) (a)) (O))) ((plus_n_O) (a)))))))))) (\lambda n : nat. ((((sym_eq) (nat)) (n)) (((times) (n)) ((S) (O)))) ((times_n_1) (n)))) (\lambda a : nat. \lambda b : nat. \lambda c : nat. ((((sym_eq) (nat)) (((times) (((times) (a)) (b))) (c))) (((times) (a)) (((times) (b)) (c)))) ((((associative_times) (a)) (b)) (c)))) (commutative_times).
definition bigop_diff : \forall p : (nat) \to bool. \forall f : (nat) \to nat. \forall i : nat. \forall n : nat. (((lt) (i)) (n)) \to ((((eq) (bool)) ((p) (i))) (true)) \to (((eq) (nat)) (((((((bigop) (nat)) (n)) (\lambda x : nat. (p) (x))) ((S) (O))) (times)) (\lambda x : nat. (f) (x)))) (((times) ((f) (i))) (((((((bigop) (nat)) (n)) (\lambda x : nat. ((andb) ((notb) (((eqb) (i)) (x)))) ((p) (x)))) ((S) (O))) (times)) (\lambda x : nat. (f) (x)))) := \lambda p : (nat) \to bool. \lambda f : (nat) \to nat. \lambda i : nat. \lambda n : nat. ((((nat_ind) (\lambda Jokerx_365 : nat. (((lt) (i)) (Jokerx_365)) \to ((((eq) (bool)) ((p) (i))) (true)) \to (((eq) (nat)) (((((((bigop) (nat)) (Jokerx_365)) (\lambda x : nat. (p) (x))) ((S) (O))) (times)) (\lambda x : nat. (f) (x)))) (((times) ((f) (i))) (((((((bigop) (nat)) (Jokerx_365)) (\lambda x : nat. ((andb) ((notb) (((eqb) (i)) (x)))) ((p) (x)))) ((S) (O))) (times)) (\lambda x : nat. (f) (x)))))) (\lambda ltO : ((lt) (i)) (O). ((falsity) (((((eq) (bool)) ((p) (i))) (true)) \to (((eq) (nat)) (((((((bigop) (nat)) (O)) (\lambda x : nat. (p) (x))) ((S) (O))) (times)) (\lambda x : nat. (f) (x)))) (((times) ((f) (i))) (((((((bigop) (nat)) (O)) (\lambda x : nat. ((andb) ((notb) (((eqb) (i)) (x)))) ((p) (x)))) ((S) (O))) (times)) (\lambda x : nat. (f) (x)))))) ((((absurd) (((le) ((S) (i))) (O))) (ltO)) ((not_le_Sn_O) (i))))) (\lambda n0 : nat. \lambda Hind : (((lt) (i)) (n0)) \to ((((eq) (bool)) ((p) (i))) (true)) \to (((eq) (nat)) (((((((bigop) (nat)) (n0)) (\lambda x : nat. (p) (x))) ((S) (O))) (times)) (\lambda x : nat. (f) (x)))) (((times) ((f) (i))) (((((((bigop) (nat)) (n0)) (\lambda x : nat. ((andb) ((notb) (((eqb) (i)) (x)))) ((p) (x)))) ((S) (O))) (times)) (\lambda x : nat. (f) (x)))). \lambda lein : ((lt) (i)) ((S) (n0)). \lambda pi : (((eq) (bool)) ((p) (i))) (true). ((((((match_Or_prop) (((lt) (i)) (n0))) ((((eq) (nat)) (i)) (n0))) ((((eq) (nat)) (((((((bigop) (nat)) ((S) (n0))) (\lambda x : nat. (p) (x))) ((S) (O))) (times)) (\lambda x : nat. (f) (x)))) (((times) ((f) (i))) (((((((bigop) (nat)) ((S) (n0))) (\lambda x : nat. ((andb) ((notb) (((eqb) (i)) (x)))) ((p) (x)))) ((S) (O))) (times)) (\lambda x : nat. (f) (x)))))) (\lambda Hi : ((lt) (i)) (n0). ((((((match_Or_prop) ((((eq) (bool)) ((p) (n0))) (true))) ((((eq) (bool)) ((p) (n0))) (false))) ((((eq) (nat)) (((((((bigop) (nat)) ((S) (n0))) (\lambda x : nat. (p) (x))) ((S) (O))) (times)) (\lambda x : nat. (f) (x)))) (((times) ((f) (i))) (((((((bigop) (nat)) ((S) (n0))) (\lambda x : nat. ((andb) ((notb) (((eqb) (i)) (x)))) ((p) (x)))) ((S) (O))) (times)) (\lambda x : nat. (f) (x)))))) (\lambda pn : (((eq) (bool)) ((p) (n0))) (true). ((((((eq_ind_r) (nat)) (((times) ((f) (n0))) (((((((bigop) (nat)) (n0)) (\lambda i0 : nat. (p) (i0))) ((S) (O))) (times)) (\lambda i0 : nat. (f) (i0))))) (\lambda x : nat. (((eq) (nat)) (x)) (((times) ((f) (i))) (((((((bigop) (nat)) ((S) (n0))) (\lambda x0 : nat. ((andb) ((notb) (((eqb) (i)) (x0)))) ((p) (x0)))) ((S) (O))) (times)) (\lambda x0 : nat. (f) (x0)))))) (((((((eq_ind_r) (nat)) (((times) ((f) (n0))) (((((((bigop) (nat)) (n0)) (\lambda i0 : nat. ((andb) ((notb) (((eqb) (i)) (i0)))) ((p) (i0)))) ((S) (O))) (times)) (\lambda i0 : nat. (f) (i0))))) (\lambda x : nat. (((eq) (nat)) (((times) ((f) (n0))) (((((((bigop) (nat)) (n0)) (\lambda i0 : nat. (p) (i0))) ((S) (O))) (times)) (\lambda i0 : nat. (f) (i0))))) (((times) ((f) (i))) (x)))) (((((((eq_ind_r) (nat)) (((times) (((times) ((f) (i))) ((f) (n0)))) (((((((bigop) (nat)) (n0)) (\lambda i0 : nat. ((((match_bool_type) (bool)) ((p) (i0))) (false)) (((((match_bool_type) (bool)) (false)) (true)) (((eqb) (i)) (i0))))) ((S) (O))) (times)) (\lambda i0 : nat. (f) (i0))))) (\lambda x : nat. (((eq) (nat)) (((times) ((f) (n0))) (((((((bigop) (nat)) (n0)) (\lambda i0 : nat. (p) (i0))) ((S) (O))) (times)) (\lambda i0 : nat. (f) (i0))))) (x))) (((((((eq_ind_r) (nat)) (((times) ((f) (n0))) ((f) (i)))) (\lambda x : nat. (((eq) (nat)) (((times) ((f) (n0))) (((((((bigop) (nat)) (n0)) (\lambda i0 : nat. (p) (i0))) ((S) (O))) (times)) (\lambda i0 : nat. (f) (i0))))) (((times) (x)) (((((((bigop) (nat)) (n0)) (\lambda i0 : nat. ((((match_bool_type) (bool)) ((p) (i0))) (false)) (((((match_bool_type) (bool)) (false)) (true)) (((eqb) (i)) (i0))))) ((S) (O))) (times)) (\lambda i0 : nat. (f) (i0)))))) (((((((eq_ind) (nat)) (((times) ((f) (n0))) (((times) ((f) (i))) (((((((bigop) (nat)) (n0)) (\lambda i0 : nat. ((((match_bool_type) (bool)) ((p) (i0))) (false)) (((((match_bool_type) (bool)) (false)) (true)) (((eqb) (i)) (i0))))) ((S) (O))) (times)) (\lambda i0 : nat. (f) (i0)))))) (\lambda x_1 : nat. (((eq) (nat)) (((times) ((f) (n0))) (((((((bigop) (nat)) (n0)) (\lambda i0 : nat. (p) (i0))) ((S) (O))) (times)) (\lambda i0 : nat. (f) (i0))))) (x_1))) (((((((eq_ind_r) (nat)) (((times) ((f) (i))) (((((((bigop) (nat)) (n0)) (\lambda x : nat. ((andb) ((notb) (((eqb) (i)) (x)))) ((p) (x)))) ((S) (O))) (times)) (\lambda x : nat. (f) (x))))) (\lambda x : nat. (((eq) (nat)) (((times) ((f) (n0))) (x))) (((times) ((f) (n0))) (((times) ((f) (i))) (((((((bigop) (nat)) (n0)) (\lambda i0 : nat. ((((match_bool_type) (bool)) ((p) (i0))) (false)) (((((match_bool_type) (bool)) (false)) (true)) (((eqb) (i)) (i0))))) ((S) (O))) (times)) (\lambda i0 : nat. (f) (i0))))))) (((refl) (nat)) (((times) ((f) (n0))) (((times) ((f) (i))) (((((((bigop) (nat)) (n0)) (\lambda x : nat. ((andb) ((notb) (((eqb) (i)) (x)))) ((p) (x)))) ((S) (O))) (times)) (\lambda x : nat. (f) (x))))))) (((((((bigop) (nat)) (n0)) (\lambda x : nat. (p) (x))) ((S) (O))) (times)) (\lambda x : nat. (f) (x)))) (((Hind) (Hi)) (((((((rewrite_r) (bool)) (true)) (\lambda Joker_ : bool. (((eq) (bool)) (Joker_)) (true))) (((refl) (bool)) (true))) ((p) (i))) (pi))))) (((times) (((times) ((f) (n0))) ((f) (i)))) (((((((bigop) (nat)) (n0)) (\lambda i0 : nat. ((((match_bool_type) (bool)) ((p) (i0))) (false)) (((((match_bool_type) (bool)) (false)) (true)) (((eqb) (i)) (i0))))) ((S) (O))) (times)) (\lambda i0 : nat. (f) (i0))))) ((((assoc) ((f) (n0))) ((f) (i))) (((((((bigop) (nat)) (n0)) (\lambda i0 : nat. ((((match_bool_type) (bool)) ((p) (i0))) (false)) (((((match_bool_type) (bool)) (false)) (true)) (((eqb) (i)) (i0))))) ((S) (O))) (times)) (\lambda i0 : nat. (f) (i0)))))) (((times) ((f) (i))) ((f) (n0)))) (((commutative_times) ((f) (i))) ((f) (n0))))) (((times) ((f) (i))) (((times) ((f) (n0))) (((((((bigop) (nat)) (n0)) (\lambda i0 : nat. ((((match_bool_type) (bool)) ((p) (i0))) (false)) (((((match_bool_type) (bool)) (false)) (true)) (((eqb) (i)) (i0))))) ((S) (O))) (times)) (\lambda i0 : nat. (f) (i0)))))) ((((assoc) ((f) (i))) ((f) (n0))) (((((((bigop) (nat)) (n0)) (\lambda i0 : nat. ((((match_bool_type) (bool)) ((p) (i0))) (false)) (((((match_bool_type) (bool)) (false)) (true)) (((eqb) (i)) (i0))))) ((S) (O))) (times)) (\lambda i0 : nat. (f) (i0)))))) (((((((bigop) (nat)) ((S) (n0))) (\lambda i0 : nat. ((andb) ((notb) (((eqb) (i)) (i0)))) ((p) (i0)))) ((S) (O))) (times)) (\lambda i0 : nat. (f) (i0)))) ((((((((bigop_Strue) (nat)) (n0)) (\lambda Joker_ : nat. ((andb) ((notb) (((eqb) (i)) (Joker_)))) ((p) (Joker_)))) ((S) (O))) (times)) (f)) (((((((rewrite_r) (bool)) (true)) (\lambda Joker_ : bool. (((eq) (bool)) (((andb) ((notb) (((eqb) (i)) (n0)))) (Joker_))) (true))) (((((((rewrite_r) (bool)) (true)) (\lambda Joker_ : bool. (((eq) (bool)) (Joker_)) (true))) (((refl) (bool)) (true))) (((andb) ((notb) (((eqb) (i)) (n0)))) (true))) (((((((rewrite_l) (bool)) ((p) (n0))) (\lambda Joker_ : bool. (((eq) (bool)) (((andb) ((notb) (((eqb) (i)) (n0)))) (true))) (Joker_))) (((((((rewrite_l) (bool)) ((p) (n0))) (\lambda Joker_ : bool. (((eq) (bool)) (((andb) ((notb) (((eqb) (i)) (n0)))) (Joker_))) ((p) (n0)))) (((((((eq_ind_r) (bool)) (false)) (\lambda x : bool. (((eq) (bool)) (((andb) ((notb) (x))) ((p) (n0)))) ((p) (n0)))) ((((((sym_eq_match_bool_type_false) (bool)) (false)) (true)) (\lambda y : bool. (((eq) (bool)) (((((match_bool_type) (bool)) ((p) (n0))) (false)) (y))) ((p) (n0)))) ((((((eq_match_bool_type_true) (bool)) ((p) (n0))) (false)) (\lambda y : bool. (((eq) (bool)) (((((match_bool_type) (bool)) ((p) (n0))) (false)) (true))) (y))) ((((((eq_match_bool_type_false) (bool)) (false)) (true)) (\lambda y : bool. (((eq) (bool)) (((((match_bool_type) (bool)) ((p) (n0))) (false)) (true))) (((((match_bool_type) (bool)) ((p) (n0))) (false)) (y)))) ((((((eq_match_bool_type_false) (bool)) (false)) (true)) (\lambda y : bool. (((eq) (bool)) (((((match_bool_type) (bool)) ((p) (n0))) (false)) (y))) (((((match_bool_type) (bool)) ((p) (n0))) (false)) (((((match_bool_type) (bool)) (false)) (true)) (false))))) (((refl) (bool)) (((andb) ((notb) (false))) ((p) (n0))))))))) (((eqb) (i)) (n0))) ((((not_eq_to_eqb_false) (i)) (n0)) ((((lt_to_not_eq) (i)) (n0)) (Hi))))) (true)) (pn))) (true)) (pn)))) ((p) (n0))) (pn))))) (((((((bigop) (nat)) ((S) (n0))) (\lambda i0 : nat. (p) (i0))) ((S) (O))) (times)) (\lambda i0 : nat. (f) (i0)))) ((((((((bigop_Strue) (nat)) (n0)) (p)) ((S) (O))) (times)) (f)) (((((((rewrite_r) (bool)) (true)) (\lambda Joker_ : bool. (((eq) (bool)) (Joker_)) (true))) (((refl) (bool)) (true))) ((p) (n0))) (pn))))) (\lambda pn : (((eq) (bool)) ((p) (n0))) (false). ((((((eq_ind_r) (nat)) (((((((bigop) (nat)) (n0)) (\lambda i0 : nat. (p) (i0))) ((S) (O))) (times)) (\lambda i0 : nat. (f) (i0)))) (\lambda x : nat. (((eq) (nat)) (x)) (((times) ((f) (i))) (((((((bigop) (nat)) ((S) (n0))) (\lambda x0 : nat. ((andb) ((notb) (((eqb) (i)) (x0)))) ((p) (x0)))) ((S) (O))) (times)) (\lambda x0 : nat. (f) (x0)))))) (((((((eq_ind_r) (nat)) (((((((bigop) (nat)) (n0)) (\lambda i0 : nat. ((andb) ((notb) (((eqb) (i)) (i0)))) ((p) (i0)))) ((S) (O))) (times)) (\lambda i0 : nat. (f) (i0)))) (\lambda x : nat. (((eq) (nat)) (((((((bigop) (nat)) (n0)) (\lambda i0 : nat. (p) (i0))) ((S) (O))) (times)) (\lambda i0 : nat. (f) (i0)))) (((times) ((f) (i))) (x)))) (((((((eq_ind_r) (nat)) (((times) ((f) (i))) (((((((bigop) (nat)) (n0)) (\lambda x : nat. ((andb) ((notb) (((eqb) (i)) (x)))) ((p) (x)))) ((S) (O))) (times)) (\lambda x : nat. (f) (x))))) (\lambda x : nat. (((eq) (nat)) (x)) (((times) ((f) (i))) (((((((bigop) (nat)) (n0)) (\lambda i0 : nat. ((andb) ((notb) (((eqb) (i)) (i0)))) ((p) (i0)))) ((S) (O))) (times)) (\lambda i0 : nat. (f) (i0)))))) (((refl) (nat)) (((times) ((f) (i))) (((((((bigop) (nat)) (n0)) (\lambda x : nat. ((andb) ((notb) (((eqb) (i)) (x)))) ((p) (x)))) ((S) (O))) (times)) (\lambda x : nat. (f) (x)))))) (((((((bigop) (nat)) (n0)) (\lambda x : nat. (p) (x))) ((S) (O))) (times)) (\lambda x : nat. (f) (x)))) (((Hind) (Hi)) (((((((rewrite_r) (bool)) (true)) (\lambda Joker_ : bool. (((eq) (bool)) (Joker_)) (true))) (((refl) (bool)) (true))) ((p) (i))) (pi))))) (((((((bigop) (nat)) ((S) (n0))) (\lambda i0 : nat. ((andb) ((notb) (((eqb) (i)) (i0)))) ((p) (i0)))) ((S) (O))) (times)) (\lambda i0 : nat. (f) (i0)))) ((((((((bigop_Sfalse) (nat)) (n0)) (\lambda Joker_ : nat. ((andb) ((notb) (((eqb) (i)) (Joker_)))) ((p) (Joker_)))) ((S) (O))) (times)) (f)) (((((((rewrite_r) (bool)) (false)) (\lambda Joker_ : bool. (((eq) (bool)) (((andb) ((notb) (((eqb) (i)) (n0)))) (Joker_))) (false))) (((((((rewrite_r) (bool)) (false)) (\lambda Joker_ : bool. (((eq) (bool)) (Joker_)) (false))) (((refl) (bool)) (false))) (((andb) ((notb) (((eqb) (i)) (n0)))) (false))) (((((((rewrite_l) (bool)) ((p) (n0))) (\lambda Joker_ : bool. (((eq) (bool)) (((andb) ((notb) (((eqb) (i)) (n0)))) (false))) (Joker_))) (((((((rewrite_l) (bool)) ((p) (n0))) (\lambda Joker_ : bool. (((eq) (bool)) (((andb) ((notb) (((eqb) (i)) (n0)))) (Joker_))) ((p) (n0)))) (((((((eq_ind_r) (bool)) (false)) (\lambda x : bool. (((eq) (bool)) (((andb) ((notb) (x))) ((p) (n0)))) ((p) (n0)))) ((((((sym_eq_match_bool_type_false) (bool)) (false)) (true)) (\lambda y : bool. (((eq) (bool)) (((((match_bool_type) (bool)) ((p) (n0))) (false)) (y))) ((p) (n0)))) ((((((eq_match_bool_type_true) (bool)) ((p) (n0))) (false)) (\lambda y : bool. (((eq) (bool)) (((((match_bool_type) (bool)) ((p) (n0))) (false)) (true))) (y))) ((((((eq_match_bool_type_false) (bool)) (false)) (true)) (\lambda y : bool. (((eq) (bool)) (((((match_bool_type) (bool)) ((p) (n0))) (false)) (true))) (((((match_bool_type) (bool)) ((p) (n0))) (false)) (y)))) ((((((eq_match_bool_type_false) (bool)) (false)) (true)) (\lambda y : bool. (((eq) (bool)) (((((match_bool_type) (bool)) ((p) (n0))) (false)) (y))) (((((match_bool_type) (bool)) ((p) (n0))) (false)) (((((match_bool_type) (bool)) (false)) (true)) (false))))) (((refl) (bool)) (((andb) ((notb) (false))) ((p) (n0))))))))) (((eqb) (i)) (n0))) ((((not_eq_to_eqb_false) (i)) (n0)) ((((lt_to_not_eq) (i)) (n0)) (Hi))))) (false)) (pn))) (false)) (pn)))) ((p) (n0))) (pn))))) (((((((bigop) (nat)) ((S) (n0))) (\lambda i0 : nat. (p) (i0))) ((S) (O))) (times)) (\lambda i0 : nat. (f) (i0)))) ((((((((bigop_Sfalse) (nat)) (n0)) (p)) ((S) (O))) (times)) (f)) (((((((rewrite_r) (bool)) (false)) (\lambda Joker_ : bool. (((eq) (bool)) (Joker_)) (false))) (((refl) (bool)) (false))) ((p) (n0))) (pn))))) ((true_or_false) ((p) (n0))))) (\lambda Hi : (((eq) (nat)) (i)) (n0). ((((((eq_ind) (nat)) (i)) (\lambda x_1 : nat. (((eq) (nat)) (((((((bigop) (nat)) ((S) (x_1))) (\lambda x : nat. (p) (x))) ((S) (O))) (times)) (\lambda x : nat. (f) (x)))) (((times) ((f) (i))) (((((((bigop) (nat)) ((S) (x_1))) (\lambda x : nat. ((andb) ((notb) (((eqb) (i)) (x)))) ((p) (x)))) ((S) (O))) (times)) (\lambda x : nat. (f) (x)))))) (((((((eq_ind_r) (nat)) (((times) ((f) (i))) (((((((bigop) (nat)) (i)) (\lambda i0 : nat. (p) (i0))) ((S) (O))) (times)) (\lambda i0 : nat. (f) (i0))))) (\lambda x : nat. (((eq) (nat)) (x)) (((times) ((f) (i))) (((((((bigop) (nat)) ((S) (i))) (\lambda x0 : nat. ((andb) ((notb) (((eqb) (i)) (x0)))) ((p) (x0)))) ((S) (O))) (times)) (\lambda x0 : nat. (f) (x0)))))) (((((((eq_f) (nat)) (nat)) ((times) ((f) (i)))) (((((((bigop) (nat)) (i)) (\lambda i0 : nat. (p) (i0))) ((S) (O))) (times)) (\lambda i0 : nat. (f) (i0)))) (((((((bigop) (nat)) ((S) (i))) (\lambda x : nat. ((andb) ((notb) (((eqb) (i)) (x)))) ((p) (x)))) ((S) (O))) (times)) (\lambda x : nat. (f) (x)))) (((((((eq_ind_r) (nat)) (((((((bigop) (nat)) (i)) (\lambda i0 : nat. ((andb) ((notb) (((eqb) (i)) (i0)))) ((p) (i0)))) ((S) (O))) (times)) (\lambda i0 : nat. (f) (i0)))) (\lambda x : nat. (((eq) (nat)) (((((((bigop) (nat)) (i)) (\lambda i0 : nat. (p) (i0))) ((S) (O))) (times)) (\lambda i0 : nat. (f) (i0)))) (x))) (((((((((((same_bigop) (nat)) (i)) (p)) (\lambda Joker_ : nat. ((andb) ((notb) (((eqb) (i)) (Joker_)))) ((p) (Joker_)))) ((S) (O))) (times)) (f)) (f)) (\lambda k : nat. \lambda ltki : ((lt) (k)) (i). ((((((eq_ind_r) (bool)) (false)) (\lambda x : bool. (((eq) (bool)) ((p) (k))) (((andb) ((notb) (x))) ((p) (k))))) ((((((sym_eq_match_bool_type_false) (bool)) (false)) (true)) (\lambda y : bool. (((eq) (bool)) ((p) (k))) (((((match_bool_type) (bool)) ((p) (k))) (false)) (y)))) ((((((sym_eq_match_bool_type_true) (bool)) ((p) (k))) (false)) (\lambda y : bool. (((eq) (bool)) ((p) (k))) (y))) (((refl) (bool)) ((p) (k)))))) (((eqb) (i)) (k))) ((((not_eq_to_eqb_false) (i)) (k)) (((((not_to_not) ((((eq) (nat)) (i)) (k))) (((le) ((S) (i))) (i))) (\lambda auto : (((eq) (nat)) (i)) (k). ((((eq_coerc) (((le) ((S) (k))) (i))) (((le) ((S) (i))) (i))) (ltki)) (((((((rewrite_l) (nat)) (i)) (\lambda Joker_ : nat. (((eq) Prop) (((le) ((S) (Joker_))) (i))) (((le) ((S) (i))) (i)))) (((refl) Prop) (((le) ((S) (i))) (i)))) (k)) (auto)))) ((not_le_Sn_n) (i)))))) (\lambda i0 : nat. \lambda auto : ((lt) (i0)) (i). \lambda auto' : (((eq) (bool)) ((p) (i0))) (true). ((refl) (nat)) ((f) (i0))))) (((((((bigop) (nat)) ((S) (i))) (\lambda i0 : nat. ((andb) ((notb) (((eqb) (i)) (i0)))) ((p) (i0)))) ((S) (O))) (times)) (\lambda i0 : nat. (f) (i0)))) ((((((((bigop_Sfalse) (nat)) (i)) (\lambda Joker_ : nat. ((andb) ((notb) (((eqb) (i)) (Joker_)))) ((p) (Joker_)))) ((S) (O))) (times)) (f)) (((((((eq_ind_r) (bool)) (true)) (\lambda x : bool. (((eq) (bool)) (((andb) ((notb) (x))) ((p) (i)))) (false))) ((((((eq_match_bool_type_false) (bool)) ((p) (i))) (false)) (\lambda y : bool. (((eq) (bool)) (((((match_bool_type) (bool)) ((p) (i))) (false)) (((((match_bool_type) (bool)) (false)) (true)) (true)))) (y))) ((((((eq_match_bool_type_true) (bool)) (false)) (true)) (\lambda y : bool. (((eq) (bool)) (((((match_bool_type) (bool)) ((p) (i))) (false)) (((((match_bool_type) (bool)) (false)) (true)) (true)))) (((((match_bool_type) (bool)) ((p) (i))) (false)) (y)))) (((refl) (bool)) (((andb) ((notb) (true))) ((p) (i))))))) (((eqb) (i)) (i))) ((((eq_to_eqb_true) (i)) (i)) (((refl) (nat)) (i)))))))) (((((((bigop) (nat)) ((S) (i))) (\lambda i0 : nat. (p) (i0))) ((S) (O))) (times)) (\lambda i0 : nat. (f) (i0)))) ((((((((bigop_Strue) (nat)) (i)) (p)) ((S) (O))) (times)) (f)) (((((((rewrite_r) (bool)) (true)) (\lambda Joker_ : bool. (((eq) (bool)) (Joker_)) (true))) (((refl) (bool)) (true))) ((p) (i))) (pi))))) (n0)) (Hi))) ((((le_to_or_lt_eq) (i)) (n0)) ((((le_S_S_to_le) (i)) (n0)) (lein))))) (n).
definition sub_hk : ((nat) \to nat) \to ((nat) \to nat) \to (nat) \to (nat) \to ((nat) \to bool) \to ((nat) \to bool) \to ((nat) \to nat) \to ((nat) \to nat) \to Prop := \lambda h : (nat) \to nat. \lambda k : (nat) \to nat. \lambda n1 : nat. \lambda n2 : nat. \lambda p1 : (nat) \to bool. \lambda p2 : (nat) \to bool. \lambda f1 : (nat) \to nat. \lambda f2 : (nat) \to nat. \forall i : nat. (((lt) (i)) (n1)) \to ((((eq) (bool)) ((p1) (i))) (true)) \to ((And) (((And) (((lt) ((h) (i))) (n2))) ((((eq) (bool)) ((p2) ((h) (i)))) (true)))) ((((eq) (nat)) ((k) ((h) (i)))) (i)).
definition iso : (nat) \to (nat) \to ((nat) \to bool) \to ((nat) \to bool) \to ((nat) \to nat) \to ((nat) \to nat) \to Prop := \lambda n1 : nat. \lambda n2 : nat. \lambda p1 : (nat) \to bool. \lambda p2 : (nat) \to bool. \lambda f1 : (nat) \to nat. \lambda f2 : (nat) \to nat. ((Ex) ((nat) \to nat)) (\lambda h : (nat) \to nat. ((Ex) ((nat) \to nat)) (\lambda k : (nat) \to nat. ((And) (((And) (\forall i : nat. (((lt) (i)) (n1)) \to ((((eq) (bool)) ((p1) (i))) (true)) \to (((eq) (nat)) ((f1) (i))) ((f2) ((h) (i))))) (((((((((sub_hk) (h)) (k)) (n1)) (n2)) (p1)) (p2)) (f1)) (f2)))) (((((((((sub_hk) (k)) (h)) (n2)) (n1)) (p2)) (p1)) (f2)) (f1)))).
definition sub_hkO : \forall h : (nat) \to nat. \forall k : (nat) \to nat. \forall n1 : nat. \forall n2 : nat. \forall p1 : (nat) \to bool. \forall p2 : (nat) \to bool. \forall f1 : (nat) \to nat. \forall f2 : (nat) \to nat. ((((eq) (nat)) (n1)) (O)) \to ((((((((sub_hk) (h)) (k)) (n1)) (n2)) (p1)) (p2)) (f1)) (f2) := \lambda h : (nat) \to nat. \lambda k : (nat) \to nat. \lambda n1 : nat. \lambda n2 : nat. \lambda p1 : (nat) \to bool. \lambda p2 : (nat) \to bool. \lambda f1 : (nat) \to nat. \lambda f2 : (nat) \to nat. \lambda up0 : (((eq) (nat)) (n1)) (O). \lambda i : nat. \lambda lti : ((lt) (i)) (n1). ((((((eq_ind_r) (nat)) (O)) (\lambda x : nat. ((((eq) (bool)) ((p1) (i))) (true)) \to ((And) (((And) (((lt) ((h) (i))) (n2))) ((((eq) (bool)) ((p2) ((h) (i)))) (true)))) ((((eq) (nat)) ((k) ((h) (i)))) (i)))) (((falsity) (((((eq) (bool)) ((p1) (i))) (true)) \to ((And) (((And) (((lt) ((h) (i))) (n2))) ((((eq) (bool)) ((p2) ((h) (i)))) (true)))) ((((eq) (nat)) ((k) ((h) (i)))) (i)))) ((((absurd) (((le) ((S) (i))) (O))) (((((eq_coerc) (((le) ((S) (i))) (n1))) (((le) ((S) (i))) (O))) (lti)) (((((((rewrite_r) (nat)) (O)) (\lambda Joker_ : nat. (((eq) Prop) (((le) ((S) (i))) (Joker_))) (((le) ((S) (i))) (O)))) (((refl) Prop) (((le) ((S) (i))) (O)))) (n1)) (up0)))) ((not_le_Sn_O) (i))))) (n1)) (up0).
definition sub0_to_false : \forall h : (nat) \to nat. \forall k : (nat) \to nat. \forall n1 : nat. \forall n2 : nat. \forall p1 : (nat) \to bool. \forall p2 : (nat) \to bool. \forall f1 : (nat) \to nat. \forall f2 : (nat) \to nat. ((((eq) (nat)) (n1)) (O)) \to (((((((((sub_hk) (h)) (k)) (n2)) (n1)) (p2)) (p1)) (f2)) (f1)) \to \forall i : nat. (((lt) (i)) (n2)) \to (((eq) (bool)) ((p2) (i))) (false) := \lambda h : (nat) \to nat. \lambda k : (nat) \to nat. \lambda n1 : nat. \lambda n2 : nat. \lambda p1 : (nat) \to bool. \lambda p2 : (nat) \to bool. \lambda f1 : (nat) \to nat. \lambda f2 : (nat) \to nat. \lambda up0 : (((eq) (nat)) (n1)) (O). \lambda sub : ((((((((sub_hk) (h)) (k)) (n2)) (n1)) (p2)) (p1)) (f2)) (f1). \lambda i : nat. \lambda lti : ((lt) (i)) (n2). ((((((match_Or_prop) ((((eq) (bool)) ((p2) (i))) (true))) ((((eq) (bool)) ((p2) (i))) (false))) ((((eq) (bool)) ((p2) (i))) (false))) (\lambda ptrue : (((eq) (bool)) ((p2) (i))) (true). (((((match_And_prop) (((And) (((lt) ((h) (i))) (n1))) ((((eq) (bool)) ((p1) ((h) (i)))) (true)))) ((((eq) (nat)) ((k) ((h) (i)))) (i))) ((((eq) (bool)) ((p2) (i))) (false))) (\lambda Jokerclearme : ((And) (((lt) ((h) (i))) (n1))) ((((eq) (bool)) ((p1) ((h) (i)))) (true)). (((((match_And_prop) (((lt) ((h) (i))) (n1))) ((((eq) (bool)) ((p1) ((h) (i)))) (true))) (((((eq) (nat)) ((k) ((h) (i)))) (i)) \to (((eq) (bool)) ((p2) (i))) (false))) (\lambda hi : ((lt) ((h) (i))) (n1). ((falsity) (((((eq) (bool)) ((p1) ((h) (i)))) (true)) \to ((((eq) (nat)) ((k) ((h) (i)))) (i)) \to (((eq) (bool)) ((p2) (i))) (false))) ((((absurd) (((le) ((S) ((h) (i)))) (O))) (((((eq_coerc) (((le) ((S) ((h) (i)))) (n1))) (((le) ((S) ((h) (i)))) (O))) (hi)) (((((((rewrite_r) (nat)) (O)) (\lambda Joker_ : nat. (((eq) Prop) (((le) ((S) ((h) (i)))) (Joker_))) (((le) ((S) ((h) (i)))) (O)))) (((refl) Prop) (((le) ((S) ((h) (i)))) (O)))) (n1)) (up0)))) ((not_le_Sn_O) ((h) (i)))))) (Jokerclearme))) ((((sub) (i)) (lti)) (ptrue)))) (\lambda auto : (((eq) (bool)) ((p2) (i))) (false). ((((((rewrite_r) (bool)) (false)) (\lambda Joker_ : bool. (((eq) (bool)) (Joker_)) (false))) (((refl) (bool)) (false))) ((p2) (i))) (auto))) ((true_or_false) ((p2) (i))).
definition sub_lt : \forall e : (nat) \to nat. \forall p : (nat) \to bool. \forall n : nat. \forall m : nat. (((le) (n)) (m)) \to ((((((((sub_hk) (\lambda x : nat. x)) (\lambda x : nat. x)) (n)) (m)) (p)) (p)) (e)) (e) := \lambda e : (nat) \to nat. \lambda f : (nat) \to bool. \lambda n : nat. \lambda m : nat. \lambda lenm : ((le) (n)) (m). \lambda i : nat. \lambda lti : ((lt) (i)) (n). \lambda fi : (((eq) (bool)) ((f) (i))) (true). \lambda z : Prop. \lambda f1 : (((And) (((lt) (i)) (m))) ((((eq) (bool)) ((f) (i))) (true))) \to ((((eq) (nat)) (i)) (i)) \to z. ((f1) (\lambda z0 : Prop. \lambda f2 : (((lt) (i)) (m)) \to ((((eq) (bool)) ((f) (i))) (true)) \to z0. ((f2) ((((((lt_to_le_to_lt) (i)) (n)) (m)) (lti)) (lenm))) (((((((rewrite_r) (bool)) (true)) (\lambda Joker_ : bool. (((eq) (bool)) (Joker_)) (true))) (((refl) (bool)) (true))) ((f) (i))) (fi)))) (((refl) (nat)) (i)).
definition transitive_sub : \forall h1 : (nat) \to nat. \forall k1 : (nat) \to nat. \forall h2 : (nat) \to nat. \forall k2 : (nat) \to nat. \forall n1 : nat. \forall n2 : nat. \forall n3 : nat. \forall p1 : (nat) \to bool. \forall p2 : (nat) \to bool. \forall p3 : (nat) \to bool. \forall f1 : (nat) \to nat. \forall f2 : (nat) \to nat. \forall f3 : (nat) \to nat. (((((((((sub_hk) (h1)) (k1)) (n1)) (n2)) (p1)) (p2)) (f1)) (f2)) \to (((((((((sub_hk) (h2)) (k2)) (n2)) (n3)) (p2)) (p3)) (f2)) (f3)) \to ((((((((sub_hk) (\lambda x : nat. (h2) ((h1) (x)))) (\lambda x : nat. (k1) ((k2) (x)))) (n1)) (n3)) (p1)) (p3)) (f1)) (f3) := \lambda h1 : (nat) \to nat. \lambda k1 : (nat) \to nat. \lambda h2 : (nat) \to nat. \lambda k2 : (nat) \to nat. \lambda n1 : nat. \lambda n2 : nat. \lambda n3 : nat. \lambda p1 : (nat) \to bool. \lambda p2 : (nat) \to bool. \lambda p3 : (nat) \to bool. \lambda f1 : (nat) \to nat. \lambda f2 : (nat) \to nat. \lambda f3 : (nat) \to nat. \lambda sub1 : ((((((((sub_hk) (h1)) (k1)) (n1)) (n2)) (p1)) (p2)) (f1)) (f2). \lambda sub2 : ((((((((sub_hk) (h2)) (k2)) (n2)) (n3)) (p2)) (p3)) (f2)) (f3). \lambda i : nat. \lambda lti : ((lt) (i)) (n1). \lambda fi : (((eq) (bool)) ((p1) (i))) (true). (((((match_And_prop) (((And) (((lt) ((h1) (i))) (n2))) ((((eq) (bool)) ((p2) ((h1) (i)))) (true)))) ((((eq) (nat)) ((k1) ((h1) (i)))) (i))) (((And) (((And) (((lt) ((h2) ((h1) (i)))) (n3))) ((((eq) (bool)) ((p3) ((h2) ((h1) (i))))) (true)))) ((((eq) (nat)) ((k1) ((k2) ((h2) ((h1) (i)))))) (i)))) (\lambda Jokerclearme : ((And) (((lt) ((h1) (i))) (n2))) ((((eq) (bool)) ((p2) ((h1) (i)))) (true)). (((((match_And_prop) (((lt) ((h1) (i))) (n2))) ((((eq) (bool)) ((p2) ((h1) (i)))) (true))) (((((eq) (nat)) ((k1) ((h1) (i)))) (i)) \to ((And) (((And) (((lt) ((h2) ((h1) (i)))) (n3))) ((((eq) (bool)) ((p3) ((h2) ((h1) (i))))) (true)))) ((((eq) (nat)) ((k1) ((k2) ((h2) ((h1) (i)))))) (i)))) (\lambda lth1i : ((lt) ((h1) (i))) (n2). \lambda fh1i : (((eq) (bool)) ((p2) ((h1) (i)))) (true). \lambda ei : (((eq) (nat)) ((k1) ((h1) (i)))) (i). (((((match_And_prop) (((And) (((lt) ((h2) ((h1) (i)))) (n3))) ((((eq) (bool)) ((p3) ((h2) ((h1) (i))))) (true)))) ((((eq) (nat)) ((k2) ((h2) ((h1) (i))))) ((h1) (i)))) (((And) (((And) (((lt) ((h2) ((h1) (i)))) (n3))) ((((eq) (bool)) ((p3) ((h2) ((h1) (i))))) (true)))) ((((eq) (nat)) ((k1) ((k2) ((h2) ((h1) (i)))))) (i)))) (\lambda Jokerclearme0 : ((And) (((lt) ((h2) ((h1) (i)))) (n3))) ((((eq) (bool)) ((p3) ((h2) ((h1) (i))))) (true)). (((((match_And_prop) (((lt) ((h2) ((h1) (i)))) (n3))) ((((eq) (bool)) ((p3) ((h2) ((h1) (i))))) (true))) (((((eq) (nat)) ((k2) ((h2) ((h1) (i))))) ((h1) (i))) \to ((And) (((And) (((lt) ((h2) ((h1) (i)))) (n3))) ((((eq) (bool)) ((p3) ((h2) ((h1) (i))))) (true)))) ((((eq) (nat)) ((k1) ((k2) ((h2) ((h1) (i)))))) (i)))) (\lambda H1 : ((lt) ((h2) ((h1) (i)))) (n3). \lambda H2 : (((eq) (bool)) ((p3) ((h2) ((h1) (i))))) (true). \lambda H3 : (((eq) (nat)) ((k2) ((h2) ((h1) (i))))) ((h1) (i)). \lambda z : Prop. \lambda f : (((And) (((lt) ((h2) ((h1) (i)))) (n3))) ((((eq) (bool)) ((p3) ((h2) ((h1) (i))))) (true))) \to ((((eq) (nat)) ((k1) ((k2) ((h2) ((h1) (i)))))) (i)) \to z. ((f) (\lambda z0 : Prop. \lambda f20 : (((lt) ((h2) ((h1) (i)))) (n3)) \to ((((eq) (bool)) ((p3) ((h2) ((h1) (i))))) (true)) \to z0. ((f20) (H1)) (((((((rewrite_r) (bool)) (true)) (\lambda Joker_ : bool. (((eq) (bool)) (Joker_)) (true))) (((refl) (bool)) (true))) ((p3) ((h2) ((h1) (i))))) (H2)))) (((((((rewrite_r) (nat)) ((h1) (i))) (\lambda Joker_ : nat. (((eq) (nat)) ((k1) (Joker_))) (i))) (((((((rewrite_r) (nat)) (i)) (\lambda Joker_ : nat. (((eq) (nat)) (Joker_)) (i))) (((refl) (nat)) (i))) ((k1) ((h1) (i)))) (ei))) ((k2) ((h2) ((h1) (i))))) (H3)))) (Jokerclearme0))) ((((sub2) ((h1) (i))) (lth1i)) (fh1i)))) (Jokerclearme))) ((((sub1) (i)) (lti)) (fi)).
definition let_clause_10471 : \forall n1 : nat. \forall n2 : nat. \forall p1 : (nat) \to bool. \forall p2 : (nat) \to bool. \forall f1 : (nat) \to nat. \forall f2 : (nat) \to nat. (((((((iso) (n1)) (n2)) (p1)) (p2)) (f1)) (f2)) \to \forall h : (nat) \to nat. (((Ex) ((nat) \to nat)) (\lambda k : (nat) \to nat. ((And) (((And) (\forall i : nat. (((lt) (i)) (n1)) \to ((((eq) (bool)) ((p1) (i))) (true)) \to (((eq) (nat)) ((f1) (i))) ((f2) ((h) (i))))) (((((((((sub_hk) (h)) (k)) (n1)) (n2)) (p1)) (p2)) (f1)) (f2)))) (((((((((sub_hk) (k)) (h)) (n2)) (n1)) (p2)) (p1)) (f2)) (f1)))) \to \forall k : (nat) \to nat. (((And) (((And) (\forall i : nat. (((lt) (i)) (n1)) \to ((((eq) (bool)) ((p1) (i))) (true)) \to (((eq) (nat)) ((f1) (i))) ((f2) ((h) (i))))) (((((((((sub_hk) (h)) (k)) (n1)) (n2)) (p1)) (p2)) (f1)) (f2)))) (((((((((sub_hk) (k)) (h)) (n2)) (n1)) (p2)) (p1)) (f2)) (f1))) \to (((And) (\forall i : nat. (((lt) (i)) (n1)) \to ((((eq) (bool)) ((p1) (i))) (true)) \to (((eq) (nat)) ((f1) (i))) ((f2) ((h) (i))))) (((((((((sub_hk) (h)) (k)) (n1)) (n2)) (p1)) (p2)) (f1)) (f2))) \to (\forall i : nat. (((lt) (i)) (n1)) \to ((((eq) (bool)) ((p1) (i))) (true)) \to (((eq) (nat)) ((f1) (i))) ((f2) ((h) (i)))) \to \forall i : nat. \forall m : nat. (\forall f : (nat) \to bool. (((le) (O)) (n1)) \to (((((((((sub_hk) (h)) (k)) (O)) (m)) (p1)) (f)) (f1)) (f2)) \to (((((((((sub_hk) (k)) (h)) (m)) (O)) (f)) (p1)) (f2)) (f1)) \to (((eq) (nat)) (((((((bigop) (nat)) (O)) (\lambda i0 : nat. (p1) (i0))) ((S) (O))) (times)) (\lambda i0 : nat. (f1) (i0)))) (((((((bigop) (nat)) (m)) (\lambda i0 : nat. (f) (i0))) ((S) (O))) (times)) (\lambda i0 : nat. (f2) (i0)))) \to \forall p20 : (nat) \to bool. (((le) (O)) (n1)) \to (((((((((sub_hk) (h)) (k)) (O)) ((S) (m))) (p1)) (p20)) (f1)) (f2)) \to (((((((((sub_hk) (k)) (h)) ((S) (m))) (O)) (p20)) (p1)) (f2)) (f1)) \to \forall x2571 : nat. \forall x2572 : nat. (((eq) (nat)) (x2571)) (((plus) (((times) (x2572)) (((div) (x2571)) (x2572)))) (((mod) (x2571)) (x2572))) := \lambda n1 : nat. \lambda n2 : nat. \lambda p1 : (nat) \to bool. \lambda p2 : (nat) \to bool. \lambda f1 : (nat) \to nat. \lambda f2 : (nat) \to nat. \lambda Jokerclearme : ((((((iso) (n1)) (n2)) (p1)) (p2)) (f1)) (f2). \lambda h : (nat) \to nat. \lambda Jokerclearme0 : ((Ex) ((nat) \to nat)) (\lambda k : (nat) \to nat. ((And) (((And) (\forall i : nat. (((lt) (i)) (n1)) \to ((((eq) (bool)) ((p1) (i))) (true)) \to (((eq) (nat)) ((f1) (i))) ((f2) ((h) (i))))) (((((((((sub_hk) (h)) (k)) (n1)) (n2)) (p1)) (p2)) (f1)) (f2)))) (((((((((sub_hk) (k)) (h)) (n2)) (n1)) (p2)) (p1)) (f2)) (f1))). \lambda k : (nat) \to nat. \lambda Jokerclearme1 : ((And) (((And) (\forall i : nat. (((lt) (i)) (n1)) \to ((((eq) (bool)) ((p1) (i))) (true)) \to (((eq) (nat)) ((f1) (i))) ((f2) ((h) (i))))) (((((((((sub_hk) (h)) (k)) (n1)) (n2)) (p1)) (p2)) (f1)) (f2)))) (((((((((sub_hk) (k)) (h)) (n2)) (n1)) (p2)) (p1)) (f2)) (f1)). \lambda Jokerclearme2 : ((And) (\forall i : nat. (((lt) (i)) (n1)) \to ((((eq) (bool)) ((p1) (i))) (true)) \to (((eq) (nat)) ((f1) (i))) ((f2) ((h) (i))))) (((((((((sub_hk) (h)) (k)) (n1)) (n2)) (p1)) (p2)) (f1)) (f2)). \lambda same : \forall i : nat. (((lt) (i)) (n1)) \to ((((eq) (bool)) ((p1) (i))) (true)) \to (((eq) (nat)) ((f1) (i))) ((f2) ((h) (i))). \lambda i : nat. \lambda m : nat. \lambda Hind : \forall f : (nat) \to bool. (((le) (O)) (n1)) \to (((((((((sub_hk) (h)) (k)) (O)) (m)) (p1)) (f)) (f1)) (f2)) \to (((((((((sub_hk) (k)) (h)) (m)) (O)) (f)) (p1)) (f2)) (f1)) \to (((eq) (nat)) (((((((bigop) (nat)) (O)) (\lambda i0 : nat. (p1) (i0))) ((S) (O))) (times)) (\lambda i0 : nat. (f1) (i0)))) (((((((bigop) (nat)) (m)) (\lambda i0 : nat. (f) (i0))) ((S) (O))) (times)) (\lambda i0 : nat. (f2) (i0))). \lambda p20 : (nat) \to bool. \lambda Joker_ : ((le) (O)) (n1). \lambda sub1 : ((((((((sub_hk) (h)) (k)) (O)) ((S) (m))) (p1)) (p20)) (f1)) (f2). \lambda sub2 : ((((((((sub_hk) (k)) (h)) ((S) (m))) (O)) (p20)) (p1)) (f2)) (f1). \lambda x2571 : nat. \lambda x2572 : nat. ((((((rewrite_l) (nat)) (((times) (((div) (x2571)) (x2572))) (x2572))) (\lambda Joker_1 : nat. (((eq) (nat)) (x2571)) (((plus) (Joker_1)) (((mod) (x2571)) (x2572))))) (((div_mod) (x2571)) (x2572))) (((times) (x2572)) (((div) (x2571)) (x2572)))) (((commutative_times) (((div) (x2571)) (x2572))) (x2572)).
definition bigop_iso : \forall n1 : nat. \forall n2 : nat. \forall p1 : (nat) \to bool. \forall p2 : (nat) \to bool. \forall f1 : (nat) \to nat. \forall f2 : (nat) \to nat. (((((((iso) (n1)) (n2)) (p1)) (p2)) (f1)) (f2)) \to (((eq) (nat)) (((((((bigop) (nat)) (n1)) (\lambda i : nat. (p1) (i))) ((S) (O))) (times)) (\lambda i : nat. (f1) (i)))) (((((((bigop) (nat)) (n2)) (\lambda i : nat. (p2) (i))) ((S) (O))) (times)) (\lambda i : nat. (f2) (i))) := \lambda n1 : nat. \lambda n2 : nat. \lambda p1 : (nat) \to bool. \lambda p2 : (nat) \to bool. \lambda f1 : (nat) \to nat. \lambda f2 : (nat) \to nat. \lambda Jokerclearme : ((((((iso) (n1)) (n2)) (p1)) (p2)) (f1)) (f2). (((((match_ex_prop) ((nat) \to nat)) (\lambda h : (nat) \to nat. ((Ex) ((nat) \to nat)) (\lambda k : (nat) \to nat. ((And) (((And) (\forall i : nat. (((lt) (i)) (n1)) \to ((((eq) (bool)) ((p1) (i))) (true)) \to (((eq) (nat)) ((f1) (i))) ((f2) ((h) (i))))) (((((((((sub_hk) (h)) (k)) (n1)) (n2)) (p1)) (p2)) (f1)) (f2)))) (((((((((sub_hk) (k)) (h)) (n2)) (n1)) (p2)) (p1)) (f2)) (f1))))) ((((eq) (nat)) (((((((bigop) (nat)) (n1)) (\lambda i : nat. (p1) (i))) ((S) (O))) (times)) (\lambda i : nat. (f1) (i)))) (((((((bigop) (nat)) (n2)) (\lambda i : nat. (p2) (i))) ((S) (O))) (times)) (\lambda i : nat. (f2) (i))))) (\lambda h : (nat) \to nat. \lambda Jokerclearme0 : ((Ex) ((nat) \to nat)) (\lambda k : (nat) \to nat. ((And) (((And) (\forall i : nat. (((lt) (i)) (n1)) \to ((((eq) (bool)) ((p1) (i))) (true)) \to (((eq) (nat)) ((f1) (i))) ((f2) ((h) (i))))) (((((((((sub_hk) (h)) (k)) (n1)) (n2)) (p1)) (p2)) (f1)) (f2)))) (((((((((sub_hk) (k)) (h)) (n2)) (n1)) (p2)) (p1)) (f2)) (f1))). (((((match_ex_prop) ((nat) \to nat)) (\lambda k : (nat) \to nat. ((And) (((And) (\forall i : nat. (((lt) (i)) (n1)) \to ((((eq) (bool)) ((p1) (i))) (true)) \to (((eq) (nat)) ((f1) (i))) ((f2) ((h) (i))))) (((((((((sub_hk) (h)) (k)) (n1)) (n2)) (p1)) (p2)) (f1)) (f2)))) (((((((((sub_hk) (k)) (h)) (n2)) (n1)) (p2)) (p1)) (f2)) (f1)))) ((((eq) (nat)) (((((((bigop) (nat)) (n1)) (\lambda i : nat. (p1) (i))) ((S) (O))) (times)) (\lambda i : nat. (f1) (i)))) (((((((bigop) (nat)) (n2)) (\lambda i : nat. (p2) (i))) ((S) (O))) (times)) (\lambda i : nat. (f2) (i))))) (\lambda k : (nat) \to nat. \lambda Jokerclearme1 : ((And) (((And) (\forall i : nat. (((lt) (i)) (n1)) \to ((((eq) (bool)) ((p1) (i))) (true)) \to (((eq) (nat)) ((f1) (i))) ((f2) ((h) (i))))) (((((((((sub_hk) (h)) (k)) (n1)) (n2)) (p1)) (p2)) (f1)) (f2)))) (((((((((sub_hk) (k)) (h)) (n2)) (n1)) (p2)) (p1)) (f2)) (f1)). (((((match_And_prop) (((And) (\forall i : nat. (((lt) (i)) (n1)) \to ((((eq) (bool)) ((p1) (i))) (true)) \to (((eq) (nat)) ((f1) (i))) ((f2) ((h) (i))))) (((((((((sub_hk) (h)) (k)) (n1)) (n2)) (p1)) (p2)) (f1)) (f2)))) (((((((((sub_hk) (k)) (h)) (n2)) (n1)) (p2)) (p1)) (f2)) (f1))) ((((eq) (nat)) (((((((bigop) (nat)) (n1)) (\lambda i : nat. (p1) (i))) ((S) (O))) (times)) (\lambda i : nat. (f1) (i)))) (((((((bigop) (nat)) (n2)) (\lambda i : nat. (p2) (i))) ((S) (O))) (times)) (\lambda i : nat. (f2) (i))))) (\lambda Jokerclearme2 : ((And) (\forall i : nat. (((lt) (i)) (n1)) \to ((((eq) (bool)) ((p1) (i))) (true)) \to (((eq) (nat)) ((f1) (i))) ((f2) ((h) (i))))) (((((((((sub_hk) (h)) (k)) (n1)) (n2)) (p1)) (p2)) (f1)) (f2)). (((((match_And_prop) (\forall i : nat. (((lt) (i)) (n1)) \to ((((eq) (bool)) ((p1) (i))) (true)) \to (((eq) (nat)) ((f1) (i))) ((f2) ((h) (i))))) (((((((((sub_hk) (h)) (k)) (n1)) (n2)) (p1)) (p2)) (f1)) (f2))) ((((((((((sub_hk) (k)) (h)) (n2)) (n1)) (p2)) (p1)) (f2)) (f1)) \to (((eq) (nat)) (((((((bigop) (nat)) (n1)) (\lambda i : nat. (p1) (i))) ((S) (O))) (times)) (\lambda i : nat. (f1) (i)))) (((((((bigop) (nat)) (n2)) (\lambda i : nat. (p2) (i))) ((S) (O))) (times)) (\lambda i : nat. (f2) (i))))) (\lambda same : \forall i : nat. (((lt) (i)) (n1)) \to ((((eq) (bool)) ((p1) (i))) (true)) \to (((eq) (nat)) ((f1) (i))) ((f2) ((h) (i))). (((le_gen) (\lambda Joker_ : nat. (((((((((sub_hk) (h)) (k)) (Joker_)) (n2)) (p1)) (p2)) (f1)) (f2)) \to (((((((((sub_hk) (k)) (h)) (n2)) (Joker_)) (p2)) (p1)) (f2)) (f1)) \to (((eq) (nat)) (((((((bigop) (nat)) (Joker_)) (\lambda i : nat. (p1) (i))) ((S) (O))) (times)) (\lambda i : nat. (f1) (i)))) (((((((bigop) (nat)) (n2)) (\lambda i : nat. (p2) (i))) ((S) (O))) (times)) (\lambda i : nat. (f2) (i))))) (n1)) (\lambda i : nat. (((((nat_ind) (\lambda Jokerx_365 : nat. \forall f : (nat) \to bool. (((le) (Jokerx_365)) (n1)) \to (((((((((sub_hk) (h)) (k)) (Jokerx_365)) (n2)) (p1)) (f)) (f1)) (f2)) \to (((((((((sub_hk) (k)) (h)) (n2)) (Jokerx_365)) (f)) (p1)) (f2)) (f1)) \to (((eq) (nat)) (((((((bigop) (nat)) (Jokerx_365)) (\lambda i0 : nat. (p1) (i0))) ((S) (O))) (times)) (\lambda i0 : nat. (f1) (i0)))) (((((((bigop) (nat)) (n2)) (\lambda i0 : nat. (f) (i0))) ((S) (O))) (times)) (\lambda i0 : nat. (f2) (i0))))) (((((nat_ind) (\lambda Jokerx_365 : nat. \forall f : (nat) \to bool. (((le) (O)) (n1)) \to (((((((((sub_hk) (h)) (k)) (O)) (Jokerx_365)) (p1)) (f)) (f1)) (f2)) \to (((((((((sub_hk) (k)) (h)) (Jokerx_365)) (O)) (f)) (p1)) (f2)) (f1)) \to (((eq) (nat)) (((((((bigop) (nat)) (O)) (\lambda i0 : nat. (p1) (i0))) ((S) (O))) (times)) (\lambda i0 : nat. (f1) (i0)))) (((((((bigop) (nat)) (Jokerx_365)) (\lambda i0 : nat. (f) (i0))) ((S) (O))) (times)) (\lambda i0 : nat. (f2) (i0))))) (\lambda f : (nat) \to bool. (((sym_eq_bigop_O) (nat)) (\lambda y : ((nat) \to bool) \to (nat) \to ((nat) \to (nat) \to nat) \to ((nat) \to nat) \to nat. (((le) (O)) (n1)) \to (((((((((sub_hk) (h)) (k)) (O)) (O)) (p1)) (f)) (f1)) (f2)) \to (((((((((sub_hk) (k)) (h)) (O)) (O)) (f)) (p1)) (f2)) (f1)) \to (((eq) (nat)) (((((((bigop) (nat)) (O)) (\lambda iO : nat. (p1) (iO))) ((S) (O))) (times)) (\lambda iO : nat. (f1) (iO)))) (((((y) (\lambda iO : nat. (f) (iO))) ((S) (O))) (times)) (\lambda iO : nat. (f2) (iO))))) ((((sym_eq_bigop_body_O) (nat)) (\lambda y : ((nat) \to bool) \to (nat) \to ((nat) \to (nat) \to nat) \to ((nat) \to nat) \to nat. (((le) (O)) (n1)) \to (((((((((sub_hk) (h)) (k)) (O)) (O)) (p1)) (f)) (f1)) (f2)) \to (((((((((sub_hk) (k)) (h)) (O)) (O)) (f)) (p1)) (f2)) (f1)) \to (((eq) (nat)) (((((((bigop) (nat)) (O)) (\lambda iO : nat. (p1) (iO))) ((S) (O))) (times)) (\lambda iO : nat. (f1) (iO)))) (((((y) (\lambda iO : nat. (f) (iO))) ((S) (O))) (times)) (\lambda iO : nat. (f2) (iO))))) ((((eq_bigop_body_O) (nat)) (\lambda y : ((nat) \to bool) \to (nat) \to ((nat) \to (nat) \to nat) \to ((nat) \to nat) \to nat. (((le) (O)) (n1)) \to (((((((((sub_hk) (h)) (k)) (O)) (O)) (p1)) (f)) (f1)) (f2)) \to (((((((((sub_hk) (k)) (h)) (O)) (O)) (f)) (p1)) (f2)) (f1)) \to (((eq) (nat)) (((((((bigop) (nat)) (O)) (\lambda iO : nat. (p1) (iO))) ((S) (O))) (times)) (\lambda iO : nat. (f1) (iO)))) (((((y) (\lambda iO : nat. (p1) (iO))) ((S) (O))) (times)) (\lambda iO : nat. (f1) (iO))))) ((((eq_bigop_O) (nat)) (\lambda y : ((nat) \to bool) \to (nat) \to ((nat) \to (nat) \to nat) \to ((nat) \to nat) \to nat. (((le) (O)) (n1)) \to (((((((((sub_hk) (h)) (k)) (O)) (O)) (p1)) (f)) (f1)) (f2)) \to (((((((((sub_hk) (k)) (h)) (O)) (O)) (f)) (p1)) (f2)) (f1)) \to (((eq) (nat)) (((((((bigop) (nat)) (O)) (\lambda iO : nat. (p1) (iO))) ((S) (O))) (times)) (\lambda iO : nat. (f1) (iO)))) (((((y) (\lambda iO : nat. (p1) (iO))) ((S) (O))) (times)) (\lambda iO : nat. (f1) (iO))))) (\lambda auto : ((le) (O)) (n1). \lambda auto' : ((((((((sub_hk) (h)) (k)) (O)) (O)) (p1)) (f)) (f1)) (f2). \lambda auto'' : ((((((((sub_hk) (k)) (h)) (O)) (O)) (f)) (p1)) (f2)) (f1). ((refl) (nat)) (((((((bigop) (nat)) (O)) (\lambda i0 : nat. (p1) (i0))) ((S) (O))) (times)) (\lambda i0 : nat. (f1) (i0))))))))) (\lambda m : nat. \lambda Hind : \forall f : (nat) \to bool. (((le) (O)) (n1)) \to (((((((((sub_hk) (h)) (k)) (O)) (m)) (p1)) (f)) (f1)) (f2)) \to (((((((((sub_hk) (k)) (h)) (m)) (O)) (f)) (p1)) (f2)) (f1)) \to (((eq) (nat)) (((((((bigop) (nat)) (O)) (\lambda i0 : nat. (p1) (i0))) ((S) (O))) (times)) (\lambda i0 : nat. (f1) (i0)))) (((((((bigop) (nat)) (m)) (\lambda i0 : nat. (f) (i0))) ((S) (O))) (times)) (\lambda i0 : nat. (f2) (i0))). \lambda p20 : (nat) \to bool. \lambda Joker_ : ((le) (O)) (n1). \lambda sub1 : ((((((((sub_hk) (h)) (k)) (O)) ((S) (m))) (p1)) (p20)) (f1)) (f2). \lambda sub2 : ((((((((sub_hk) (k)) (h)) ((S) (m))) (O)) (p20)) (p1)) (f2)) (f1). ((((((eq_ind_r) (nat)) (((((((bigop) (nat)) (m)) (\lambda i0 : nat. (p20) (i0))) ((S) (O))) (times)) (\lambda i0 : nat. (f2) (i0)))) (\lambda x : nat. (((eq) (nat)) (((((((bigop) (nat)) (O)) (\lambda i0 : nat. (p1) (i0))) ((S) (O))) (times)) (\lambda i0 : nat. (f1) (i0)))) (x))) (((((Hind) (p20)) ((le_O_n) (n1))) ((((((((((sub_hkO) (h)) (k)) (O)) (m)) (p1)) (p20)) (f1)) (f2)) (((refl) (nat)) (O)))) ((((((((((((((((transitive_sub) (\lambda x : nat. x)) (\lambda x : nat. x)) (k)) (h)) (m)) ((S) (m))) (O)) (p20)) (p20)) (p1)) (f2)) (f2)) (f1)) ((((((sub_lt) (f2)) (p20)) (m)) ((S) (m))) ((le_n_Sn) (m)))) (sub2)))) (((((((bigop) (nat)) ((S) (m))) (\lambda i0 : nat. (p20) (i0))) ((S) (O))) (times)) (\lambda i0 : nat. (f2) (i0)))) ((((((((bigop_Sfalse) (nat)) (m)) (p20)) ((S) (O))) (times)) (f2)) (((((((((((((sub0_to_false) (k)) (h)) (O)) ((S) (m))) (p1)) (p20)) (f1)) (f2)) (((refl) (nat)) (O))) (sub2)) (m)) (((((eq_coerc) (((lt) (((mod) (m)) (O))) (((plus) (((plus) (((mod) (m)) (O))) (((times) (O)) (((div) (m)) (O))))) ((S) (O))))) (((lt) (m)) ((S) (m)))) ((((lt_plus_Sn_r) (((mod) (m)) (O))) (((times) (O)) (((div) (m)) (O)))) (O))) (((((((rewrite_l) (nat)) (m)) (\lambda Joker_1 : nat. (((eq) Prop) (((lt) (((mod) (m)) (O))) (((plus) (Joker_1)) ((S) (O))))) (((lt) (m)) ((S) (m))))) (((((((rewrite_l) (nat)) (m)) (\lambda Joker_1 : nat. (((eq) Prop) (((lt) (Joker_1)) (((plus) (m)) ((S) (O))))) (((lt) (m)) ((S) (m))))) (((((((rewrite_l) (nat)) ((S) (m))) (\lambda Joker_1 : nat. (((eq) Prop) (((lt) (m)) (Joker_1))) (((lt) (m)) ((S) (m))))) (((refl) Prop) (((lt) (m)) ((S) (m))))) (((plus) (m)) ((S) (O)))) (((((((rewrite_r) (nat)) (((plus) (m)) (O))) (\lambda Joker_1 : nat. (((eq) (nat)) ((S) (Joker_1))) (((plus) (m)) ((S) (O))))) (((plus_n_Sm) (m)) (O))) (m)) ((plus_n_O) (m))))) (((mod) (m)) (O))) (((((((rewrite_r) (nat)) (((plus) (O)) (((mod) (m)) (O)))) (\lambda Joker_1 : nat. (((eq) (nat)) (m)) (Joker_1))) (((((((rewrite_l) (nat)) (((plus) (((mod) (m)) (O))) (O))) (\lambda Joker_1 : nat. (((eq) (nat)) (m)) (Joker_1))) (((((((rewrite_r) (nat)) (((times) (O)) (((div) (m)) (O)))) (\lambda Joker_1 : nat. (((eq) (nat)) (m)) (((plus) (((mod) (m)) (O))) (Joker_1)))) (((((((rewrite_l) (nat)) (((plus) (((times) (O)) (((div) (m)) (O)))) (((mod) (m)) (O)))) (\lambda Joker_1 : nat. (((eq) (nat)) (m)) (Joker_1))) (((((((((((((((((((((((let_clause_10471) (n1)) (n2)) (p1)) (p2)) (f1)) (f2)) (Jokerclearme)) (h)) (Jokerclearme0)) (k)) (Jokerclearme1)) (Jokerclearme2)) (same)) (i)) (m)) (Hind)) (p20)) (Joker_)) (sub1)) (sub2)) (m)) (O))) (((plus) (((mod) (m)) (O))) (((times) (O)) (((div) (m)) (O))))) (((commutative_plus) (((times) (O)) (((div) (m)) (O)))) (((mod) (m)) (O))))) (O)) ((times_O_n) (((div) (m)) (O))))) (((plus) (O)) (((mod) (m)) (O)))) (((commutative_plus) (((mod) (m)) (O))) (O)))) (((mod) (m)) (O))) ((plus_O_n) (((mod) (m)) (O)))))) (((plus) (((mod) (m)) (O))) (((times) (O)) (((div) (m)) (O))))) (((((((rewrite_l) (nat)) (((plus) (((times) (O)) (((div) (m)) (O)))) (((mod) (m)) (O)))) (\lambda Joker_1 : nat. (((eq) (nat)) (m)) (Joker_1))) (((((((((((((((((((((((let_clause_10471) (n1)) (n2)) (p1)) (p2)) (f1)) (f2)) (Jokerclearme)) (h)) (Jokerclearme0)) (k)) (Jokerclearme1)) (Jokerclearme2)) (same)) (i)) (m)) (Hind)) (p20)) (Joker_)) (sub1)) (sub2)) (m)) (O))) (((plus) (((mod) (m)) (O))) (((times) (O)) (((div) (m)) (O))))) (((commutative_plus) (((times) (O)) (((div) (m)) (O)))) (((mod) (m)) (O)))))))))) (n2))) (\lambda n : nat. \lambda Hind : \forall f : (nat) \to bool. (((le) (n)) (n1)) \to (((((((((sub_hk) (h)) (k)) (n)) (n2)) (p1)) (f)) (f1)) (f2)) \to (((((((((sub_hk) (k)) (h)) (n2)) (n)) (f)) (p1)) (f2)) (f1)) \to (((eq) (nat)) (((((((bigop) (nat)) (n)) (\lambda i0 : nat. (p1) (i0))) ((S) (O))) (times)) (\lambda i0 : nat. (f1) (i0)))) (((((((bigop) (nat)) (n2)) (\lambda i0 : nat. (f) (i0))) ((S) (O))) (times)) (\lambda i0 : nat. (f2) (i0))). \lambda p20 : (nat) \to bool. \lambda ltn : ((le) ((S) (n))) (n1). \lambda sub1 : ((((((((sub_hk) (h)) (k)) ((S) (n))) (n2)) (p1)) (p20)) (f1)) (f2). \lambda sub2 : ((((((((sub_hk) (k)) (h)) (n2)) ((S) (n))) (p20)) (p1)) (f2)) (f1). ((((((match_Or_prop) ((((eq) (bool)) ((p1) (n))) (true))) ((((eq) (bool)) ((p1) (n))) (false))) ((((eq) (nat)) (((((((bigop) (nat)) ((S) (n))) (\lambda i0 : nat. (p1) (i0))) ((S) (O))) (times)) (\lambda i0 : nat. (f1) (i0)))) (((((((bigop) (nat)) (n2)) (\lambda i0 : nat. (p20) (i0))) ((S) (O))) (times)) (\lambda i0 : nat. (f2) (i0))))) (\lambda p1n : (((eq) (bool)) ((p1) (n))) (true). ((((((eq_ind_r) (nat)) (((times) ((f1) (n))) (((((((bigop) (nat)) (n)) (\lambda i0 : nat. (p1) (i0))) ((S) (O))) (times)) (\lambda i0 : nat. (f1) (i0))))) (\lambda x : nat. (((eq) (nat)) (x)) (((((((bigop) (nat)) (n2)) (\lambda i0 : nat. (p20) (i0))) ((S) (O))) (times)) (\lambda i0 : nat. (f2) (i0))))) ((((((match_And_prop) (((And) (((lt) ((h) (n))) (n2))) ((((eq) (bool)) ((p20) ((h) (n)))) (true)))) ((((eq) (nat)) ((k) ((h) (n)))) (n))) ((((eq) (nat)) (((times) ((f1) (n))) (((((((bigop) (nat)) (n)) (\lambda i0 : nat. (p1) (i0))) ((S) (O))) (times)) (\lambda i0 : nat. (f1) (i0))))) (((((((bigop) (nat)) (n2)) (\lambda i0 : nat. (p20) (i0))) ((S) (O))) (times)) (\lambda i0 : nat. (f2) (i0))))) (\lambda Jokerclearme3 : ((And) (((lt) ((h) (n))) (n2))) ((((eq) (bool)) ((p20) ((h) (n)))) (true)). (((((match_And_prop) (((lt) ((h) (n))) (n2))) ((((eq) (bool)) ((p20) ((h) (n)))) (true))) (((((eq) (nat)) ((k) ((h) (n)))) (n)) \to (((eq) (nat)) (((times) ((f1) (n))) (((((((bigop) (nat)) (n)) (\lambda i0 : nat. (p1) (i0))) ((S) (O))) (times)) (\lambda i0 : nat. (f1) (i0))))) (((((((bigop) (nat)) (n2)) (\lambda i0 : nat. (p20) (i0))) ((S) (O))) (times)) (\lambda i0 : nat. (f2) (i0))))) (\lambda hn : ((lt) ((h) (n))) (n2). \lambda p2hn : (((eq) (bool)) ((p20) ((h) (n)))) (true). \lambda eqn : (((eq) (nat)) ((k) ((h) (n)))) (n). ((((((eq_ind_r) (nat)) (((times) ((f2) ((h) (n)))) (((((((bigop) (nat)) (n2)) (\lambda x : nat. ((andb) ((notb) (((eqb) ((h) (n))) (x)))) ((p20) (x)))) ((S) (O))) (times)) (\lambda x : nat. (f2) (x))))) (\lambda x : nat. (((eq) (nat)) (((times) ((f1) (n))) (((((((bigop) (nat)) (n)) (\lambda i0 : nat. (p1) (i0))) ((S) (O))) (times)) (\lambda i0 : nat. (f1) (i0))))) (x))) (((((((eq_ind_r) (nat)) ((f2) ((h) (n)))) (\lambda x : nat. (((eq) (nat)) (((times) (x)) (((((((bigop) (nat)) (n)) (\lambda i0 : nat. (p1) (i0))) ((S) (O))) (times)) (\lambda i0 : nat. (f1) (i0))))) (((times) ((f2) ((h) (n)))) (((((((bigop) (nat)) (n2)) (\lambda x0 : nat. ((andb) ((notb) (((eqb) ((h) (n))) (x0)))) ((p20) (x0)))) ((S) (O))) (times)) (\lambda x0 : nat. (f2) (x0)))))) (((((((eq_f) (nat)) (nat)) ((times) ((f2) ((h) (n))))) (((((((bigop) (nat)) (n)) (\lambda i0 : nat. (p1) (i0))) ((S) (O))) (times)) (\lambda i0 : nat. (f1) (i0)))) (((((((bigop) (nat)) (n2)) (\lambda x : nat. ((andb) ((notb) (((eqb) ((h) (n))) (x)))) ((p20) (x)))) ((S) (O))) (times)) (\lambda x : nat. (f2) (x)))) (((((Hind) (\lambda Joker_ : nat. ((andb) ((notb) (((eqb) ((h) (n))) (Joker_)))) ((p20) (Joker_)))) ((((lt_to_le) (n)) (n1)) (ltn))) (\lambda i0 : nat. \lambda ltin : ((lt) (i0)) (n). \lambda p1i : (((eq) (bool)) ((p1) (i0))) (true). (((((match_And_prop) (((And) (((lt) ((h) (i0))) (n2))) ((((eq) (bool)) ((p20) ((h) (i0)))) (true)))) ((((eq) (nat)) ((k) ((h) (i0)))) (i0))) (((And) (((And) (((lt) ((h) (i0))) (n2))) ((((eq) (bool)) (((andb) ((notb) (((eqb) ((h) (n))) ((h) (i0))))) ((p20) ((h) (i0))))) (true)))) ((((eq) (nat)) ((k) ((h) (i0)))) (i0)))) (\lambda Jokerclearme4 : ((And) (((lt) ((h) (i0))) (n2))) ((((eq) (bool)) ((p20) ((h) (i0)))) (true)). (((((match_And_prop) (((lt) ((h) (i0))) (n2))) ((((eq) (bool)) ((p20) ((h) (i0)))) (true))) (((((eq) (nat)) ((k) ((h) (i0)))) (i0)) \to ((And) (((And) (((lt) ((h) (i0))) (n2))) ((((eq) (bool)) (((andb) ((notb) (((eqb) ((h) (n))) ((h) (i0))))) ((p20) ((h) (i0))))) (true)))) ((((eq) (nat)) ((k) ((h) (i0)))) (i0)))) (\lambda h1i : ((lt) ((h) (i0))) (n2). \lambda p2h1i : (((eq) (bool)) ((p20) ((h) (i0)))) (true). \lambda eqi : (((eq) (nat)) ((k) ((h) (i0)))) (i0). \lambda z : Prop. \lambda f : (((And) (((lt) ((h) (i0))) (n2))) ((((eq) (bool)) (((andb) ((notb) (((eqb) ((h) (n))) ((h) (i0))))) ((p20) ((h) (i0))))) (true))) \to ((((eq) (nat)) ((k) ((h) (i0)))) (i0)) \to z. ((f) (\lambda z0 : Prop. \lambda f20 : (((lt) ((h) (i0))) (n2)) \to ((((eq) (bool)) (((andb) ((notb) (((eqb) ((h) (n))) ((h) (i0))))) ((p20) ((h) (i0))))) (true)) \to z0. ((f20) (h1i)) (((((((eq_ind_r) (bool)) (false)) (\lambda x : bool. (((eq) (bool)) (((andb) ((notb) (x))) ((p20) ((h) (i0))))) (true))) ((((((sym_eq_match_bool_type_false) (bool)) (false)) (true)) (\lambda y : bool. (((eq) (bool)) (((((match_bool_type) (bool)) ((p20) ((h) (i0)))) (false)) (y))) (true))) ((((((sym_eq_match_bool_type_true) (bool)) ((p20) ((h) (i0)))) (false)) (\lambda y : bool. (((eq) (bool)) (y)) (true))) (((((((rewrite_r) (bool)) (true)) (\lambda Joker_ : bool. (((eq) (bool)) (Joker_)) (true))) (((refl) (bool)) (true))) ((p20) ((h) (i0)))) (p2h1i))))) (((eqb) ((h) (n))) ((h) (i0)))) ((((not_eq_to_eqb_false) ((h) (n))) ((h) (i0))) (((((not_to_not) ((((eq) (nat)) ((h) (n))) ((h) (i0)))) ((((eq) (nat)) (i0)) (n))) (\lambda auto : (((eq) (nat)) ((h) (n))) ((h) (i0)). ((((((rewrite_r) (nat)) (n)) (\lambda Joker_ : nat. (((eq) (nat)) (Joker_)) (n))) (((refl) (nat)) (n))) (i0)) (((((((rewrite_l) (nat)) ((k) ((h) (n)))) (\lambda Joker_ : nat. (((eq) (nat)) (Joker_)) (n))) (eqn)) (i0)) (((((((rewrite_r) (nat)) ((h) (i0))) (\lambda Joker_ : nat. (((eq) (nat)) ((k) (Joker_))) (i0))) (eqi)) ((h) (n))) (auto))))) ((((lt_to_not_eq) (i0)) (n)) (ltin))))))) (((((((rewrite_r) (nat)) (i0)) (\lambda Joker_ : nat. (((eq) (nat)) (Joker_)) (i0))) (((refl) (nat)) (i0))) ((k) ((h) (i0)))) (eqi)))) (Jokerclearme4))) ((((sub1) (i0)) ((((le_S) ((S) (i0))) (n)) (ltin))) (p1i)))) (\lambda j : nat. \lambda ltj : ((lt) (j)) (n2). \lambda p2j : (((eq) (bool)) (((andb) ((notb) (((eqb) ((h) (n))) (j)))) ((p20) (j)))) (true). (((((match_And_prop) (((And) (((lt) ((k) (j))) ((S) (n)))) ((((eq) (bool)) ((p1) ((k) (j)))) (true)))) ((((eq) (nat)) ((h) ((k) (j)))) (j))) (((And) (((And) (((lt) ((k) (j))) (n))) ((((eq) (bool)) ((p1) ((k) (j)))) (true)))) ((((eq) (nat)) ((h) ((k) (j)))) (j)))) (\lambda Jokerclearme4 : ((And) (((lt) ((k) (j))) ((S) (n)))) ((((eq) (bool)) ((p1) ((k) (j)))) (true)). (((((match_And_prop) (((lt) ((k) (j))) ((S) (n)))) ((((eq) (bool)) ((p1) ((k) (j)))) (true))) (((((eq) (nat)) ((h) ((k) (j)))) (j)) \to ((And) (((And) (((lt) ((k) (j))) (n))) ((((eq) (bool)) ((p1) ((k) (j)))) (true)))) ((((eq) (nat)) ((h) ((k) (j)))) (j)))) (\lambda ltkj : ((lt) ((k) (j))) ((S) (n)). \lambda p1kj : (((eq) (bool)) ((p1) ((k) (j)))) (true). \lambda eqj : (((eq) (nat)) ((h) ((k) (j)))) (j). \lambda z : Prop. \lambda f : (((And) (((lt) ((k) (j))) (n))) ((((eq) (bool)) ((p1) ((k) (j)))) (true))) \to ((((eq) (nat)) ((h) ((k) (j)))) (j)) \to z. ((f) (\lambda z0 : Prop. \lambda f20 : (((lt) ((k) (j))) (n)) \to ((((eq) (bool)) ((p1) ((k) (j)))) (true)) \to z0. ((f20) (((((((match_Or_prop) (((lt) ((k) (j))) (n))) ((((eq) (nat)) ((k) (j))) (n))) (((lt) ((k) (j))) (n))) (\lambda auto : ((lt) ((k) (j))) (n). auto)) (\lambda eqkj : (((eq) (nat)) ((k) (j))) (n). ((falsity) (((lt) ((k) (j))) (n))) (((((((eqb_elim) ((h) (n))) (j)) (\lambda Joker_ : bool. ((((eq) (bool)) (((andb) ((notb) (Joker_))) ((p20) (j)))) (true)) \to False)) ((((((sym_eq_match_bool_type_true) (bool)) (false)) (true)) (\lambda y : bool. ((((eq) (nat)) ((h) (n))) (j)) \to ((((eq) (bool)) (((((match_bool_type) (bool)) ((p20) (j))) (false)) (y))) (true)) \to False)) ((((((sym_eq_match_bool_type_false) (bool)) ((p20) (j))) (false)) (\lambda y : bool. ((((eq) (nat)) ((h) (n))) (j)) \to ((((eq) (bool)) (y)) (true)) \to False)) (\lambda auto : (((eq) (nat)) ((h) (n))) (j). \lambda auto' : (((eq) (bool)) (false)) (true). (((absurd) ((((eq) (bool)) (true)) (false))) (((((((rewrite_r) (bool)) (true)) (\lambda Joker_ : bool. (((eq) (bool)) (true)) (Joker_))) (((refl) (bool)) (true))) (false)) (auto'))) (not_eq_true_false))))) ((((((sym_eq_match_bool_type_false) (bool)) (false)) (true)) (\lambda y : bool. ((Not) ((((eq) (nat)) ((h) (n))) (j))) \to ((((eq) (bool)) (((((match_bool_type) (bool)) ((p20) (j))) (false)) (y))) (true)) \to False)) ((((((sym_eq_match_bool_type_true) (bool)) ((p20) (j))) (false)) (\lambda y : bool. ((Not) ((((eq) (nat)) ((h) (n))) (j))) \to ((((eq) (bool)) (y)) (true)) \to False)) (\lambda auto : (Not) ((((eq) (nat)) ((h) (n))) (j)). \lambda auto' : (((eq) (bool)) ((p20) (j))) (true). (((absurd) ((((eq) (nat)) ((h) (n))) (j))) (((((((rewrite_r) (nat)) (j)) (\lambda Joker_ : nat. (((eq) (nat)) (Joker_)) (j))) (((refl) (nat)) (j))) ((h) (n))) (((((((rewrite_l) (nat)) ((k) (j))) (\lambda Joker_ : nat. (((eq) (nat)) ((h) (Joker_))) (j))) (eqj)) (n)) (eqkj)))) (auto))))) (p2j)))) ((((le_to_or_lt_eq) ((k) (j))) (n)) ((((le_S_S_to_le) ((k) (j))) (n)) (ltkj))))) (((((((rewrite_r) (bool)) (true)) (\lambda Joker_ : bool. (((eq) (bool)) (Joker_)) (true))) (((refl) (bool)) (true))) ((p1) ((k) (j)))) (p1kj)))) (((((((rewrite_r) (nat)) (j)) (\lambda Joker_ : nat. (((eq) (nat)) (Joker_)) (j))) (((refl) (nat)) (j))) ((h) ((k) (j)))) (eqj)))) (Jokerclearme4))) ((((sub2) (j)) (ltj)) ((((andb_true_r) ((notb) (((eqb) ((h) (n))) (j)))) ((p20) (j))) (p2j))))))) ((f1) (n))) ((((same) (n)) (ltn)) (((((((rewrite_r) (bool)) (true)) (\lambda Joker_ : bool. (((eq) (bool)) (Joker_)) (true))) (((refl) (bool)) (true))) ((p1) (n))) (p1n))))) (((((((bigop) (nat)) (n2)) (\lambda x : nat. (p20) (x))) ((S) (O))) (times)) (\lambda x : nat. (f2) (x)))) (((((((bigop_diff) (p20)) (f2)) ((h) (n))) (n2)) (hn)) (((((((rewrite_r) (bool)) (true)) (\lambda Joker_ : bool. (((eq) (bool)) (Joker_)) (true))) (((refl) (bool)) (true))) ((p20) ((h) (n)))) (p2hn))))) (Jokerclearme3))) ((((sub1) (n)) ((le_n) ((S) (n)))) (p1n)))) (((((((bigop) (nat)) ((S) (n))) (\lambda i0 : nat. (p1) (i0))) ((S) (O))) (times)) (\lambda i0 : nat. (f1) (i0)))) ((((((((bigop_Strue) (nat)) (n)) (p1)) ((S) (O))) (times)) (f1)) (((((((rewrite_r) (bool)) (true)) (\lambda Joker_ : bool. (((eq) (bool)) (Joker_)) (true))) (((refl) (bool)) (true))) ((p1) (n))) (p1n))))) (\lambda p1n : (((eq) (bool)) ((p1) (n))) (false). ((((((eq_ind_r) (nat)) (((((((bigop) (nat)) (n)) (\lambda i0 : nat. (p1) (i0))) ((S) (O))) (times)) (\lambda i0 : nat. (f1) (i0)))) (\lambda x : nat. (((eq) (nat)) (x)) (((((((bigop) (nat)) (n2)) (\lambda i0 : nat. (p20) (i0))) ((S) (O))) (times)) (\lambda i0 : nat. (f2) (i0))))) (((((Hind) (p20)) ((((lt_to_le) (n)) (n1)) (ltn))) ((((((((((((((((transitive_sub) (\lambda x : nat. x)) (\lambda x : nat. x)) (h)) (k)) (n)) ((S) (n))) (n2)) (p1)) (p1)) (p20)) (f1)) (f1)) (f2)) ((((((sub_lt) (f1)) (p1)) (n)) ((S) (n))) ((le_n_Sn) (n)))) (sub1))) (\lambda i0 : nat. \lambda lti : ((lt) (i0)) (n2). \lambda p2i : (((eq) (bool)) ((p20) (i0))) (true). (((((match_And_prop) (((And) (((lt) ((k) (i0))) ((S) (n)))) ((((eq) (bool)) ((p1) ((k) (i0)))) (true)))) ((((eq) (nat)) ((h) ((k) (i0)))) (i0))) (((And) (((And) (((lt) ((k) (i0))) (n))) ((((eq) (bool)) ((p1) ((k) (i0)))) (true)))) ((((eq) (nat)) ((h) ((k) (i0)))) (i0)))) (\lambda Jokerclearme3 : ((And) (((lt) ((k) (i0))) ((S) (n)))) ((((eq) (bool)) ((p1) ((k) (i0)))) (true)). (((((match_And_prop) (((lt) ((k) (i0))) ((S) (n)))) ((((eq) (bool)) ((p1) ((k) (i0)))) (true))) (((((eq) (nat)) ((h) ((k) (i0)))) (i0)) \to ((And) (((And) (((lt) ((k) (i0))) (n))) ((((eq) (bool)) ((p1) ((k) (i0)))) (true)))) ((((eq) (nat)) ((h) ((k) (i0)))) (i0)))) (\lambda ltki : ((lt) ((k) (i0))) ((S) (n)). \lambda p1ki : (((eq) (bool)) ((p1) ((k) (i0)))) (true). \lambda eqi : (((eq) (nat)) ((h) ((k) (i0)))) (i0). \lambda z : Prop. \lambda f : (((And) (((lt) ((k) (i0))) (n))) ((((eq) (bool)) ((p1) ((k) (i0)))) (true))) \to ((((eq) (nat)) ((h) ((k) (i0)))) (i0)) \to z. ((f) (\lambda z0 : Prop. \lambda f20 : (((lt) ((k) (i0))) (n)) \to ((((eq) (bool)) ((p1) ((k) (i0)))) (true)) \to z0. ((f20) (((((((match_Or_prop) (((lt) ((k) (i0))) (n))) ((((eq) (nat)) ((k) (i0))) (n))) (((lt) ((k) (i0))) (n))) (\lambda auto : ((lt) ((k) (i0))) (n). auto)) (\lambda eqki : (((eq) (nat)) ((k) (i0))) (n). ((falsity) (((lt) ((k) (i0))) (n))) ((((absurd) ((((eq) (bool)) (true)) (false))) (((((((rewrite_l) (bool)) (true)) (\lambda Joker_ : bool. (((eq) (bool)) (true)) (Joker_))) (((refl) (bool)) (true))) (false)) (((((((rewrite_l) (bool)) ((p1) (n))) (\lambda Joker_ : bool. (((eq) (bool)) (Joker_)) (false))) (p1n)) (true)) (((((((rewrite_l) (nat)) ((k) (i0))) (\lambda Joker_ : nat. (((eq) (bool)) ((p1) (Joker_))) (true))) (p1ki)) (n)) (eqki))))) (not_eq_true_false)))) ((((le_to_or_lt_eq) ((k) (i0))) (n)) ((((le_S_S_to_le) ((k) (i0))) (n)) (ltki))))) (((((((rewrite_r) (bool)) (true)) (\lambda Joker_ : bool. (((eq) (bool)) (Joker_)) (true))) (((refl) (bool)) (true))) ((p1) ((k) (i0)))) (p1ki)))) (((((((rewrite_r) (nat)) (i0)) (\lambda Joker_ : nat. (((eq) (nat)) (Joker_)) (i0))) (((refl) (nat)) (i0))) ((h) ((k) (i0)))) (eqi)))) (Jokerclearme3))) ((((sub2) (i0)) (lti)) (p2i))))) (((((((bigop) (nat)) ((S) (n))) (\lambda i0 : nat. (p1) (i0))) ((S) (O))) (times)) (\lambda i0 : nat. (f1) (i0)))) ((((((((bigop_Sfalse) (nat)) (n)) (p1)) ((S) (O))) (times)) (f1)) (((((((rewrite_r) (bool)) (false)) (\lambda Joker_ : bool. (((eq) (bool)) (Joker_)) (false))) (((refl) (bool)) (false))) ((p1) (n))) (p1n))))) ((true_or_false) ((p1) (n))))) (i)) (p2)))) (Jokerclearme2))) (Jokerclearme1))) (Jokerclearme0))) (Jokerclearme).
axiom exp : (nat) \to (nat) \to nat.
axiom exp_body : (nat) \to (nat) \to nat.
axiom eq_exp : \forall n : nat. \forall m : nat. (((leibniz) (nat)) (((exp) (n)) (m))) ((((filter_nat_type) (nat)) ((exp_body) (n))) (m)).
definition sym_eq_exp : \forall n : nat. \forall m : nat. (((leibniz) (nat)) ((((filter_nat_type) (nat)) ((exp_body) (n))) (m))) (((exp) (n)) (m)) := \lambda n : nat. \lambda m : nat. ((((sym_leibniz) (nat)) (((exp) (n)) (m))) ((((filter_nat_type) (nat)) ((exp_body) (n))) (m))) (((eq_exp) (n)) (m)).
axiom eq_exp_body_O : \forall n : nat. (((leibniz) (nat)) (((exp_body) (n)) (O))) ((S) (O)).
definition sym_eq_exp_body_O : \forall n : nat. (((leibniz) (nat)) ((S) (O))) (((exp_body) (n)) (O)) := \lambda n : nat. ((((sym_leibniz) (nat)) (((exp_body) (n)) (O))) ((S) (O))) ((eq_exp_body_O) (n)).
axiom eq_exp_body_S : \forall n : nat. \forall m : nat. (((leibniz) (nat)) (((exp_body) (n)) ((S) (m)))) (((times) (((exp) (n)) (m))) (n)).
definition sym_eq_exp_body_S : \forall n : nat. \forall m : nat. (((leibniz) (nat)) (((times) (((exp) (n)) (m))) (n))) (((exp_body) (n)) ((S) (m))) := \lambda n : nat. \lambda m : nat. ((((sym_leibniz) (nat)) (((exp_body) (n)) ((S) (m)))) (((times) (((exp) (n)) (m))) (n))) (((eq_exp_body_S) (n)) (m)).
definition lt_O_exp : \forall n : nat. \forall m : nat. (((lt) (O)) (n)) \to ((lt) (O)) (((exp) (n)) (m)) := \lambda n : nat. \lambda m : nat. ((((nat_ind) (\lambda Jokerx_365 : nat. (((lt) (O)) (n)) \to ((lt) (O)) (((exp) (n)) (Jokerx_365)))) (((((sym_eq_exp) (n)) (O)) (\lambda y : nat. (((lt) (O)) (n)) \to ((lt) (O)) (y))) (((((sym_eq_filter_nat_type_O) (nat)) ((exp_body) (n))) (\lambda y : nat. (((lt) (O)) (n)) \to ((lt) (O)) (y))) ((((sym_eq_exp_body_O) (n)) (\lambda y : nat. (((lt) (O)) (n)) \to ((lt) (O)) (y))) (\lambda auto : ((le) ((S) (O))) (n). (lt_O_S) (O)))))) (\lambda a : nat. ((((sym_eq_exp) (n)) ((S) (a))) (\lambda y : nat. ((((lt) (O)) (n)) \to ((lt) (O)) (((exp) (n)) (a))) \to (((lt) (O)) (n)) \to ((lt) (O)) (y))) ((((((sym_eq_filter_nat_type_S) (nat)) ((exp_body) (n))) (a)) (\lambda y : nat. ((((lt) (O)) (n)) \to ((lt) (O)) (((exp) (n)) (a))) \to (((lt) (O)) (n)) \to ((lt) (O)) (y))) (((((sym_eq_exp_body_S) (n)) (a)) (\lambda y : nat. ((((lt) (O)) (n)) \to ((lt) (O)) (((exp) (n)) (a))) \to (((lt) (O)) (n)) \to ((lt) (O)) (y))) (\lambda Hind : (((le) ((S) (O))) (n)) \to ((le) ((S) (O))) (((exp) (n)) (a)). \lambda posn : ((le) ((S) (O))) (n). ((eq_times_body_O) (\lambda y : (nat) \to nat. ((le) ((S) ((y) ((S) (O))))) (((times) (((exp) (n)) (a))) (n)))) (((((eq_filter_nat_type_O) ((nat) \to nat)) (times_body)) (\lambda y : (nat) \to nat. ((le) ((S) ((y) ((S) (O))))) (((times) (((exp) (n)) (a))) (n)))) ((((eq_times) (O)) (\lambda y : (nat) \to nat. ((le) ((S) ((y) ((S) (O))))) (((times) (((exp) (n)) (a))) (n)))) (((eq_plus_body_O) (\lambda y : (nat) \to nat. ((le) ((S) ((y) (((times) (O)) ((S) (O)))))) (((times) (((exp) (n)) (a))) (n)))) (((((eq_filter_nat_type_O) ((nat) \to nat)) (plus_body)) (\lambda y : (nat) \to nat. ((le) ((S) ((y) (((times) (O)) ((S) (O)))))) (((times) (((exp) (n)) (a))) (n)))) ((((eq_plus) (O)) (\lambda y : (nat) \to nat. ((le) ((S) ((y) (((times) (O)) ((S) (O)))))) (((times) (((exp) (n)) (a))) (n)))) ((((eq_plus_body_S) (O)) (\lambda y : (nat) \to nat. ((le) ((y) (((times) (O)) ((S) (O))))) (((times) (((exp) (n)) (a))) (n)))) ((((((eq_filter_nat_type_S) ((nat) \to nat)) (plus_body)) (O)) (\lambda y : (nat) \to nat. ((le) ((y) (((times) (O)) ((S) (O))))) (((times) (((exp) (n)) (a))) (n)))) ((((eq_plus) ((S) (O))) (\lambda y : (nat) \to nat. ((le) ((y) (((times) (O)) ((S) (O))))) (((times) (((exp) (n)) (a))) (n)))) ((((eq_times_body_S) (O)) (\lambda y : (nat) \to nat. ((le) ((y) ((S) (O)))) (((times) (((exp) (n)) (a))) (n)))) ((((((eq_filter_nat_type_S) ((nat) \to nat)) (times_body)) (O)) (\lambda y : (nat) \to nat. ((le) ((y) ((S) (O)))) (((times) (((exp) (n)) (a))) (n)))) ((((eq_times) ((S) (O))) (\lambda y : (nat) \to nat. ((le) ((y) ((S) (O)))) (((times) (((exp) (n)) (a))) (n)))) (((((((le_times) ((S) (O))) (((exp) (n)) (a))) ((S) (O))) (n)) ((Hind) (posn))) (posn)))))))))))))))))) (m).
definition exp_pi_l : \forall n : nat. \forall a : nat. \forall f : (nat) \to nat. (((eq) (nat)) (((times) (((exp) (a)) (n))) (((((((bigop) (nat)) (n)) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. (f) (i))))) (((((((bigop) (nat)) (n)) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. ((times) (a)) ((f) (i)))) := \lambda n : nat. \lambda a : nat. \lambda f : (nat) \to nat. ((((nat_ind) (\lambda Jokerx_365 : nat. (((eq) (nat)) (((times) (((exp) (a)) (Jokerx_365))) (((((((bigop) (nat)) (Jokerx_365)) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. (f) (i))))) (((((((bigop) (nat)) (Jokerx_365)) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. ((times) (a)) ((f) (i)))))) ((((sym_eq_bigop_O) (nat)) (\lambda y : ((nat) \to bool) \to (nat) \to ((nat) \to (nat) \to nat) \to ((nat) \to nat) \to nat. (((eq) (nat)) (((times) (((exp) (a)) (O))) (((((((bigop) (nat)) (O)) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. (f) (i))))) (((((y) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. ((times) (a)) ((f) (i)))))) ((((sym_eq_bigop_body_O) (nat)) (\lambda y : ((nat) \to bool) \to (nat) \to ((nat) \to (nat) \to nat) \to ((nat) \to nat) \to nat. (((eq) (nat)) (((times) (((exp) (a)) (O))) (((((((bigop) (nat)) (O)) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. (f) (i))))) (((((y) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. ((times) (a)) ((f) (i)))))) (((eq_times_body_O) (\lambda y : (nat) \to nat. (((eq) (nat)) (((times) (((exp) (a)) (O))) (((((((bigop) (nat)) (O)) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. (f) (i))))) ((S) ((y) ((S) (O)))))) (((((eq_filter_nat_type_O) ((nat) \to nat)) (times_body)) (\lambda y : (nat) \to nat. (((eq) (nat)) (((times) (((exp) (a)) (O))) (((((((bigop) (nat)) (O)) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. (f) (i))))) ((S) ((y) ((S) (O)))))) ((((eq_times) (O)) (\lambda y : (nat) \to nat. (((eq) (nat)) (((times) (((exp) (a)) (O))) (((((((bigop) (nat)) (O)) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. (f) (i))))) ((S) ((y) ((S) (O)))))) (((eq_plus_body_O) (\lambda y : (nat) \to nat. (((eq) (nat)) (((times) (((exp) (a)) (O))) (((((((bigop) (nat)) (O)) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. (f) (i))))) ((S) ((y) (((times) (O)) ((S) (O))))))) (((((eq_filter_nat_type_O) ((nat) \to nat)) (plus_body)) (\lambda y : (nat) \to nat. (((eq) (nat)) (((times) (((exp) (a)) (O))) (((((((bigop) (nat)) (O)) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. (f) (i))))) ((S) ((y) (((times) (O)) ((S) (O))))))) ((((eq_plus) (O)) (\lambda y : (nat) \to nat. (((eq) (nat)) (((times) (((exp) (a)) (O))) (((((((bigop) (nat)) (O)) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. (f) (i))))) ((S) ((y) (((times) (O)) ((S) (O))))))) ((((eq_plus_body_S) (O)) (\lambda y : (nat) \to nat. (((eq) (nat)) (((times) (((exp) (a)) (O))) (((((((bigop) (nat)) (O)) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. (f) (i))))) ((y) (((times) (O)) ((S) (O)))))) ((((((eq_filter_nat_type_S) ((nat) \to nat)) (plus_body)) (O)) (\lambda y : (nat) \to nat. (((eq) (nat)) (((times) (((exp) (a)) (O))) (((((((bigop) (nat)) (O)) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. (f) (i))))) ((y) (((times) (O)) ((S) (O)))))) ((((eq_plus) ((S) (O))) (\lambda y : (nat) \to nat. (((eq) (nat)) (((times) (((exp) (a)) (O))) (((((((bigop) (nat)) (O)) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. (f) (i))))) ((y) (((times) (O)) ((S) (O)))))) ((((eq_times_body_S) (O)) (\lambda y : (nat) \to nat. (((eq) (nat)) (((times) (((exp) (a)) (O))) (((((((bigop) (nat)) (O)) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. (f) (i))))) ((y) ((S) (O))))) ((((((eq_filter_nat_type_S) ((nat) \to nat)) (times_body)) (O)) (\lambda y : (nat) \to nat. (((eq) (nat)) (((times) (((exp) (a)) (O))) (((((((bigop) (nat)) (O)) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. (f) (i))))) ((y) ((S) (O))))) ((((eq_times) ((S) (O))) (\lambda y : (nat) \to nat. (((eq) (nat)) (((times) (((exp) (a)) (O))) (((((((bigop) (nat)) (O)) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. (f) (i))))) ((y) ((S) (O))))) ((((((eq_match_nat_type_O) (nat)) ((S) (O))) (\lambda k : nat. ((((match_bool_type) (nat)) (((times) (((times) (a)) ((f) (k)))) (((((((bigop) (nat)) (k)) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. ((times) (a)) ((f) (i)))))) (((((((bigop) (nat)) (k)) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. ((times) (a)) ((f) (i))))) (true))) (\lambda y : nat. (((eq) (nat)) (((times) (((exp) (a)) (O))) (((((((bigop) (nat)) (O)) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. (f) (i))))) (((times) ((S) (O))) (y)))) ((((eq_exp_body_O) (a)) (\lambda y : nat. (((eq) (nat)) (((times) (((exp) (a)) (O))) (((((((bigop) (nat)) (O)) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. (f) (i))))) (((times) (y)) (((((\lambda p : (nat) \to bool. \lambda nil : nat. \lambda op : (nat) \to (nat) \to nat. \lambda f0 : (nat) \to nat. ((((match_nat_type) (nat)) (nil)) (\lambda k : nat. ((((match_bool_type) (nat)) (((op) ((f0) (k))) (((((((bigop) (nat)) (k)) (p)) (nil)) (op)) (f0)))) (((((((bigop) (nat)) (k)) (p)) (nil)) (op)) (f0))) ((p) (k)))) (O)) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. ((times) (a)) ((f) (i))))))) (((((eq_filter_nat_type_O) (nat)) ((exp_body) (a))) (\lambda y : nat. (((eq) (nat)) (((times) (((exp) (a)) (O))) (((((((bigop) (nat)) (O)) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. (f) (i))))) (((times) (y)) (((((\lambda p : (nat) \to bool. \lambda nil : nat. \lambda op : (nat) \to (nat) \to nat. \lambda f0 : (nat) \to nat. ((((match_nat_type) (nat)) (nil)) (\lambda k : nat. ((((match_bool_type) (nat)) (((op) ((f0) (k))) (((((((bigop) (nat)) (k)) (p)) (nil)) (op)) (f0)))) (((((((bigop) (nat)) (k)) (p)) (nil)) (op)) (f0))) ((p) (k)))) (O)) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. ((times) (a)) ((f) (i))))))) (((((eq_exp) (a)) (O)) (\lambda y : nat. (((eq) (nat)) (((times) (((exp) (a)) (O))) (((((((bigop) (nat)) (O)) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. (f) (i))))) (((times) (y)) (((((\lambda p : (nat) \to bool. \lambda nil : nat. \lambda op : (nat) \to (nat) \to nat. \lambda f0 : (nat) \to nat. ((((match_nat_type) (nat)) (nil)) (\lambda k : nat. ((((match_bool_type) (nat)) (((op) ((f0) (k))) (((((((bigop) (nat)) (k)) (p)) (nil)) (op)) (f0)))) (((((((bigop) (nat)) (k)) (p)) (nil)) (op)) (f0))) ((p) (k)))) (O)) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. ((times) (a)) ((f) (i))))))) ((((((sym_eq_match_nat_type_O) (nat)) ((S) (O))) (\lambda k : nat. ((((match_bool_type) (nat)) (((times) (((times) (a)) ((f) (k)))) (((((((bigop) (nat)) (k)) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. ((times) (a)) ((f) (i)))))) (((((((bigop) (nat)) (k)) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. ((times) (a)) ((f) (i))))) (true))) (\lambda y : nat. (((eq) (nat)) (((times) (((exp) (a)) (O))) (((((((bigop) (nat)) (O)) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. (f) (i))))) (((times) (((exp) (a)) (O))) (y)))) ((((eq_bigop_body_O) (nat)) (\lambda y : ((nat) \to bool) \to (nat) \to ((nat) \to (nat) \to nat) \to ((nat) \to nat) \to nat. (((eq) (nat)) (((times) (((exp) (a)) (O))) (((((((bigop) (nat)) (O)) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. (f) (i))))) (((times) (((exp) (a)) (O))) (((((y) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. (f) (i)))))) ((((eq_bigop_O) (nat)) (\lambda y : ((nat) \to bool) \to (nat) \to ((nat) \to (nat) \to nat) \to ((nat) \to nat) \to nat. (((eq) (nat)) (((times) (((exp) (a)) (O))) (((((((bigop) (nat)) (O)) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. (f) (i))))) (((times) (((exp) (a)) (O))) (((((y) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. (f) (i)))))) (((refl) (nat)) (((times) (((exp) (a)) (O))) (((((((bigop) (nat)) (O)) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. (f) (i))))))))))))))))))))))))))) (\lambda i : nat. \lambda Hind : (((eq) (nat)) (((times) (((exp) (a)) (i))) (((((((bigop) (nat)) (i)) (\lambda i0 : nat. true)) ((S) (O))) (times)) (\lambda i0 : nat. (f) (i0))))) (((((((bigop) (nat)) (i)) (\lambda i0 : nat. true)) ((S) (O))) (times)) (\lambda i0 : nat. ((times) (a)) ((f) (i0)))). ((((((eq_ind_r) (nat)) (((times) ((f) (i))) (((((((bigop) (nat)) (i)) (\lambda i0 : nat. true)) ((S) (O))) (times)) (\lambda i0 : nat. (f) (i0))))) (\lambda x : nat. (((eq) (nat)) (((times) (((exp) (a)) ((S) (i)))) (x))) (((((((bigop) (nat)) ((S) (i))) (\lambda i0 : nat. true)) ((S) (O))) (times)) (\lambda i0 : nat. ((times) (a)) ((f) (i0)))))) (((((((eq_ind_r) (nat)) (((times) (((times) (a)) ((f) (i)))) (((((((bigop) (nat)) (i)) (\lambda i0 : nat. true)) ((S) (O))) (times)) (\lambda i0 : nat. ((times) (a)) ((f) (i0)))))) (\lambda x : nat. (((eq) (nat)) (((times) (((exp) (a)) ((S) (i)))) (((times) ((f) (i))) (((((((bigop) (nat)) (i)) (\lambda i0 : nat. true)) ((S) (O))) (times)) (\lambda i0 : nat. (f) (i0)))))) (x))) (((((((eq_ind) (nat)) (((times) (((exp) (a)) (i))) (((((((bigop) (nat)) (i)) (\lambda i0 : nat. true)) ((S) (O))) (times)) (\lambda i0 : nat. (f) (i0))))) (\lambda x_1 : nat. (((eq) (nat)) (((times) (((exp) (a)) ((S) (i)))) (((times) ((f) (i))) (((((((bigop) (nat)) (i)) (\lambda i0 : nat. true)) ((S) (O))) (times)) (\lambda i0 : nat. (f) (i0)))))) (((times) (((times) (a)) ((f) (i)))) (x_1)))) (((((((eq_ind) (nat)) (((times) (((times) (((exp) (a)) ((S) (i)))) ((f) (i)))) (((((((bigop) (nat)) (i)) (\lambda i0 : nat. true)) ((S) (O))) (times)) (\lambda i0 : nat. (f) (i0))))) (\lambda x_1 : nat. (((eq) (nat)) (x_1)) (((times) (((times) (a)) ((f) (i)))) (((times) (((exp) (a)) (i))) (((((((bigop) (nat)) (i)) (\lambda i0 : nat. true)) ((S) (O))) (times)) (\lambda i0 : nat. (f) (i0))))))) (((((((eq_ind) (nat)) (((times) (((times) (((times) (a)) ((f) (i)))) (((exp) (a)) (i)))) (((((((bigop) (nat)) (i)) (\lambda i0 : nat. true)) ((S) (O))) (times)) (\lambda i0 : nat. (f) (i0))))) (\lambda x_1 : nat. (((eq) (nat)) (((times) (((times) (((exp) (a)) ((S) (i)))) ((f) (i)))) (((((((bigop) (nat)) (i)) (\lambda i0 : nat. true)) ((S) (O))) (times)) (\lambda i0 : nat. (f) (i0))))) (x_1))) (((((((((((eq_f2) (nat)) (nat)) (nat)) (times)) (((times) (((exp) (a)) ((S) (i)))) ((f) (i)))) (((times) (((times) (a)) ((f) (i)))) (((exp) (a)) (i)))) (((((((bigop) (nat)) (i)) (\lambda i0 : nat. true)) ((S) (O))) (times)) (\lambda i0 : nat. (f) (i0)))) (((((((bigop) (nat)) (i)) (\lambda i0 : nat. true)) ((S) (O))) (times)) (\lambda i0 : nat. (f) (i0)))) (((((sym_eq_exp) (a)) ((S) (i))) (\lambda y : nat. (((eq) (nat)) (((times) (y)) ((f) (i)))) (((times) (((times) (a)) ((f) (i)))) (((exp) (a)) (i))))) ((((((sym_eq_filter_nat_type_S) (nat)) ((exp_body) (a))) (i)) (\lambda y : nat. (((eq) (nat)) (((times) (y)) ((f) (i)))) (((times) (((times) (a)) ((f) (i)))) (((exp) (a)) (i))))) (((((sym_eq_exp_body_S) (a)) (i)) (\lambda y : nat. (((eq) (nat)) (((times) (y)) ((f) (i)))) (((times) (((times) (a)) ((f) (i)))) (((exp) (a)) (i))))) (((((((rewrite_r) (nat)) (((times) (a)) (((exp) (a)) (i)))) (\lambda Joker_ : nat. (((eq) (nat)) (((times) (Joker_)) ((f) (i)))) (((times) (((times) (a)) ((f) (i)))) (((exp) (a)) (i))))) (((((((rewrite_r) (nat)) (((times) ((f) (i))) (((times) (a)) (((exp) (a)) (i))))) (\lambda Joker_ : nat. (((eq) (nat)) (Joker_)) (((times) (((times) (a)) ((f) (i)))) (((exp) (a)) (i))))) (((((((rewrite_r) (nat)) (((times) (a)) (((times) ((f) (i))) (((exp) (a)) (i))))) (\lambda Joker_ : nat. (((eq) (nat)) (Joker_)) (((times) (((times) (a)) ((f) (i)))) (((exp) (a)) (i))))) (((((((rewrite_r) (nat)) (((times) (((exp) (a)) (i))) (((times) (a)) ((f) (i))))) (\lambda Joker_ : nat. (((eq) (nat)) (((times) (a)) (((times) ((f) (i))) (((exp) (a)) (i))))) (Joker_))) (((((((rewrite_r) (nat)) (((times) (a)) (((times) (((exp) (a)) (i))) ((f) (i))))) (\lambda Joker_ : nat. (((eq) (nat)) (((times) (a)) (((times) ((f) (i))) (((exp) (a)) (i))))) (Joker_))) (((((((rewrite_r) (nat)) (((times) ((f) (i))) (((exp) (a)) (i)))) (\lambda Joker_ : nat. (((eq) (nat)) (((times) (a)) (((times) ((f) (i))) (((exp) (a)) (i))))) (((times) (a)) (Joker_)))) (((refl) (nat)) (((times) (a)) (((times) ((f) (i))) (((exp) (a)) (i)))))) (((times) (((exp) (a)) (i))) ((f) (i)))) (((commutative_times) (((exp) (a)) (i))) ((f) (i))))) (((times) (((exp) (a)) (i))) (((times) (a)) ((f) (i))))) ((((times_times) (((exp) (a)) (i))) (a)) ((f) (i))))) (((times) (((times) (a)) ((f) (i)))) (((exp) (a)) (i)))) (((commutative_times) (((times) (a)) ((f) (i)))) (((exp) (a)) (i))))) (((times) ((f) (i))) (((times) (a)) (((exp) (a)) (i))))) ((((times_times) ((f) (i))) (a)) (((exp) (a)) (i))))) (((times) (((times) (a)) (((exp) (a)) (i)))) ((f) (i)))) (((commutative_times) (((times) (a)) (((exp) (a)) (i)))) ((f) (i))))) (((times) (((exp) (a)) (i))) (a))) (((commutative_times) (((exp) (a)) (i))) (a))))))) (((refl) (nat)) (((((((bigop) (nat)) (i)) (\lambda i0 : nat. true)) ((S) (O))) (times)) (\lambda i0 : nat. (f) (i0)))))) (((times) (((times) (a)) ((f) (i)))) (((times) (((exp) (a)) (i))) (((((((bigop) (nat)) (i)) (\lambda i0 : nat. true)) ((S) (O))) (times)) (\lambda i0 : nat. (f) (i0)))))) ((((associative_times) (((times) (a)) ((f) (i)))) (((exp) (a)) (i))) (((((((bigop) (nat)) (i)) (\lambda i0 : nat. true)) ((S) (O))) (times)) (\lambda i0 : nat. (f) (i0)))))) (((times) (((exp) (a)) ((S) (i)))) (((times) ((f) (i))) (((((((bigop) (nat)) (i)) (\lambda i0 : nat. true)) ((S) (O))) (times)) (\lambda i0 : nat. (f) (i0)))))) ((((associative_times) (((exp) (a)) ((S) (i)))) ((f) (i))) (((((((bigop) (nat)) (i)) (\lambda i0 : nat. true)) ((S) (O))) (times)) (\lambda i0 : nat. (f) (i0)))))) (((((((bigop) (nat)) (i)) (\lambda i0 : nat. true)) ((S) (O))) (times)) (\lambda i0 : nat. ((times) (a)) ((f) (i0))))) (Hind))) (((((((bigop) (nat)) ((S) (i))) (\lambda i0 : nat. true)) ((S) (O))) (times)) (\lambda i0 : nat. ((times) (a)) ((f) (i0))))) ((((((((bigop_Strue) (nat)) (i)) (\lambda Joker_ : nat. true)) ((S) (O))) (times)) (\lambda Joker_ : nat. ((times) (a)) ((f) (Joker_)))) (((refl) (bool)) (true))))) (((((((bigop) (nat)) ((S) (i))) (\lambda i0 : nat. true)) ((S) (O))) (times)) (\lambda i0 : nat. (f) (i0)))) ((((((((bigop_Strue) (nat)) (i)) (\lambda Joker_ : nat. true)) ((S) (O))) (times)) (f)) (((refl) (bool)) (true))))) (n).
definition exp_pi_bc : \forall a : nat. \forall b : nat. \forall c : nat. \forall f : (nat) \to nat. (((eq) (nat)) (((times) (((exp) (a)) (((minus) (c)) (b)))) (((((((bigop) (nat)) (((minus) (c)) (b))) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. (f) (((plus) (i)) (b)))))) (((((((bigop) (nat)) (((minus) (c)) (b))) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. ((times) (a)) ((f) (((plus) (i)) (b))))) := \lambda a : nat. \lambda b : nat. \lambda c : nat. \lambda f : (nat) \to nat. (((exp_pi_l) (((minus) (c)) (b))) (a)) (\lambda Joker_ : nat. (f) (((plus) (Joker_)) (b))).
axiom divides : (nat) \to (nat) \to Prop.
axiom quotient : \forall n : nat. \forall m : nat. \forall q : nat. ((((eq) (nat)) (m)) (((times) (n)) (q))) \to ((divides) (n)) (m).
axiom match_divides_prop : \forall n : nat. \forall m : nat. \forall return_type : Prop. (\forall q : nat. ((((eq) (nat)) (m)) (((times) (n)) (q))) \to return_type) \to (((divides) (n)) (m)) \to return_type.
definition reflexive_divides : ((reflexive) (nat)) (divides) := \lambda x : nat. ((((quotient) (x)) (x)) ((S) (O))) (((((((rewrite_r) (nat)) (((times) (x)) ((S) (O)))) (\lambda Joker_ : nat. (((eq) (nat)) (Joker_)) (((times) (x)) ((S) (O))))) (((refl) (nat)) (((times) (x)) ((S) (O))))) (x)) ((times_n_1) (x))).
definition divides_to_div_mod_spec : \forall n : nat. \forall m : nat. (((lt) (O)) (n)) \to (((divides) (n)) (m)) \to ((((div_mod_spec) (m)) (n)) (((div) (m)) (n))) (O) := \lambda n : nat. \lambda m : nat. \lambda posn : ((lt) (O)) (n). \lambda Jokerclearme : ((divides) (n)) (m). (((((match_divides_prop) (n)) (m)) (((((div_mod_spec) (m)) (n)) (((div) (m)) (n))) (O))) (\lambda q : nat. \lambda eqm : (((eq) (nat)) (m)) (((times) (n)) (q)). ((((((div_mod_spec_intro) (m)) (n)) (((div) (m)) (n))) (O)) (posn)) (((((((eq_ind_r) (nat)) (((times) (n)) (q))) (\lambda x : nat. (((eq) (nat)) (x)) (((plus) (((times) (((div) (x)) (n))) (n))) (O)))) (((((((eq_ind_r) (nat)) (((times) (q)) (n))) (\lambda x : nat. (((eq) (nat)) (x)) (((plus) (((times) (((div) (x)) (n))) (n))) (O)))) (((((((eq_ind_r) (nat)) (q)) (\lambda x : nat. (((eq) (nat)) (((times) (q)) (n))) (((plus) (((times) (x)) (n))) (O)))) (((((((rewrite_r) (nat)) (((times) (n)) (q))) (\lambda Joker_ : nat. (((eq) (nat)) (Joker_)) (((plus) (((times) (q)) (n))) (O)))) (((((((rewrite_l) (nat)) (m)) (\lambda Joker_ : nat. (((eq) (nat)) (Joker_)) (((plus) (((times) (q)) (n))) (O)))) (((((((rewrite_r) (nat)) (((times) (n)) (q))) (\lambda Joker_ : nat. (((eq) (nat)) (m)) (((plus) (Joker_)) (O)))) (((((((rewrite_l) (nat)) (m)) (\lambda Joker_ : nat. (((eq) (nat)) (m)) (((plus) (Joker_)) (O)))) (((((((rewrite_l) (nat)) (m)) (\lambda Joker_ : nat. (((eq) (nat)) (m)) (Joker_))) (((refl) (nat)) (m))) (((plus) (m)) (O))) ((plus_n_O) (m)))) (((times) (n)) (q))) (eqm))) (((times) (q)) (n))) (((commutative_times) (q)) (n)))) (((times) (n)) (q))) (eqm))) (((times) (q)) (n))) (((commutative_times) (q)) (n)))) (((div) (((times) (q)) (n))) (n))) ((((div_times) (q)) (n)) (posn)))) (((times) (n)) (q))) (((commutative_times) (n)) (q)))) (m)) (eqm)))) (Jokerclearme).
definition divides_to_mod_O : \forall n : nat. \forall m : nat. (((lt) (O)) (n)) \to (((divides) (n)) (m)) \to (((eq) (nat)) (((mod) (m)) (n))) (O) := \lambda n : nat. \lambda m : nat. \lambda posn : ((lt) (O)) (n). \lambda divnm : ((divides) (n)) (m). ((((((((div_mod_spec_to_eq2) (m)) (n)) (((div) (m)) (n))) (((mod) (m)) (n))) (((div) (m)) (n))) (O)) ((((div_mod_spec_div_mod) (m)) (n)) (posn))) (((((divides_to_div_mod_spec) (n)) (m)) (posn)) (divnm)).
definition mod_O_to_divides : \forall n : nat. \forall m : nat. (((lt) (O)) (n)) \to ((((eq) (nat)) (((mod) (m)) (n))) (O)) \to ((divides) (n)) (m) := \lambda n : nat. \lambda m : nat. \lambda auto : ((lt) (O)) (n). \lambda auto' : (((eq) (nat)) (((mod) (m)) (n))) (O). ((((quotient) (n)) (m)) (((div) (m)) (n))) (((((((rewrite_l) (nat)) (((times) (n)) (((div) (m)) (n)))) (\lambda Joker_ : nat. (((eq) (nat)) (Joker_)) (((times) (n)) (((div) (m)) (n))))) (((refl) (nat)) (((times) (n)) (((div) (m)) (n))))) (m)) (((((((rewrite_r) (nat)) (((minus) (m)) (O))) (\lambda Joker_ : nat. (((eq) (nat)) (((times) (n)) (((div) (m)) (n)))) (Joker_))) (((((((rewrite_l) (nat)) (((mod) (m)) (n))) (\lambda Joker_ : nat. (((eq) (nat)) (((times) (n)) (((div) (m)) (n)))) (((minus) (m)) (Joker_)))) (((((((rewrite_l) (nat)) (((times) (((div) (m)) (n))) (n))) (\lambda Joker_ : nat. (((eq) (nat)) (Joker_)) (((minus) (m)) (((mod) (m)) (n))))) (((eq_times_div_minus_mod) (m)) (n))) (((times) (n)) (((div) (m)) (n)))) (((commutative_times) (((div) (m)) (n))) (n)))) (O)) (auto'))) (m)) ((minus_n_O) (m)))).
definition divides_n_O : \forall n : nat. ((divides) (n)) (O) := \lambda n : nat. ((((quotient) (n)) (O)) (O)) (((((((rewrite_r) (nat)) (((times) (n)) (O))) (\lambda Joker_ : nat. (((eq) (nat)) (Joker_)) (((times) (n)) (O)))) (((refl) (nat)) (((times) (n)) (O)))) (O)) ((times_n_O) (n))).
definition divides_n_n : \forall n : nat. ((divides) (n)) (n) := \lambda n : nat. (reflexive_divides) (n).
definition eq_mod_to_divides : \forall n : nat. \forall m : nat. \forall q : nat. (((lt) (O)) (q)) \to ((((eq) (nat)) (((mod) (n)) (q))) (((mod) (m)) (q))) \to ((divides) (q)) (((minus) (n)) (m)) := \lambda n : nat. \lambda m : nat. \lambda q : nat. \lambda posq : ((lt) (O)) (q). \lambda eqmod : (((eq) (nat)) (((mod) (n)) (q))) (((mod) (m)) (q)). (((((leb_elim) (n)) (m)) (\lambda Joker_ : bool. ((divides) (q)) (((minus) (n)) (m)))) (\lambda nm : ((le) (n)) (m). ((((eq_coerc) (((divides) (q)) (O))) (((divides) (q)) (((minus) (n)) (m)))) ((divides_n_O) (q))) (((((((rewrite_r) (nat)) (O)) (\lambda Joker_ : nat. (((eq) Prop) (((divides) (q)) (O))) (((divides) (q)) (Joker_)))) (((refl) Prop) (((divides) (q)) (O)))) (((minus) (n)) (m))) (((((sym_eq) (nat)) (O)) (((minus) (n)) (m))) (((((eq_coerc) ((((eq) (nat)) (((minus) (O)) (((minus) (m)) (n)))) (((minus) (((plus) (O)) (n))) (m)))) ((((eq) (nat)) (O)) (((minus) (n)) (m)))) (((((minus_le_minus_minus_comm) (m)) (n)) (O)) (nm))) (((((((rewrite_l) (nat)) (O)) (\lambda Joker_ : nat. (((eq) Prop) ((((eq) (nat)) (Joker_)) (((minus) (((plus) (O)) (n))) (m)))) ((((eq) (nat)) (O)) (((minus) (n)) (m))))) (((((((rewrite_l) (nat)) (n)) (\lambda Joker_ : nat. (((eq) Prop) ((((eq) (nat)) (O)) (((minus) (Joker_)) (m)))) ((((eq) (nat)) (O)) (((minus) (n)) (m))))) (((refl) Prop) ((((eq) (nat)) (O)) (((minus) (n)) (m))))) (((plus) (O)) (n))) ((plus_O_n) (n)))) (((minus) (O)) (((minus) (m)) (n)))) ((minus_O_n) (((minus) (m)) (n))))))))) (\lambda nm : (Not) (((le) (n)) (m)). ((((quotient) (q)) (((minus) (n)) (m))) (((minus) (((div) (n)) (q))) (((div) (m)) (q)))) (((((((eq_ind_r) (nat)) (((minus) (((times) (q)) (((div) (n)) (q)))) (((times) (q)) (((div) (m)) (q))))) (\lambda x : nat. (((eq) (nat)) (((minus) (n)) (m))) (x))) (((((((eq_ind_r) (nat)) (((times) (((div) (n)) (q))) (q))) (\lambda x : nat. (((eq) (nat)) (((minus) (n)) (m))) (((minus) (x)) (((times) (q)) (((div) (m)) (q)))))) (((((((eq_ind_r) (nat)) (((times) (((div) (m)) (q))) (q))) (\lambda x : nat. (((eq) (nat)) (((minus) (n)) (m))) (((minus) (((times) (((div) (n)) (q))) (q))) (x)))) (((((((eq_ind_r) (nat)) (((minus) (n)) (((mod) (n)) (q)))) (\lambda x : nat. (((eq) (nat)) (((minus) (n)) (m))) (((minus) (x)) (((times) (((div) (m)) (q))) (q))))) (((((((eq_ind_r) (nat)) (((minus) (n)) (((plus) (((mod) (n)) (q))) (((times) (((div) (m)) (q))) (q))))) (\lambda x : nat. (((eq) (nat)) (((minus) (n)) (m))) (x))) (((((((eq_ind_r) (nat)) (((mod) (m)) (q))) (\lambda x : nat. (((eq) (nat)) (((minus) (n)) (m))) (((minus) (n)) (((plus) (x)) (((times) (((div) (m)) (q))) (q)))))) (((((((eq_ind_r) (nat)) (((plus) (((times) (((div) (m)) (q))) (q))) (((mod) (m)) (q)))) (\lambda x : nat. (((eq) (nat)) (((minus) (n)) (m))) (((minus) (n)) (x)))) (((((((eq_ind) (nat)) (m)) (\lambda x_1 : nat. (((eq) (nat)) (((minus) (n)) (m))) (((minus) (n)) (x_1)))) (((refl) (nat)) (((minus) (n)) (m)))) (((plus) (((times) (((div) (m)) (q))) (q))) (((mod) (m)) (q)))) (((div_mod) (m)) (q)))) (((plus) (((mod) (m)) (q))) (((times) (((div) (m)) (q))) (q)))) (((commutative_plus) (((mod) (m)) (q))) (((times) (((div) (m)) (q))) (q))))) (((mod) (n)) (q))) (eqmod))) (((minus) (((minus) (n)) (((mod) (n)) (q)))) (((times) (((div) (m)) (q))) (q)))) ((((minus_plus) (n)) (((mod) (n)) (q))) (((times) (((div) (m)) (q))) (q))))) (((times) (((div) (n)) (q))) (q))) (((((((rewrite_r) (nat)) (((times) (q)) (((div) (n)) (q)))) (\lambda Joker_ : nat. (((eq) (nat)) (Joker_)) (((minus) (n)) (((mod) (n)) (q))))) (((((((rewrite_l) (nat)) (((times) (q)) (((div) (n)) (q)))) (\lambda Joker_ : nat. (((eq) (nat)) (((times) (q)) (((div) (n)) (q)))) (Joker_))) (((refl) (nat)) (((times) (q)) (((div) (n)) (q))))) (((minus) (n)) (((mod) (n)) (q)))) (((((((rewrite_l) (nat)) (((times) (((div) (n)) (q))) (q))) (\lambda Joker_ : nat. (((eq) (nat)) (Joker_)) (((minus) (n)) (((mod) (n)) (q))))) (((eq_times_div_minus_mod) (n)) (q))) (((times) (q)) (((div) (n)) (q)))) (((commutative_times) (((div) (n)) (q))) (q))))) (((times) (((div) (n)) (q))) (q))) (((commutative_times) (((div) (n)) (q))) (q))))) (((times) (q)) (((div) (m)) (q)))) (((commutative_times) (q)) (((div) (m)) (q))))) (((times) (q)) (((div) (n)) (q)))) (((commutative_times) (q)) (((div) (n)) (q))))) (((times) (q)) (((minus) (((div) (n)) (q))) (((div) (m)) (q))))) ((((distributive_times_minus) (q)) (((div) (n)) (q))) (((div) (m)) (q))))).
definition let_clause_1531 : \forall n : nat. \forall m : nat. (((lt) (O)) (m)) \to (((divides) (n)) (m)) \to \forall d : nat. ((((eq) (nat)) (m)) (((times) (n)) (O))) \to (((eq) (nat)) (m)) (O) := \lambda n : nat. \lambda m : nat. \lambda posm : ((lt) (O)) (m). \lambda Jokerclearme : ((divides) (n)) (m). \lambda d : nat. \lambda eqm : (((eq) (nat)) (m)) (((times) (n)) (O)). ((((((rewrite_r) (nat)) (((times) (n)) (O))) (\lambda Joker_ : nat. (((eq) (nat)) (m)) (Joker_))) (eqm)) (O)) ((times_n_O) (n)).
definition let_clause_15311 : \forall n : nat. \forall m : nat. (((lt) (O)) (m)) \to (((divides) (n)) (m)) \to \forall d : nat. \forall p : nat. ((((eq) (nat)) (m)) (((times) (n)) ((S) (p)))) \to (((eq) (nat)) (m)) (((plus) (n)) (((times) (n)) (p))) := \lambda n : nat. \lambda m : nat. \lambda posm : ((lt) (O)) (m). \lambda Jokerclearme : ((divides) (n)) (m). \lambda d : nat. \lambda p : nat. \lambda eqm : (((eq) (nat)) (m)) (((times) (n)) ((S) (p))). ((((((rewrite_r) (nat)) (((times) (n)) ((S) (p)))) (\lambda Joker_ : nat. (((eq) (nat)) (m)) (Joker_))) (eqm)) (((plus) (n)) (((times) (n)) (p)))) (((times_n_Sm) (n)) (p)).
definition divides_to_le : \forall n : nat. \forall m : nat. (((lt) (O)) (m)) \to (((divides) (n)) (m)) \to ((le) (n)) (m) := \lambda n : nat. \lambda m : nat. \lambda posm : ((lt) (O)) (m). \lambda Jokerclearme : ((divides) (n)) (m). (((((match_divides_prop) (n)) (m)) (((le) (n)) (m))) (\lambda d : nat. ((((match_nat_prop) (\lambda Joker_ : nat. ((((eq) (nat)) (m)) (((times) (n)) (Joker_))) \to ((le) (n)) (m))) (\lambda eqm : (((eq) (nat)) (m)) (((times) (n)) (O)). ((falsity) (((le) (n)) (m))) ((((absurd) (((le) ((S) (m))) (O))) (((((eq_coerc) (((le) ((S) (O))) (m))) (((le) ((S) (m))) (O))) (posm)) (((((((rewrite_l) (nat)) (m)) (\lambda Joker_ : nat. (((eq) Prop) (((le) ((S) (Joker_))) (m))) (((le) ((S) (m))) (O)))) (((((((rewrite_l) (nat)) (m)) (\lambda Joker_ : nat. (((eq) Prop) (((le) ((S) (m))) (m))) (((le) ((S) (m))) (Joker_)))) (((refl) Prop) (((le) ((S) (m))) (m)))) (O)) (((((((let_clause_1531) (n)) (m)) (posm)) (Jokerclearme)) (d)) (eqm)))) (O)) (((((((let_clause_1531) (n)) (m)) (posm)) (Jokerclearme)) (d)) (eqm))))) ((not_le_Sn_O) (m))))) (\lambda p : nat. \lambda eqm : (((eq) (nat)) (m)) (((times) (n)) ((S) (p))). ((((((eq_ind_r) (nat)) (((times) (n)) ((S) (p)))) (\lambda x : nat. ((le) (n)) (x))) (((((eq_coerc) (((le) (n)) (((plus) (n)) (((times) (n)) (p))))) (((le) (n)) (((times) (n)) ((S) (p))))) (((le_plus_n_r) (((times) (n)) (p))) (n))) (((((((rewrite_l) (nat)) (((plus) (n)) (((times) (n)) (p)))) (\lambda Joker_ : nat. (((eq) Prop) (((le) (n)) (((plus) (n)) (((times) (n)) (p))))) (((le) (n)) (Joker_)))) (((((((rewrite_l) (nat)) (m)) (\lambda Joker_ : nat. (((eq) Prop) (((le) (n)) (((plus) (n)) (((times) (n)) (p))))) (((le) (n)) (Joker_)))) (((((((rewrite_l) (nat)) (m)) (\lambda Joker_ : nat. (((eq) Prop) (((le) (n)) (Joker_))) (((le) (n)) (m)))) (((refl) Prop) (((le) (n)) (m)))) (((plus) (n)) (((times) (n)) (p)))) ((((((((let_clause_15311) (n)) (m)) (posm)) (Jokerclearme)) (d)) (p)) (eqm)))) (((plus) (n)) (((times) (n)) (p)))) ((((((((let_clause_15311) (n)) (m)) (posm)) (Jokerclearme)) (d)) (p)) (eqm)))) (((times) (n)) ((S) (p)))) (((times_n_Sm) (n)) (p))))) (m)) (eqm))) (d))) (Jokerclearme).
definition dividesb : (nat) \to (nat) \to bool := \lambda n : nat. \lambda m : nat. ((eqb) (((mod) (m)) (n))) (O).
definition dividesb_true_to_divides : \forall n : nat. \forall m : nat. ((((eq) (bool)) (((dividesb) (n)) (m))) (true)) \to ((divides) (n)) (m) := \lambda n : nat. \lambda m : nat. ((((((match_Or_prop) (((lt) (O)) (n))) ((((eq) (nat)) (O)) (n))) (((((eq) (bool)) (((dividesb) (n)) (m))) (true)) \to ((divides) (n)) (m))) (\lambda posn : ((lt) (O)) (n). \lambda divbnm : (((eq) (bool)) (((dividesb) (n)) (m))) (true). ((((mod_O_to_divides) (n)) (m)) (posn)) ((((eqb_true_to_eq) (((mod) (m)) (n))) (O)) (divbnm)))) (\lambda eqnO : (((eq) (nat)) (O)) (n). ((((((eq_ind) (nat)) (O)) (\lambda x_1 : nat. ((((eq) (bool)) (((dividesb) (x_1)) (m))) (true)) \to ((divides) (x_1)) (m))) ((((((sym_eq_match_nat_type_O) (nat)) (m)) (\lambda p : nat. (((mod_aux) (m)) (m)) (p))) (\lambda y : nat. ((((eq) (bool)) (((eqb) (y)) (O))) (true)) \to ((divides) (O)) (m))) (\lambda eqbmO : (((eq) (bool)) (((eqb) (m)) (O))) (true). ((((((eq_ind_r) (nat)) (O)) (\lambda x : nat. ((divides) (O)) (x))) ((divides_n_n) (O))) (m)) ((((eqb_true_to_eq) (m)) (O)) (eqbmO))))) (n)) (eqnO))) ((((le_to_or_lt_eq) (O)) (n)) ((le_O_n) (n))).
definition dividesb_false_to_not_divides : \forall n : nat. \forall m : nat. ((((eq) (bool)) (((dividesb) (n)) (m))) (false)) \to (Not) (((divides) (n)) (m)) := \lambda n : nat. \lambda m : nat. ((((((match_Or_prop) (((lt) (O)) (n))) ((((eq) (nat)) (O)) (n))) (((((eq) (bool)) (((dividesb) (n)) (m))) (false)) \to (Not) (((divides) (n)) (m)))) (\lambda posn : ((lt) (O)) (n). \lambda ndivbnm : (((eq) (bool)) (((dividesb) (n)) (m))) (false). ((((not_to_not) (((divides) (n)) (m))) ((((eq) (nat)) (((mod) (m)) (n))) (O))) ((((divides_to_mod_O) (n)) (m)) (posn))) ((((eqb_false_to_not_eq) (((mod) (m)) (n))) (O)) (ndivbnm)))) (\lambda eqnO : (((eq) (nat)) (O)) (n). ((((((eq_ind) (nat)) (O)) (\lambda x_1 : nat. ((((eq) (bool)) (((dividesb) (x_1)) (m))) (false)) \to (Not) (((divides) (x_1)) (m)))) ((((((sym_eq_match_nat_type_O) (nat)) (m)) (\lambda p : nat. (((mod_aux) (m)) (m)) (p))) (\lambda y : nat. ((((eq) (bool)) (((eqb) (y)) (O))) (false)) \to (Not) (((divides) (O)) (m)))) (((((nat_case) (m)) (\lambda Joker_ : nat. ((((eq) (bool)) (((eqb) (Joker_)) (O))) (false)) \to (Not) (((divides) (O)) (Joker_)))) ((((sym_eq_eqb) (O)) (\lambda y : (nat) \to bool. ((((eq) (nat)) (m)) (O)) \to ((((eq) (bool)) ((y) (O))) (false)) \to (Not) (((divides) (O)) (O)))) (((((sym_eq_filter_nat_type_O) ((nat) \to bool)) (eqb_body)) (\lambda y : (nat) \to bool. ((((eq) (nat)) (m)) (O)) \to ((((eq) (bool)) ((y) (O))) (false)) \to (Not) (((divides) (O)) (O)))) (((sym_eq_eqb_body_O) (\lambda y : (nat) \to bool. ((((eq) (nat)) (m)) (O)) \to ((((eq) (bool)) ((y) (O))) (false)) \to (Not) (((divides) (O)) (O)))) ((((((sym_eq_match_nat_type_O) (bool)) (true)) (\lambda q : nat. false)) (\lambda y : bool. ((((eq) (nat)) (m)) (O)) \to ((((eq) (bool)) (y)) (false)) \to (Not) (((divides) (O)) (O)))) (\lambda auto : (((eq) (nat)) (m)) (O). \lambda auto' : (((eq) (bool)) (true)) (false). ((((not_to_not) (((divides) (O)) (O))) ((((eq) (bool)) (true)) (false))) (\lambda auto'' : ((divides) (O)) (O). ((((((rewrite_l) (bool)) (true)) (\lambda Joker_ : bool. (((eq) (bool)) (true)) (Joker_))) (((refl) (bool)) (true))) (false)) (auto'))) (not_eq_true_false))))))) (\lambda a : nat. \lambda Joker_ : (((eq) (nat)) (m)) ((S) (a)). \lambda Joker0 : (((eq) (bool)) (((eqb) ((S) (a))) (O))) (false). \lambda Jokerclearme : ((divides) (O)) ((S) (a)). (((((match_divides_prop) (O)) ((S) (a))) (False)) (\lambda q : nat. \lambda auto : (((eq) (nat)) ((S) (a))) (((times) (O)) (q)). (((absurd) ((((eq) (nat)) (O)) ((S) (a)))) (((((((rewrite_r) (nat)) (n)) (\lambda Joker_1 : nat. (((eq) (nat)) (Joker_1)) ((S) (a)))) (((((((rewrite_l) (nat)) ((S) (a))) (\lambda Joker_1 : nat. (((eq) (nat)) (Joker_1)) ((S) (a)))) (((refl) (nat)) ((S) (a)))) (n)) (((((((rewrite_l) (nat)) (O)) (\lambda Joker_1 : nat. (((eq) (nat)) ((S) (a))) (Joker_1))) (((((((rewrite_r) (nat)) (((times) (q)) (O))) (\lambda Joker_1 : nat. (((eq) (nat)) ((S) (a))) (Joker_1))) (((((((rewrite_l) (nat)) (((times) (O)) (q))) (\lambda Joker_1 : nat. (((eq) (nat)) ((S) (a))) (Joker_1))) (auto)) (((times) (q)) (O))) (((commutative_times) (O)) (q)))) (O)) ((times_n_O) (q)))) (n)) (eqnO)))) (O)) (eqnO))) ((not_eq_O_S) (a)))) (Jokerclearme))))) (n)) (eqnO))) ((((le_to_or_lt_eq) (O)) (n)) ((le_O_n) (n))).
definition decidable_divides : \forall n : nat. \forall m : nat. (decidable) (((divides) (n)) (m)) := \lambda n : nat. \lambda m : nat. ((((((match_Or_prop) ((((eq) (bool)) (((dividesb) (n)) (m))) (true))) ((((eq) (bool)) (((dividesb) (n)) (m))) (false))) ((decidable) (((divides) (n)) (m)))) (\lambda auto : (((eq) (bool)) (((dividesb) (n)) (m))) (true). \lambda z : Prop. \lambda l : (((divides) (n)) (m)) \to z. \lambda r : ((Not) (((divides) (n)) (m))) \to z. (l) ((((dividesb_true_to_divides) (n)) (m)) (((((((rewrite_r) (bool)) (true)) (\lambda Joker_ : bool. (((eq) (bool)) (Joker_)) (true))) (((refl) (bool)) (true))) (((dividesb) (n)) (m))) (auto))))) (\lambda auto : (((eq) (bool)) (((dividesb) (n)) (m))) (false). \lambda z : Prop. \lambda l : (((divides) (n)) (m)) \to z. \lambda r : ((Not) (((divides) (n)) (m))) \to z. (r) ((((dividesb_false_to_not_divides) (n)) (m)) (((((((rewrite_r) (bool)) (false)) (\lambda Joker_ : bool. (((eq) (bool)) (Joker_)) (false))) (((refl) (bool)) (false))) (((dividesb) (n)) (m))) (auto))))) ((true_or_false) (((dividesb) (n)) (m))).
definition divides_to_dividesb_true : \forall n : nat. \forall m : nat. (((lt) (O)) (n)) \to (((divides) (n)) (m)) \to (((eq) (bool)) (((dividesb) (n)) (m))) (true) := \lambda n : nat. \lambda m : nat. \lambda posn : ((lt) (O)) (n). \lambda divnm : ((divides) (n)) (m). ((((((match_Or_prop) ((((eq) (bool)) (((dividesb) (n)) (m))) (true))) ((((eq) (bool)) (((dividesb) (n)) (m))) (false))) ((((eq) (bool)) (((dividesb) (n)) (m))) (true))) (\lambda auto : (((eq) (bool)) (((dividesb) (n)) (m))) (true). ((((((rewrite_r) (bool)) (true)) (\lambda Joker_ : bool. (((eq) (bool)) (Joker_)) (true))) (((refl) (bool)) (true))) (((dividesb) (n)) (m))) (auto))) (\lambda ndivbnm : (((eq) (bool)) (((dividesb) (n)) (m))) (false). ((falsity) ((((eq) (bool)) (((dividesb) (n)) (m))) (true))) ((((absurd) (((divides) (n)) (m))) (divnm)) ((((dividesb_false_to_not_divides) (n)) (m)) (((((((rewrite_r) (bool)) (false)) (\lambda Joker_ : bool. (((eq) (bool)) (Joker_)) (false))) (((refl) (bool)) (false))) (((dividesb) (n)) (m))) (ndivbnm)))))) ((true_or_false) (((dividesb) (n)) (m))).
definition not_divides_to_dividesb_false : \forall n : nat. \forall m : nat. (((lt) (O)) (n)) \to ((Not) (((divides) (n)) (m))) \to (((eq) (bool)) (((dividesb) (n)) (m))) (false) := \lambda n : nat. \lambda m : nat. \lambda posn : ((lt) (O)) (n). ((((((match_Or_prop) ((((eq) (bool)) (((dividesb) (n)) (m))) (true))) ((((eq) (bool)) (((dividesb) (n)) (m))) (false))) (((Not) (((divides) (n)) (m))) \to (((eq) (bool)) (((dividesb) (n)) (m))) (false))) (\lambda divbnm : (((eq) (bool)) (((dividesb) (n)) (m))) (true). \lambda ndivnm : (Not) (((divides) (n)) (m)). ((falsity) ((((eq) (bool)) (((dividesb) (n)) (m))) (false))) ((((absurd) (((divides) (n)) (m))) ((((dividesb_true_to_divides) (n)) (m)) (((((((rewrite_r) (bool)) (true)) (\lambda Joker_ : bool. (((eq) (bool)) (Joker_)) (true))) (((refl) (bool)) (true))) (((dividesb) (n)) (m))) (divbnm)))) (ndivnm)))) (\lambda auto : (((eq) (bool)) (((dividesb) (n)) (m))) (false). \lambda auto' : (Not) (((divides) (n)) (m)). ((((((rewrite_r) (bool)) (false)) (\lambda Joker_ : bool. (((eq) (bool)) (Joker_)) (false))) (((refl) (bool)) (false))) (((dividesb) (n)) (m))) (auto))) ((true_or_false) (((dividesb) (n)) (m))).
definition prime : (nat) \to Prop := \lambda n : nat. ((And) (((lt) ((S) (O))) (n))) (\forall m : nat. (((divides) (m)) (n)) \to (((lt) ((S) (O))) (m)) \to (((eq) (nat)) (m)) (n)).
definition prime_to_lt_O : \forall p : nat. ((prime) (p)) \to ((lt) (O)) (p) := \lambda p : nat. \lambda Jokerclearme : (prime) (p). (((((match_And_prop) (((lt) ((S) (O))) (p))) (\forall m : nat. (((divides) (m)) (p)) \to (((lt) ((S) (O))) (m)) \to (((eq) (nat)) (m)) (p))) (((lt) (O)) (p))) (\lambda lt1p : ((lt) ((S) (O))) (p). \lambda auto : \forall m : nat. (((divides) (m)) (p)) \to (((lt) ((S) (O))) (m)) \to (((eq) (nat)) (m)) (p). (((lt_S_to_lt) (O)) (p)) (lt1p))) (Jokerclearme).
definition prime_to_lt_SO : \forall p : nat. ((prime) (p)) \to ((lt) ((S) (O))) (p) := \lambda p : nat. \lambda Jokerclearme : (prime) (p). (((((match_And_prop) (((lt) ((S) (O))) (p))) (\forall m : nat. (((divides) (m)) (p)) \to (((lt) ((S) (O))) (m)) \to (((eq) (nat)) (m)) (p))) (((lt) ((S) (O))) (p))) (\lambda lt1p : ((lt) ((S) (O))) (p). \lambda auto : \forall m : nat. (((divides) (m)) (p)) \to (((lt) ((S) (O))) (m)) \to (((eq) (nat)) (m)) (p). lt1p)) (Jokerclearme).
definition injn : ((nat) \to nat) \to (nat) \to Prop := \lambda f : (nat) \to nat. \lambda n : nat. \forall i : nat. \forall j : nat. (((le) (i)) (n)) \to (((le) (j)) (n)) \to ((((eq) (nat)) ((f) (i))) ((f) (j))) \to (((eq) (nat)) (i)) (j).
definition injn_Sn_n : \forall f : (nat) \to nat. \forall n : nat. (((injn) (f)) ((S) (n))) \to ((injn) (f)) (n) := \lambda f : (nat) \to nat. \lambda n : nat. \lambda H : ((injn) (f)) ((S) (n)). \lambda i : nat. \lambda j : nat. \lambda lei : ((le) (i)) (n). \lambda lej : ((le) (j)) (n). \lambda eqf : (((eq) (nat)) ((f) (i))) ((f) (j)). (((((H) (i)) (j)) ((((le_S) (i)) (n)) (lei))) ((((le_S) (j)) (n)) (lej))) (((((((rewrite_l) (nat)) ((f) (i))) (\lambda Joker_ : nat. (((eq) (nat)) ((f) (i))) (Joker_))) (((refl) (nat)) ((f) (i)))) ((f) (j))) (eqf)).
definition permut : ((nat) \to nat) \to (nat) \to Prop := \lambda f : (nat) \to nat. \lambda m : nat. ((And) (\forall i : nat. (((le) (i)) (m)) \to ((le) ((f) (i))) (m))) (((injn) (f)) (m)).
definition transpose : (nat) \to (nat) \to (nat) \to nat := \lambda i : nat. \lambda j : nat. \lambda n : nat. ((((match_bool_type) (nat)) (j)) (((((match_bool_type) (nat)) (i)) (n)) (((eqb) (n)) (j)))) (((eqb) (n)) (i)).
definition transpose_i_j_i : \forall i : nat. \forall j : nat. (((eq) (nat)) ((((transpose) (i)) (j)) (i))) (j) := \lambda i : nat. \lambda j : nat. ((((((eq_ind_r) (bool)) (true)) (\lambda x : bool. (((eq) (nat)) (((((match_bool_type) (nat)) (j)) (((((match_bool_type) (nat)) (i)) (i)) (((eqb) (i)) (j)))) (x))) (j))) ((((((eq_match_bool_type_true) (nat)) (j)) (((((match_bool_type) (nat)) (i)) (i)) (((eqb) (i)) (j)))) (\lambda y : nat. (((eq) (nat)) (((((match_bool_type) (nat)) (j)) (((((match_bool_type) (nat)) (i)) (i)) (((eqb) (i)) (j)))) (true))) (y))) (((refl) (nat)) (((((match_bool_type) (nat)) (j)) (((((match_bool_type) (nat)) (i)) (i)) (((eqb) (i)) (j)))) (true))))) (((eqb) (i)) (i))) ((eqb_n_n) (i)).
definition transpose_i_j_j : \forall i : nat. \forall j : nat. (((eq) (nat)) ((((transpose) (i)) (j)) (j))) (i) := \lambda i : nat. \lambda j : nat. ((((((match_Or_prop) ((((eq) (bool)) (((eqb) (j)) (i))) (true))) ((((eq) (bool)) (((eqb) (j)) (i))) (false))) ((((eq) (nat)) (((((match_bool_type) (nat)) (j)) (((((match_bool_type) (nat)) (i)) (j)) (((eqb) (j)) (j)))) (((eqb) (j)) (i)))) (i))) (\lambda Hc : (((eq) (bool)) (((eqb) (j)) (i))) (true). ((((((eq_ind_r) (bool)) (true)) (\lambda x : bool. (((eq) (nat)) (((((match_bool_type) (nat)) (j)) (((((match_bool_type) (nat)) (i)) (j)) (((eqb) (j)) (j)))) (x))) (i))) ((((((sym_eq_match_bool_type_true) (nat)) (j)) (((((match_bool_type) (nat)) (i)) (j)) (((eqb) (j)) (j)))) (\lambda y : nat. (((eq) (nat)) (y)) (i))) (((((((eq_ind_r) (nat)) (i)) (\lambda x : nat. (((eq) (nat)) (x)) (i))) (((refl) (nat)) (i))) (j)) ((((eqb_true_to_eq) (j)) (i)) (Hc))))) (((eqb) (j)) (i))) (Hc))) (\lambda Hc : (((eq) (bool)) (((eqb) (j)) (i))) (false). ((((((eq_ind_r) (bool)) (false)) (\lambda x : bool. (((eq) (nat)) (((((match_bool_type) (nat)) (j)) (((((match_bool_type) (nat)) (i)) (j)) (((eqb) (j)) (j)))) (x))) (i))) (((((((eq_ind_r) (bool)) (true)) (\lambda x : bool. (((eq) (nat)) (((((match_bool_type) (nat)) (j)) (((((match_bool_type) (nat)) (i)) (j)) (x))) (false))) (i))) ((((((sym_eq_match_bool_type_false) (nat)) (j)) (((((match_bool_type) (nat)) (i)) (j)) (true))) (\lambda y : nat. (((eq) (nat)) (y)) (i))) ((((((eq_match_bool_type_true) (nat)) (i)) (j)) (\lambda y : nat. (((eq) (nat)) (((((match_bool_type) (nat)) (i)) (j)) (true))) (y))) ((((((eq_match_bool_type_false) (nat)) (j)) (((((match_bool_type) (nat)) (i)) (j)) (true))) (\lambda y : nat. (((eq) (nat)) (((((match_bool_type) (nat)) (i)) (j)) (true))) (y))) ((((((eq_match_bool_type_false) (nat)) (j)) (((((match_bool_type) (nat)) (i)) (j)) (true))) (\lambda y : nat. (((eq) (nat)) (y)) (((((match_bool_type) (nat)) (j)) (((((match_bool_type) (nat)) (i)) (j)) (true))) (false)))) (((refl) (nat)) (((((match_bool_type) (nat)) (j)) (((((match_bool_type) (nat)) (i)) (j)) (true))) (false)))))))) (((eqb) (j)) (j))) ((eqb_n_n) (j)))) (((eqb) (j)) (i))) (Hc))) ((true_or_false) (((eqb) (j)) (i))).
definition transpose_i_j_j_i : \forall i : nat. \forall j : nat. \forall n : nat. (((eq) (nat)) ((((transpose) (i)) (j)) (n))) ((((transpose) (j)) (i)) (n)) := \lambda i : nat. \lambda j : nat. \lambda n : nat. ((((((match_Or_prop) ((((eq) (bool)) (((eqb) (n)) (i))) (true))) ((((eq) (bool)) (((eqb) (n)) (i))) (false))) ((((eq) (nat)) (((((match_bool_type) (nat)) (j)) (((((match_bool_type) (nat)) (i)) (n)) (((eqb) (n)) (j)))) (((eqb) (n)) (i)))) (((((match_bool_type) (nat)) (i)) (((((match_bool_type) (nat)) (j)) (n)) (((eqb) (n)) (i)))) (((eqb) (n)) (j))))) (\lambda Hni : (((eq) (bool)) (((eqb) (n)) (i))) (true). ((((((eq_ind_r) (bool)) (true)) (\lambda x : bool. (((eq) (nat)) (((((match_bool_type) (nat)) (j)) (((((match_bool_type) (nat)) (i)) (n)) (((eqb) (n)) (j)))) (x))) (((((match_bool_type) (nat)) (i)) (((((match_bool_type) (nat)) (j)) (n)) (x))) (((eqb) (n)) (j))))) (((((((match_Or_prop) ((((eq) (bool)) (((eqb) (n)) (j))) (true))) ((((eq) (bool)) (((eqb) (n)) (j))) (false))) ((((eq) (nat)) (((((match_bool_type) (nat)) (j)) (((((match_bool_type) (nat)) (i)) (n)) (((eqb) (n)) (j)))) (true))) (((((match_bool_type) (nat)) (i)) (((((match_bool_type) (nat)) (j)) (n)) (true))) (((eqb) (n)) (j))))) (\lambda Hnj : (((eq) (bool)) (((eqb) (n)) (j))) (true). ((((((eq_ind_r) (bool)) (true)) (\lambda x : bool. (((eq) (nat)) (((((match_bool_type) (nat)) (j)) (((((match_bool_type) (nat)) (i)) (n)) (x))) (true))) (((((match_bool_type) (nat)) (i)) (((((match_bool_type) (nat)) (j)) (n)) (true))) (x)))) ((((((sym_eq_match_bool_type_true) (nat)) (j)) (((((match_bool_type) (nat)) (i)) (n)) (true))) (\lambda y : nat. (((eq) (nat)) (y)) (((((match_bool_type) (nat)) (i)) (((((match_bool_type) (nat)) (j)) (n)) (true))) (true)))) ((((((sym_eq_match_bool_type_true) (nat)) (i)) (((((match_bool_type) (nat)) (j)) (n)) (true))) (\lambda y : nat. (((eq) (nat)) (j)) (y))) (((((((eq_ind) (nat)) (n)) (\lambda x_1 : nat. (((eq) (nat)) (j)) (x_1))) (((((((eq_ind) (nat)) (n)) (\lambda x_1 : nat. (((eq) (nat)) (x_1)) (n))) (((refl) (nat)) (n))) (j)) ((((eqb_true_to_eq) (n)) (j)) (Hnj)))) (i)) ((((eqb_true_to_eq) (n)) (i)) (Hni)))))) (((eqb) (n)) (j))) (Hnj))) (\lambda Hnj : (((eq) (bool)) (((eqb) (n)) (j))) (false). ((((((eq_ind_r) (bool)) (false)) (\lambda x : bool. (((eq) (nat)) (((((match_bool_type) (nat)) (j)) (((((match_bool_type) (nat)) (i)) (n)) (x))) (true))) (((((match_bool_type) (nat)) (i)) (((((match_bool_type) (nat)) (j)) (n)) (true))) (x)))) ((((((sym_eq_match_bool_type_false) (nat)) (i)) (n)) (\lambda y : nat. (((eq) (nat)) (((((match_bool_type) (nat)) (j)) (y)) (true))) (((((match_bool_type) (nat)) (i)) (((((match_bool_type) (nat)) (j)) (n)) (true))) (false)))) ((((((sym_eq_match_bool_type_false) (nat)) (i)) (((((match_bool_type) (nat)) (j)) (n)) (true))) (\lambda y : nat. (((eq) (nat)) (((((match_bool_type) (nat)) (j)) (n)) (true))) (y))) ((((((sym_eq_match_bool_type_true) (nat)) (j)) (n)) (\lambda y : nat. (((eq) (nat)) (((((match_bool_type) (nat)) (j)) (n)) (true))) (y))) ((((((sym_eq_match_bool_type_true) (nat)) (j)) (n)) (\lambda y : nat. (((eq) (nat)) (y)) (j))) (((refl) (nat)) (j))))))) (((eqb) (n)) (j))) (Hnj))) ((true_or_false) (((eqb) (n)) (j))))) (((eqb) (n)) (i))) (Hni))) (\lambda Hni : (((eq) (bool)) (((eqb) (n)) (i))) (false). ((((((eq_ind_r) (bool)) (false)) (\lambda x : bool. (((eq) (nat)) (((((match_bool_type) (nat)) (j)) (((((match_bool_type) (nat)) (i)) (n)) (((eqb) (n)) (j)))) (x))) (((((match_bool_type) (nat)) (i)) (((((match_bool_type) (nat)) (j)) (n)) (x))) (((eqb) (n)) (j))))) (((((((match_Or_prop) ((((eq) (bool)) (((eqb) (n)) (j))) (true))) ((((eq) (bool)) (((eqb) (n)) (j))) (false))) ((((eq) (nat)) (((((match_bool_type) (nat)) (j)) (((((match_bool_type) (nat)) (i)) (n)) (((eqb) (n)) (j)))) (false))) (((((match_bool_type) (nat)) (i)) (((((match_bool_type) (nat)) (j)) (n)) (false))) (((eqb) (n)) (j))))) (\lambda Hnj : (((eq) (bool)) (((eqb) (n)) (j))) (true). ((((((eq_ind_r) (bool)) (true)) (\lambda x : bool. (((eq) (nat)) (((((match_bool_type) (nat)) (j)) (((((match_bool_type) (nat)) (i)) (n)) (x))) (false))) (((((match_bool_type) (nat)) (i)) (((((match_bool_type) (nat)) (j)) (n)) (false))) (x)))) ((((((sym_eq_match_bool_type_false) (nat)) (j)) (((((match_bool_type) (nat)) (i)) (n)) (true))) (\lambda y : nat. (((eq) (nat)) (y)) (((((match_bool_type) (nat)) (i)) (((((match_bool_type) (nat)) (j)) (n)) (false))) (true)))) ((((((sym_eq_match_bool_type_false) (nat)) (j)) (n)) (\lambda y : nat. (((eq) (nat)) (((((match_bool_type) (nat)) (i)) (n)) (true))) (((((match_bool_type) (nat)) (i)) (y)) (true)))) ((((((sym_eq_match_bool_type_true) (nat)) (i)) (n)) (\lambda y : nat. (((eq) (nat)) (((((match_bool_type) (nat)) (i)) (n)) (true))) (y))) ((((((sym_eq_match_bool_type_true) (nat)) (i)) (n)) (\lambda y : nat. (((eq) (nat)) (y)) (i))) (((refl) (nat)) (i))))))) (((eqb) (n)) (j))) (Hnj))) (\lambda Hnj : (((eq) (bool)) (((eqb) (n)) (j))) (false). ((((((eq_ind_r) (bool)) (false)) (\lambda x : bool. (((eq) (nat)) (((((match_bool_type) (nat)) (j)) (((((match_bool_type) (nat)) (i)) (n)) (x))) (false))) (((((match_bool_type) (nat)) (i)) (((((match_bool_type) (nat)) (j)) (n)) (false))) (x)))) ((((((sym_eq_match_bool_type_false) (nat)) (i)) (n)) (\lambda y : nat. (((eq) (nat)) (((((match_bool_type) (nat)) (j)) (y)) (false))) (((((match_bool_type) (nat)) (i)) (((((match_bool_type) (nat)) (j)) (n)) (false))) (false)))) ((((((sym_eq_match_bool_type_false) (nat)) (j)) (n)) (\lambda y : nat. (((eq) (nat)) (((((match_bool_type) (nat)) (j)) (n)) (false))) (((((match_bool_type) (nat)) (i)) (y)) (false)))) ((((((sym_eq_match_bool_type_false) (nat)) (j)) (n)) (\lambda y : nat. (((eq) (nat)) (y)) (((((match_bool_type) (nat)) (i)) (n)) (false)))) ((((((sym_eq_match_bool_type_false) (nat)) (i)) (n)) (\lambda y : nat. (((eq) (nat)) (n)) (y))) (((refl) (nat)) (n))))))) (((eqb) (n)) (j))) (Hnj))) ((true_or_false) (((eqb) (n)) (j))))) (((eqb) (n)) (i))) (Hni))) ((true_or_false) (((eqb) (n)) (i))).
definition transpose_transpose : \forall i : nat. \forall j : nat. \forall n : nat. (((eq) (nat)) ((((transpose) (i)) (j)) ((((transpose) (i)) (j)) (n)))) (n) := \lambda i : nat. \lambda j : nat. \lambda n : nat. ((((((match_Or_prop) ((((eq) (bool)) (((eqb) (n)) (i))) (true))) ((((eq) (bool)) (((eqb) (n)) (i))) (false))) ((((eq) (nat)) (((((match_bool_type) (nat)) (j)) (((((match_bool_type) (nat)) (i)) (((((match_bool_type) (nat)) (j)) (((((match_bool_type) (nat)) (i)) (n)) (((eqb) (n)) (j)))) (((eqb) (n)) (i)))) (((eqb) (((((match_bool_type) (nat)) (j)) (((((match_bool_type) (nat)) (i)) (n)) (((eqb) (n)) (j)))) (((eqb) (n)) (i)))) (j)))) (((eqb) (((((match_bool_type) (nat)) (j)) (((((match_bool_type) (nat)) (i)) (n)) (((eqb) (n)) (j)))) (((eqb) (n)) (i)))) (i)))) (n))) (\lambda Hni : (((eq) (bool)) (((eqb) (n)) (i))) (true). ((((((eq_ind_r) (bool)) (true)) (\lambda x : bool. (((eq) (nat)) (((((match_bool_type) (nat)) (j)) (((((match_bool_type) (nat)) (i)) (((((match_bool_type) (nat)) (j)) (((((match_bool_type) (nat)) (i)) (n)) (((eqb) (n)) (j)))) (x))) (((eqb) (((((match_bool_type) (nat)) (j)) (((((match_bool_type) (nat)) (i)) (n)) (((eqb) (n)) (j)))) (x))) (j)))) (((eqb) (((((match_bool_type) (nat)) (j)) (((((match_bool_type) (nat)) (i)) (n)) (((eqb) (n)) (j)))) (x))) (i)))) (n))) ((((((sym_eq_match_bool_type_true) (nat)) (j)) (((((match_bool_type) (nat)) (i)) (n)) (((eqb) (n)) (j)))) (\lambda y : nat. (((eq) (nat)) (((((match_bool_type) (nat)) (j)) (((((match_bool_type) (nat)) (i)) (((((match_bool_type) (nat)) (j)) (((((match_bool_type) (nat)) (i)) (n)) (((eqb) (n)) (j)))) (true))) (((eqb) (((((match_bool_type) (nat)) (j)) (((((match_bool_type) (nat)) (i)) (n)) (((eqb) (n)) (j)))) (true))) (j)))) (((eqb) (y)) (i)))) (n))) ((((((sym_eq_match_bool_type_true) (nat)) (j)) (((((match_bool_type) (nat)) (i)) (n)) (((eqb) (n)) (j)))) (\lambda y : nat. (((eq) (nat)) (((((match_bool_type) (nat)) (j)) (((((match_bool_type) (nat)) (i)) (((((match_bool_type) (nat)) (j)) (((((match_bool_type) (nat)) (i)) (n)) (((eqb) (n)) (j)))) (true))) (((eqb) (y)) (j)))) (((eqb) (j)) (i)))) (n))) ((((((sym_eq_match_bool_type_true) (nat)) (j)) (((((match_bool_type) (nat)) (i)) (n)) (((eqb) (n)) (j)))) (\lambda y : nat. (((eq) (nat)) (((((match_bool_type) (nat)) (j)) (((((match_bool_type) (nat)) (i)) (y)) (((eqb) (j)) (j)))) (((eqb) (j)) (i)))) (n))) (((((((match_Or_prop) ((((eq) (bool)) (((eqb) (j)) (i))) (true))) ((((eq) (bool)) (((eqb) (j)) (i))) (false))) ((((eq) (nat)) (((((match_bool_type) (nat)) (j)) (((((match_bool_type) (nat)) (i)) (j)) (((eqb) (j)) (j)))) (((eqb) (j)) (i)))) (n))) (\lambda Hji : (((eq) (bool)) (((eqb) (j)) (i))) (true). ((((((eq_ind_r) (bool)) (true)) (\lambda x : bool. (((eq) (nat)) (((((match_bool_type) (nat)) (j)) (((((match_bool_type) (nat)) (i)) (j)) (((eqb) (j)) (j)))) (x))) (n))) ((((((sym_eq_match_bool_type_true) (nat)) (j)) (((((match_bool_type) (nat)) (i)) (j)) (((eqb) (j)) (j)))) (\lambda y : nat. (((eq) (nat)) (y)) (n))) (((((((eq_ind_r) (nat)) (i)) (\lambda x : nat. (((eq) (nat)) (j)) (x))) ((((eqb_true_to_eq) (j)) (i)) (Hji))) (n)) ((((eqb_true_to_eq) (n)) (i)) (Hni))))) (((eqb) (j)) (i))) (Hji))) (\lambda Hji : (((eq) (bool)) (((eqb) (j)) (i))) (false). ((((((eq_ind_r) (bool)) (false)) (\lambda x : bool. (((eq) (nat)) (((((match_bool_type) (nat)) (j)) (((((match_bool_type) (nat)) (i)) (j)) (((eqb) (j)) (j)))) (x))) (n))) ((((((sym_eq_match_bool_type_false) (nat)) (j)) (((((match_bool_type) (nat)) (i)) (j)) (((eqb) (j)) (j)))) (\lambda y : nat. (((eq) (nat)) (y)) (n))) (((((((eq_ind_r) (bool)) (true)) (\lambda x : bool. (((eq) (nat)) (((((match_bool_type) (nat)) (i)) (j)) (x))) (n))) ((((((sym_eq_match_bool_type_true) (nat)) (i)) (j)) (\lambda y : nat. (((eq) (nat)) (y)) (n))) (((((sym_eq) (nat)) (n)) (i)) ((((eqb_true_to_eq) (n)) (i)) (Hni))))) (((eqb) (j)) (j))) ((eqb_n_n) (j))))) (((eqb) (j)) (i))) (Hji))) ((true_or_false) (((eqb) (j)) (i)))))))) (((eqb) (n)) (i))) (Hni))) (\lambda Hni : (((eq) (bool)) (((eqb) (n)) (i))) (false). ((((((eq_ind_r) (bool)) (false)) (\lambda x : bool. (((eq) (nat)) (((((match_bool_type) (nat)) (j)) (((((match_bool_type) (nat)) (i)) (((((match_bool_type) (nat)) (j)) (((((match_bool_type) (nat)) (i)) (n)) (((eqb) (n)) (j)))) (x))) (((eqb) (((((match_bool_type) (nat)) (j)) (((((match_bool_type) (nat)) (i)) (n)) (((eqb) (n)) (j)))) (x))) (j)))) (((eqb) (((((match_bool_type) (nat)) (j)) (((((match_bool_type) (nat)) (i)) (n)) (((eqb) (n)) (j)))) (x))) (i)))) (n))) ((((((sym_eq_match_bool_type_false) (nat)) (j)) (((((match_bool_type) (nat)) (i)) (n)) (((eqb) (n)) (j)))) (\lambda y : nat. (((eq) (nat)) (((((match_bool_type) (nat)) (j)) (((((match_bool_type) (nat)) (i)) (((((match_bool_type) (nat)) (j)) (((((match_bool_type) (nat)) (i)) (n)) (((eqb) (n)) (j)))) (false))) (((eqb) (((((match_bool_type) (nat)) (j)) (((((match_bool_type) (nat)) (i)) (n)) (((eqb) (n)) (j)))) (false))) (j)))) (((eqb) (y)) (i)))) (n))) ((((((sym_eq_match_bool_type_false) (nat)) (j)) (((((match_bool_type) (nat)) (i)) (n)) (((eqb) (n)) (j)))) (\lambda y : nat. (((eq) (nat)) (((((match_bool_type) (nat)) (j)) (((((match_bool_type) (nat)) (i)) (((((match_bool_type) (nat)) (j)) (((((match_bool_type) (nat)) (i)) (n)) (((eqb) (n)) (j)))) (false))) (((eqb) (y)) (j)))) (((eqb) (((((match_bool_type) (nat)) (i)) (n)) (((eqb) (n)) (j)))) (i)))) (n))) ((((((sym_eq_match_bool_type_false) (nat)) (j)) (((((match_bool_type) (nat)) (i)) (n)) (((eqb) (n)) (j)))) (\lambda y : nat. (((eq) (nat)) (((((match_bool_type) (nat)) (j)) (((((match_bool_type) (nat)) (i)) (y)) (((eqb) (((((match_bool_type) (nat)) (i)) (n)) (((eqb) (n)) (j)))) (j)))) (((eqb) (((((match_bool_type) (nat)) (i)) (n)) (((eqb) (n)) (j)))) (i)))) (n))) (((((((match_Or_prop) ((((eq) (bool)) (((eqb) (n)) (j))) (true))) ((((eq) (bool)) (((eqb) (n)) (j))) (false))) ((((eq) (nat)) (((((match_bool_type) (nat)) (j)) (((((match_bool_type) (nat)) (i)) (((((match_bool_type) (nat)) (i)) (n)) (((eqb) (n)) (j)))) (((eqb) (((((match_bool_type) (nat)) (i)) (n)) (((eqb) (n)) (j)))) (j)))) (((eqb) (((((match_bool_type) (nat)) (i)) (n)) (((eqb) (n)) (j)))) (i)))) (n))) (\lambda Hnj : (((eq) (bool)) (((eqb) (n)) (j))) (true). ((((((eq_ind_r) (bool)) (true)) (\lambda x : bool. (((eq) (nat)) (((((match_bool_type) (nat)) (j)) (((((match_bool_type) (nat)) (i)) (((((match_bool_type) (nat)) (i)) (n)) (x))) (((eqb) (((((match_bool_type) (nat)) (i)) (n)) (x))) (j)))) (((eqb) (((((match_bool_type) (nat)) (i)) (n)) (x))) (i)))) (n))) ((((((sym_eq_match_bool_type_true) (nat)) (i)) (n)) (\lambda y : nat. (((eq) (nat)) (((((match_bool_type) (nat)) (j)) (((((match_bool_type) (nat)) (i)) (((((match_bool_type) (nat)) (i)) (n)) (true))) (((eqb) (((((match_bool_type) (nat)) (i)) (n)) (true))) (j)))) (((eqb) (y)) (i)))) (n))) ((((((sym_eq_match_bool_type_true) (nat)) (i)) (n)) (\lambda y : nat. (((eq) (nat)) (((((match_bool_type) (nat)) (j)) (((((match_bool_type) (nat)) (i)) (((((match_bool_type) (nat)) (i)) (n)) (true))) (((eqb) (y)) (j)))) (((eqb) (i)) (i)))) (n))) ((((((sym_eq_match_bool_type_true) (nat)) (i)) (n)) (\lambda y : nat. (((eq) (nat)) (((((match_bool_type) (nat)) (j)) (((((match_bool_type) (nat)) (i)) (y)) (((eqb) (i)) (j)))) (((eqb) (i)) (i)))) (n))) (((((((eq_ind_r) (bool)) (true)) (\lambda x : bool. (((eq) (nat)) (((((match_bool_type) (nat)) (j)) (((((match_bool_type) (nat)) (i)) (i)) (((eqb) (i)) (j)))) (x))) (n))) ((((((sym_eq_match_bool_type_true) (nat)) (j)) (((((match_bool_type) (nat)) (i)) (i)) (((eqb) (i)) (j)))) (\lambda y : nat. (((eq) (nat)) (y)) (n))) (((((sym_eq) (nat)) (n)) (j)) ((((eqb_true_to_eq) (n)) (j)) (Hnj))))) (((eqb) (i)) (i))) ((eqb_n_n) (i))))))) (((eqb) (n)) (j))) (Hnj))) (\lambda Hnj : (((eq) (bool)) (((eqb) (n)) (j))) (false). ((((((eq_ind_r) (bool)) (false)) (\lambda x : bool. (((eq) (nat)) (((((match_bool_type) (nat)) (j)) (((((match_bool_type) (nat)) (i)) (((((match_bool_type) (nat)) (i)) (n)) (x))) (((eqb) (((((match_bool_type) (nat)) (i)) (n)) (x))) (j)))) (((eqb) (((((match_bool_type) (nat)) (i)) (n)) (x))) (i)))) (n))) ((((((sym_eq_match_bool_type_false) (nat)) (i)) (n)) (\lambda y : nat. (((eq) (nat)) (((((match_bool_type) (nat)) (j)) (((((match_bool_type) (nat)) (i)) (((((match_bool_type) (nat)) (i)) (n)) (false))) (((eqb) (((((match_bool_type) (nat)) (i)) (n)) (false))) (j)))) (((eqb) (y)) (i)))) (n))) ((((((sym_eq_match_bool_type_false) (nat)) (i)) (n)) (\lambda y : nat. (((eq) (nat)) (((((match_bool_type) (nat)) (j)) (((((match_bool_type) (nat)) (i)) (((((match_bool_type) (nat)) (i)) (n)) (false))) (((eqb) (y)) (j)))) (((eqb) (n)) (i)))) (n))) ((((((sym_eq_match_bool_type_false) (nat)) (i)) (n)) (\lambda y : nat. (((eq) (nat)) (((((match_bool_type) (nat)) (j)) (((((match_bool_type) (nat)) (i)) (y)) (((eqb) (n)) (j)))) (((eqb) (n)) (i)))) (n))) (((((((eq_ind_r) (bool)) (false)) (\lambda x : bool. (((eq) (nat)) (((((match_bool_type) (nat)) (j)) (((((match_bool_type) (nat)) (i)) (n)) (((eqb) (n)) (j)))) (x))) (n))) (((((((eq_ind_r) (bool)) (false)) (\lambda x : bool. (((eq) (nat)) (((((match_bool_type) (nat)) (j)) (((((match_bool_type) (nat)) (i)) (n)) (x))) (false))) (n))) ((((((eq_match_bool_type_false) (nat)) (i)) (n)) (\lambda y : nat. (((eq) (nat)) (((((match_bool_type) (nat)) (j)) (((((match_bool_type) (nat)) (i)) (n)) (false))) (false))) (y))) ((((((eq_match_bool_type_false) (nat)) (j)) (((((match_bool_type) (nat)) (i)) (n)) (false))) (\lambda y : nat. (((eq) (nat)) (((((match_bool_type) (nat)) (j)) (((((match_bool_type) (nat)) (i)) (n)) (false))) (false))) (y))) (((refl) (nat)) (((((match_bool_type) (nat)) (j)) (((((match_bool_type) (nat)) (i)) (n)) (false))) (false)))))) (((eqb) (n)) (j))) (Hnj))) (((eqb) (n)) (i))) (Hni)))))) (((eqb) (n)) (j))) (Hnj))) ((true_or_false) (((eqb) (n)) (j)))))))) (((eqb) (n)) (i))) (Hni))) ((true_or_false) (((eqb) (n)) (i))).
definition injective_transpose : \forall i : nat. \forall j : nat. (((injective) (nat)) (nat)) (((transpose) (i)) (j)) := \lambda i : nat. \lambda j : nat. \lambda x : nat. \lambda y : nat. \lambda auto : (((eq) (nat)) ((((transpose) (i)) (j)) (x))) ((((transpose) (i)) (j)) (y)). ((((((rewrite_r) (nat)) (y)) (\lambda Joker_ : nat. (((eq) (nat)) (Joker_)) (y))) (((refl) (nat)) (y))) (x)) (((((((rewrite_l) (nat)) ((((transpose) (i)) (j)) ((((transpose) (i)) (j)) (x)))) (\lambda Joker_ : nat. (((eq) (nat)) (Joker_)) (y))) (((((((rewrite_r) (nat)) ((((transpose) (i)) (j)) (y))) (\lambda Joker_ : nat. (((eq) (nat)) ((((transpose) (i)) (j)) (Joker_))) (y))) ((((transpose_transpose) (i)) (j)) (y))) ((((transpose) (i)) (j)) (x))) (auto))) (x)) ((((transpose_transpose) (i)) (j)) (x))).
definition permut_S_to_permut_transpose : \forall f : (nat) \to nat. \forall m : nat. (((permut) (f)) ((S) (m))) \to ((permut) (\lambda n : nat. (((transpose) ((f) ((S) (m)))) ((S) (m))) ((f) (n)))) (m) := \lambda f : (nat) \to nat. \lambda m : nat. \lambda Jokerclearme : ((permut) (f)) ((S) (m)). (((((match_And_prop) (\forall i : nat. (((le) (i)) ((S) (m))) \to ((le) ((f) (i))) ((S) (m)))) (((injn) (f)) ((S) (m)))) (((permut) (\lambda n : nat. (((transpose) ((f) ((S) (m)))) ((S) (m))) ((f) (n)))) (m))) (\lambda permf1 : \forall i : nat. (((le) (i)) ((S) (m))) \to ((le) ((f) (i))) ((S) (m)). \lambda permf2 : ((injn) (f)) ((S) (m)). \lambda z : Prop. \lambda f2 : (\forall x : nat. (((le) (x)) (m)) \to ((le) ((((transpose) ((f) ((S) (m)))) ((S) (m))) ((f) (x)))) (m)) \to (((injn) (\lambda n : nat. (((transpose) ((f) ((S) (m)))) ((S) (m))) ((f) (n)))) (m)) \to z. ((f2) (\lambda i : nat. \lambda leim : ((le) (i)) (m). ((((((eq_ind_r) (bool)) (false)) (\lambda x : bool. ((le) (((((match_bool_type) (nat)) ((S) (m))) (((((match_bool_type) (nat)) ((f) ((S) (m)))) ((f) (i))) (((eqb) ((f) (i))) ((S) (m))))) (x))) (m))) ((((((sym_eq_match_bool_type_false) (nat)) ((S) (m))) (((((match_bool_type) (nat)) ((f) ((S) (m)))) ((f) (i))) (((eqb) ((f) (i))) ((S) (m))))) (\lambda y : nat. ((le) (y)) (m))) (((((((match_Or_prop) (((lt) ((f) (i))) ((S) (m)))) ((((eq) (nat)) ((f) (i))) ((S) (m)))) (((le) (((((match_bool_type) (nat)) ((f) ((S) (m)))) ((f) (i))) (((eqb) ((f) (i))) ((S) (m))))) (m))) (\lambda Hfi : ((lt) ((f) (i))) ((S) (m)). ((((((eq_ind_r) (bool)) (false)) (\lambda x : bool. ((le) (((((match_bool_type) (nat)) ((f) ((S) (m)))) ((f) (i))) (x))) (m))) ((((((sym_eq_match_bool_type_false) (nat)) ((f) ((S) (m)))) ((f) (i))) (\lambda y : nat. ((le) (y)) (m))) ((((le_S_S_to_le) ((f) (i))) (m)) (Hfi)))) (((eqb) ((f) (i))) ((S) (m)))) ((((not_eq_to_eqb_false) ((f) (i))) ((S) (m))) ((((lt_to_not_eq) ((f) (i))) ((S) (m))) (Hfi))))) (\lambda Hfi : (((eq) (nat)) ((f) (i))) ((S) (m)). ((((((eq_ind_r) (bool)) (true)) (\lambda x : bool. ((le) (((((match_bool_type) (nat)) ((f) ((S) (m)))) ((f) (i))) (x))) (m))) ((((((sym_eq_match_bool_type_true) (nat)) ((f) ((S) (m)))) ((f) (i))) (\lambda y : nat. ((le) (y)) (m))) (((((((match_Or_prop) (((lt) ((f) ((S) (m)))) ((S) (m)))) ((((eq) (nat)) ((f) ((S) (m)))) ((S) (m)))) (((le) ((f) ((S) (m)))) (m))) (\lambda H : ((lt) ((f) ((S) (m)))) ((S) (m)). (((le_S_S_to_le) ((f) ((S) (m)))) (m)) (H))) (\lambda H : (((eq) (nat)) ((f) ((S) (m)))) ((S) (m)). ((falsity) (((le) ((f) ((S) (m)))) (m))) ((((absurd) ((((eq) (nat)) (i)) ((S) (m)))) ((((((permf2) (i)) ((S) (m))) ((((le_S) (i)) (m)) (leim))) ((le_n) ((S) (m)))) (((((((rewrite_l) (nat)) ((f) (i))) (\lambda Joker_ : nat. (((eq) (nat)) ((f) (i))) ((f) (Joker_)))) (((((((rewrite_r) (nat)) ((f) (i))) (\lambda Joker_ : nat. (((eq) (nat)) ((f) (i))) (Joker_))) (((refl) (nat)) ((f) (i)))) ((f) ((f) (i)))) (((((((rewrite_r) (nat)) ((S) (m))) (\lambda Joker_ : nat. (((eq) (nat)) ((f) ((f) (i)))) (Joker_))) (((((((rewrite_r) (nat)) ((S) (m))) (\lambda Joker_ : nat. (((eq) (nat)) ((f) (Joker_))) ((S) (m)))) (H)) ((f) (i))) (Hfi))) ((f) (i))) (Hfi)))) ((S) (m))) (Hfi)))) (((((not_to_not) ((((eq) (nat)) (i)) ((S) (m)))) (((le) ((S) (m))) (m))) (\lambda auto : (((eq) (nat)) (i)) ((S) (m)). ((((eq_coerc) (((le) (i)) (m))) (((le) ((S) (m))) (m))) (leim)) (((((((rewrite_l) (nat)) (i)) (\lambda Joker_ : nat. (((eq) Prop) (((le) (i)) (m))) (((le) (Joker_)) (m)))) (((refl) Prop) (((le) (i)) (m)))) ((S) (m))) (auto)))) ((((lt_to_not_le) (m)) ((S) (m))) ((le_n) ((S) (m)))))))) ((((le_to_or_lt_eq) ((f) ((S) (m)))) ((S) (m))) (((permf1) ((S) (m))) ((le_n) ((S) (m)))))))) (((eqb) ((f) (i))) ((S) (m)))) ((((eq_to_eqb_true) ((f) (i))) ((S) (m))) (Hfi)))) ((((le_to_or_lt_eq) ((f) (i))) ((S) (m))) (((permf1) (i)) ((((le_S) (i)) (m)) (leim))))))) (((eqb) ((f) (i))) ((f) ((S) (m))))) ((((not_eq_to_eqb_false) ((f) (i))) ((f) ((S) (m)))) (\lambda H : (((eq) (nat)) ((f) (i))) ((f) ((S) (m))). (((absurd) ((((eq) (nat)) (i)) ((S) (m)))) ((((((permf2) (i)) ((S) (m))) ((((le_S) (i)) (m)) (leim))) ((le_n) ((S) (m)))) (H))) ((((lt_to_not_eq) (i)) ((S) (m))) ((((le_S_S) (i)) (m)) (leim))))))) (\lambda a : nat. \lambda b : nat. \lambda leam : ((le) (a)) (m). \lambda lebm : ((le) (b)) (m). \lambda H : (((eq) (nat)) ((((transpose) ((f) ((S) (m)))) ((S) (m))) ((f) (a)))) ((((transpose) ((f) ((S) (m)))) ((S) (m))) ((f) (b))). (((((permf2) (a)) (b)) ((((le_S) (a)) (m)) (leam))) ((((le_S) (b)) (m)) (lebm))) ((((((injective_transpose) ((f) ((S) (m)))) ((S) (m))) ((f) (a))) ((f) (b))) (H))))) (Jokerclearme).
definition bijn : ((nat) \to nat) \to (nat) \to Prop := \lambda f : (nat) \to nat. \lambda n : nat. \forall m : nat. (((le) (m)) (n)) \to ((Ex) (nat)) (\lambda p : nat. ((And) (((le) (p)) (n))) ((((eq) (nat)) ((f) (p))) (m))).
definition eq_to_bijn : \forall f : (nat) \to nat. \forall g : (nat) \to nat. \forall n : nat. (\forall i : nat. (((le) (i)) (n)) \to (((eq) (nat)) ((f) (i))) ((g) (i))) \to (((bijn) (f)) (n)) \to ((bijn) (g)) (n) := \lambda f : (nat) \to nat. \lambda g : (nat) \to nat. \lambda n : nat. \lambda H : \forall i : nat. (((le) (i)) (n)) \to (((eq) (nat)) ((f) (i))) ((g) (i)). \lambda bijf : ((bijn) (f)) (n). \lambda i : nat. \lambda lein : ((le) (i)) (n). (((((match_ex_prop) (nat)) (\lambda p : nat. ((And) (((le) (p)) (n))) ((((eq) (nat)) ((f) (p))) (i)))) (((Ex) (nat)) (\lambda p : nat. ((And) (((le) (p)) (n))) ((((eq) (nat)) ((g) (p))) (i))))) (\lambda a : nat. \lambda Jokerclearme : ((And) (((le) (a)) (n))) ((((eq) (nat)) ((f) (a))) (i)). (((((match_And_prop) (((le) (a)) (n))) ((((eq) (nat)) ((f) (a))) (i))) (((Ex) (nat)) (\lambda p : nat. ((And) (((le) (p)) (n))) ((((eq) (nat)) ((g) (p))) (i))))) (\lambda lean : ((le) (a)) (n). \lambda fa : (((eq) (nat)) ((f) (a))) (i). \lambda z : Prop. \lambda f2 : \forall x : nat. (((And) (((le) (x)) (n))) ((((eq) (nat)) ((g) (x))) (i))) \to z. ((f2) (a)) (\lambda z0 : Prop. \lambda f3 : (((le) (a)) (n)) \to ((((eq) (nat)) ((g) (a))) (i)) \to z0. ((f3) (lean)) (((((((eq_ind) (nat)) ((f) (a))) (\lambda x_1 : nat. (((eq) (nat)) ((g) (a))) (x_1))) (((((sym_eq) (nat)) ((f) (a))) ((g) (a))) (((H) (a)) (lean)))) (i)) (fa))))) (Jokerclearme))) (((bijf) (i)) (lein)).
definition bijn_n_Sn : \forall f : (nat) \to nat. \forall n : nat. (((bijn) (f)) (n)) \to ((((eq) (nat)) ((f) ((S) (n)))) ((S) (n))) \to ((bijn) (f)) ((S) (n)) := \lambda f : (nat) \to nat. \lambda n : nat. \lambda bijf : ((bijn) (f)) (n). \lambda fS : (((eq) (nat)) ((f) ((S) (n)))) ((S) (n)). \lambda i : nat. \lambda lein : ((le) (i)) ((S) (n)). ((((((match_Or_prop) (((lt) (i)) ((S) (n)))) ((((eq) (nat)) (i)) ((S) (n)))) (((Ex) (nat)) (\lambda p : nat. ((And) (((le) (p)) ((S) (n)))) ((((eq) (nat)) ((f) (p))) (i))))) (\lambda Hi : ((lt) (i)) ((S) (n)). (((((match_ex_prop) (nat)) (\lambda p : nat. ((And) (((le) (p)) (n))) ((((eq) (nat)) ((f) (p))) (i)))) (((Ex) (nat)) (\lambda p : nat. ((And) (((le) (p)) ((S) (n)))) ((((eq) (nat)) ((f) (p))) (i))))) (\lambda a : nat. \lambda Jokerclearme : ((And) (((le) (a)) (n))) ((((eq) (nat)) ((f) (a))) (i)). (((((match_And_prop) (((le) (a)) (n))) ((((eq) (nat)) ((f) (a))) (i))) (((Ex) (nat)) (\lambda p : nat. ((And) (((le) (p)) ((S) (n)))) ((((eq) (nat)) ((f) (p))) (i))))) (\lambda lean : ((le) (a)) (n). \lambda fa : (((eq) (nat)) ((f) (a))) (i). \lambda z : Prop. \lambda f4 : \forall x : nat. (((And) (((le) (x)) ((S) (n)))) ((((eq) (nat)) ((f) (x))) (i))) \to z. ((f4) (a)) (\lambda z0 : Prop. \lambda f5 : (((le) (a)) ((S) (n))) \to ((((eq) (nat)) ((f) (a))) (i)) \to z0. ((f5) ((((le_S) (a)) (n)) (lean))) (((((((rewrite_r) (nat)) (i)) (\lambda Joker_ : nat. (((eq) (nat)) (Joker_)) (i))) (((refl) (nat)) (i))) ((f) (a))) (fa))))) (Jokerclearme))) (((bijf) (i)) ((((le_S_S_to_le) (i)) (n)) (Hi))))) (\lambda Hi : (((eq) (nat)) (i)) ((S) (n)). \lambda z : Prop. \lambda f6 : \forall x : nat. (((And) (((le) (x)) ((S) (n)))) ((((eq) (nat)) ((f) (x))) (i))) \to z. ((f6) (i)) (\lambda z0 : Prop. \lambda f7 : (((le) (i)) ((S) (n))) \to ((((eq) (nat)) ((f) (i))) (i)) \to z0. ((f7) (((((eq_coerc) (((le) (i)) (i))) (((le) (i)) ((S) (n)))) ((le_n) (i))) (((((((rewrite_l) (nat)) (i)) (\lambda Joker_ : nat. (((eq) Prop) (((le) (i)) (i))) (((le) (i)) (Joker_)))) (((refl) Prop) (((le) (i)) (i)))) ((S) (n))) (Hi)))) (((((((rewrite_r) (nat)) (i)) (\lambda Joker_ : nat. (((eq) (nat)) (Joker_)) (i))) (((refl) (nat)) (i))) ((f) (i))) (((((((rewrite_r) (nat)) ((S) (n))) (\lambda Joker_ : nat. (((eq) (nat)) ((f) (i))) (Joker_))) (((((((rewrite_r) (nat)) ((S) (n))) (\lambda Joker_ : nat. (((eq) (nat)) ((f) (Joker_))) ((S) (n)))) (fS)) (i)) (Hi))) (i)) (Hi)))))) ((((le_to_or_lt_eq) (i)) ((S) (n))) (lein)).
definition bijn_fg : \forall f : (nat) \to nat. \forall g : (nat) \to nat. \forall n : nat. (((bijn) (f)) (n)) \to (((bijn) (g)) (n)) \to ((bijn) (\lambda p : nat. (f) ((g) (p)))) (n) := \lambda f : (nat) \to nat. \lambda g : (nat) \to nat. \lambda n : nat. \lambda bijf : ((bijn) (f)) (n). \lambda bijg : ((bijn) (g)) (n). \lambda i : nat. \lambda lein : ((le) (i)) (n). (((((match_ex_prop) (nat)) (\lambda p : nat. ((And) (((le) (p)) (n))) ((((eq) (nat)) ((f) (p))) (i)))) (((Ex) (nat)) (\lambda p : nat. ((And) (((le) (p)) (n))) ((((eq) (nat)) ((f) ((g) (p)))) (i))))) (\lambda a : nat. \lambda Jokerclearme : ((And) (((le) (a)) (n))) ((((eq) (nat)) ((f) (a))) (i)). (((((match_And_prop) (((le) (a)) (n))) ((((eq) (nat)) ((f) (a))) (i))) (((Ex) (nat)) (\lambda p : nat. ((And) (((le) (p)) (n))) ((((eq) (nat)) ((f) ((g) (p)))) (i))))) (\lambda lean : ((le) (a)) (n). \lambda ga : (((eq) (nat)) ((f) (a))) (i). (((((match_ex_prop) (nat)) (\lambda p : nat. ((And) (((le) (p)) (n))) ((((eq) (nat)) ((g) (p))) (a)))) (((Ex) (nat)) (\lambda p : nat. ((And) (((le) (p)) (n))) ((((eq) (nat)) ((f) ((g) (p)))) (i))))) (\lambda b : nat. \lambda Jokerclearme0 : ((And) (((le) (b)) (n))) ((((eq) (nat)) ((g) (b))) (a)). (((((match_And_prop) (((le) (b)) (n))) ((((eq) (nat)) ((g) (b))) (a))) (((Ex) (nat)) (\lambda p : nat. ((And) (((le) (p)) (n))) ((((eq) (nat)) ((f) ((g) (p)))) (i))))) (\lambda lebn : ((le) (b)) (n). \lambda gb : (((eq) (nat)) ((g) (b))) (a). \lambda z : Prop. \lambda f2 : \forall x : nat. (((And) (((le) (x)) (n))) ((((eq) (nat)) ((f) ((g) (x)))) (i))) \to z. ((f2) (b)) (\lambda z0 : Prop. \lambda f3 : (((le) (b)) (n)) \to ((((eq) (nat)) ((f) ((g) (b)))) (i)) \to z0. ((f3) (lebn)) (((((((rewrite_r) (nat)) (a)) (\lambda Joker_ : nat. (((eq) (nat)) ((f) (Joker_))) (i))) (((((((rewrite_r) (nat)) (i)) (\lambda Joker_ : nat. (((eq) (nat)) (Joker_)) (i))) (((refl) (nat)) (i))) ((f) (a))) (ga))) ((g) (b))) (gb))))) (Jokerclearme0))) (((bijg) (a)) (lean)))) (Jokerclearme))) (((bijf) (i)) (lein)).
definition bijn_transpose : \forall n : nat. \forall i : nat. \forall j : nat. (((le) (i)) (n)) \to (((le) (j)) (n)) \to ((bijn) (((transpose) (i)) (j))) (n) := \lambda n : nat. \lambda i : nat. \lambda j : nat. \lambda lein : ((le) (i)) (n). \lambda lejn : ((le) (j)) (n). \lambda a : nat. \lambda lean : ((le) (a)) (n). ((((((match_Or_prop) ((((eq) (bool)) (((eqb) (a)) (i))) (true))) ((((eq) (bool)) (((eqb) (a)) (i))) (false))) (((Ex) (nat)) (\lambda p : nat. ((And) (((le) (p)) (n))) ((((eq) (nat)) ((((transpose) (i)) (j)) (p))) (a))))) (\lambda Hi : (((eq) (bool)) (((eqb) (a)) (i))) (true). \lambda z : Prop. \lambda f3 : \forall x : nat. (((And) (((le) (x)) (n))) ((((eq) (nat)) ((((transpose) (i)) (j)) (x))) (a))) \to z. ((f3) (j)) (\lambda z0 : Prop. \lambda f4 : (((le) (j)) (n)) \to ((((eq) (nat)) ((((transpose) (i)) (j)) (j))) (a)) \to z0. ((f4) (lejn)) (((((((eq_ind_r) (nat)) (i)) (\lambda x : nat. (((eq) (nat)) (x)) (a))) (((((sym_eq) (nat)) (a)) (i)) ((((eqb_true_to_eq) (a)) (i)) (Hi)))) ((((transpose) (i)) (j)) (j))) (((transpose_i_j_j) (i)) (j)))))) (\lambda Hi : (((eq) (bool)) (((eqb) (a)) (i))) (false). ((((((match_Or_prop) ((((eq) (bool)) (((eqb) (a)) (j))) (true))) ((((eq) (bool)) (((eqb) (a)) (j))) (false))) (((Ex) (nat)) (\lambda p : nat. ((And) (((le) (p)) (n))) ((((eq) (nat)) ((((transpose) (i)) (j)) (p))) (a))))) (\lambda Hj : (((eq) (bool)) (((eqb) (a)) (j))) (true). \lambda z : Prop. \lambda f5 : \forall x : nat. (((And) (((le) (x)) (n))) ((((eq) (nat)) ((((transpose) (i)) (j)) (x))) (a))) \to z. ((f5) (i)) (\lambda z0 : Prop. \lambda f : (((le) (i)) (n)) \to ((((eq) (nat)) ((((transpose) (i)) (j)) (i))) (a)) \to z0. ((f) (lein)) (((((((eq_ind_r) (nat)) (j)) (\lambda x : nat. (((eq) (nat)) (x)) (a))) (((((sym_eq) (nat)) (a)) (j)) ((((eqb_true_to_eq) (a)) (j)) (Hj)))) ((((transpose) (i)) (j)) (i))) (((transpose_i_j_i) (i)) (j)))))) (\lambda Hj : (((eq) (bool)) (((eqb) (a)) (j))) (false). \lambda z : Prop. \lambda f7 : \forall x : nat. (((And) (((le) (x)) (n))) ((((eq) (nat)) ((((transpose) (i)) (j)) (x))) (a))) \to z. ((f7) (a)) (\lambda z0 : Prop. \lambda f : (((le) (a)) (n)) \to ((((eq) (nat)) ((((transpose) (i)) (j)) (a))) (a)) \to z0. ((f) (lean)) (((((((eq_ind_r) (bool)) (false)) (\lambda x : bool. (((eq) (nat)) (((((match_bool_type) (nat)) (j)) (((((match_bool_type) (nat)) (i)) (a)) (((eqb) (a)) (j)))) (x))) (a))) (((((((eq_ind_r) (bool)) (false)) (\lambda x : bool. (((eq) (nat)) (((((match_bool_type) (nat)) (j)) (((((match_bool_type) (nat)) (i)) (a)) (x))) (false))) (a))) ((((((eq_match_bool_type_false) (nat)) (i)) (a)) (\lambda y : nat. (((eq) (nat)) (((((match_bool_type) (nat)) (j)) (((((match_bool_type) (nat)) (i)) (a)) (false))) (false))) (y))) ((((((eq_match_bool_type_false) (nat)) (j)) (((((match_bool_type) (nat)) (i)) (a)) (false))) (\lambda y : nat. (((eq) (nat)) (((((match_bool_type) (nat)) (j)) (((((match_bool_type) (nat)) (i)) (a)) (false))) (false))) (y))) (((refl) (nat)) (((((match_bool_type) (nat)) (j)) (((((match_bool_type) (nat)) (i)) (a)) (false))) (false)))))) (((eqb) (a)) (j))) (Hj))) (((eqb) (a)) (i))) (Hi))))) ((true_or_false) (((eqb) (a)) (j))))) ((true_or_false) (((eqb) (a)) (i))).
definition permut_to_bijn : \forall n : nat. \forall f : (nat) \to nat. (((permut) (f)) (n)) \to ((bijn) (f)) (n) := \lambda n : nat. ((((nat_ind) (\lambda Jokerx_365 : nat. \forall f : (nat) \to nat. (((permut) (f)) (Jokerx_365)) \to ((bijn) (f)) (Jokerx_365))) (\lambda f : (nat) \to nat. \lambda Jokerclearme : ((And) (\forall i : nat. (((le) (i)) (O)) \to ((le) ((f) (i))) (O))) (\forall i : nat. \forall j : nat. (((le) (i)) (O)) \to (((le) (j)) (O)) \to ((((eq) (nat)) ((f) (i))) ((f) (j))) \to (((eq) (nat)) (i)) (j)). (((((match_And_prop) (\forall i : nat. (((le) (i)) (O)) \to ((le) ((f) (i))) (O))) (\forall i : nat. \forall j : nat. (((le) (i)) (O)) \to (((le) (j)) (O)) \to ((((eq) (nat)) ((f) (i))) ((f) (j))) \to (((eq) (nat)) (i)) (j))) (\forall m : nat. (((le) (m)) (O)) \to ((Ex) (nat)) (\lambda p : nat. ((And) (((le) (p)) (O))) ((((eq) (nat)) ((f) (p))) (m))))) (\lambda H : \forall i : nat. (((le) (i)) (O)) \to ((le) ((f) (i))) (O). \lambda H1 : \forall i : nat. \forall j : nat. (((le) (i)) (O)) \to (((le) (j)) (O)) \to ((((eq) (nat)) ((f) (i))) ((f) (j))) \to (((eq) (nat)) (i)) (j). \lambda m : nat. \lambda lem0 : ((le) (m)) (O). \lambda z : Prop. \lambda f8 : \forall x : nat. (((And) (((le) (x)) (O))) ((((eq) (nat)) ((f) (x))) (m))) \to z. ((f8) (O)) (\lambda z0 : Prop. \lambda f80 : (((le) (O)) (O)) \to ((((eq) (nat)) ((f) (O))) (m)) \to z0. ((f80) ((le_O_n) (O))) (((((le_n_O_elim) (m)) (lem0)) (((eq) (nat)) ((f) (O)))) (((((sym_eq) (nat)) (O)) ((f) (O))) (((le_n_O_to_eq) ((f) (O))) (((H) (O)) ((le_O_n) (O))))))))) (Jokerclearme))) (\lambda m : nat. \lambda Hind : \forall f : (nat) \to nat. (((permut) (f)) (m)) \to ((bijn) (f)) (m). \lambda f : (nat) \to nat. \lambda permf : ((permut) (f)) ((S) (m)). (((((eq_to_bijn) (\lambda p : nat. (((transpose) ((f) ((S) (m)))) ((S) (m))) ((((transpose) ((f) ((S) (m)))) ((S) (m))) ((f) (p))))) (f)) ((S) (m))) (\lambda i : nat. \lambda lei : ((le) (i)) ((S) (m)). (((transpose_transpose) ((f) ((S) (m)))) ((S) (m))) ((f) (i)))) ((((((bijn_fg) (((transpose) ((f) ((S) (m)))) ((S) (m)))) (\lambda Joker_ : nat. (((transpose) ((f) ((S) (m)))) ((S) (m))) ((f) (Joker_)))) ((S) (m))) ((((((match_And_prop) (\forall i : nat. (((le) (i)) ((S) (m))) \to ((le) ((f) (i))) ((S) (m)))) (((injn) (f)) ((S) (m)))) (((bijn) (((transpose) ((f) ((S) (m)))) ((S) (m)))) ((S) (m)))) (\lambda lef : \forall i : nat. (((le) (i)) ((S) (m))) \to ((le) ((f) (i))) ((S) (m)). \lambda Joker_ : ((injn) (f)) ((S) (m)). (((((bijn_transpose) ((S) (m))) ((f) ((S) (m)))) ((S) (m))) (((lef) ((S) (m))) ((le_n) ((S) (m))))) ((le_n) ((S) (m))))) (permf))) (((((bijn_n_Sn) (\lambda Joker_ : nat. (((transpose) ((f) ((S) (m)))) ((S) (m))) ((f) (Joker_)))) (m)) (((Hind) (\lambda Joker_ : nat. (((transpose) ((f) ((S) (m)))) ((S) (m))) ((f) (Joker_)))) ((((permut_S_to_permut_transpose) (f)) (m)) (permf)))) (((((((eq_ind_r) (bool)) (true)) (\lambda x : bool. (((eq) (nat)) (((((match_bool_type) (nat)) ((S) (m))) (((((match_bool_type) (nat)) ((f) ((S) (m)))) ((f) ((S) (m)))) (((eqb) ((f) ((S) (m)))) ((S) (m))))) (x))) ((S) (m)))) ((((((eq_match_bool_type_true) (nat)) ((S) (m))) (((((match_bool_type) (nat)) ((f) ((S) (m)))) ((f) ((S) (m)))) (((eqb) ((f) ((S) (m)))) ((S) (m))))) (\lambda y : nat. (((eq) (nat)) (((((match_bool_type) (nat)) ((S) (m))) (((((match_bool_type) (nat)) ((f) ((S) (m)))) ((f) ((S) (m)))) (((eqb) ((f) ((S) (m)))) ((S) (m))))) (true))) (y))) (((refl) (nat)) (((((match_bool_type) (nat)) ((S) (m))) (((((match_bool_type) (nat)) ((f) ((S) (m)))) ((f) ((S) (m)))) (((eqb) ((f) ((S) (m)))) ((S) (m))))) (true))))) (((eqb) ((f) ((S) (m)))) ((f) ((S) (m))))) ((eqb_n_n) ((f) ((S) (m))))))))) (n).
axiom invert_permut : (nat) \to ((nat) \to nat) \to (nat) \to nat.
axiom invert_permut_body : (nat) \to ((nat) \to nat) \to (nat) \to nat.
axiom eq_invert_permut : \forall n : nat. (((leibniz) (((nat) \to nat) \to (nat) \to nat)) ((invert_permut) (n))) ((((filter_nat_type) (((nat) \to nat) \to (nat) \to nat)) (invert_permut_body)) (n)).
definition sym_eq_invert_permut : \forall n : nat. (((leibniz) (((nat) \to nat) \to (nat) \to nat)) ((((filter_nat_type) (((nat) \to nat) \to (nat) \to nat)) (invert_permut_body)) (n))) ((invert_permut) (n)) := \lambda n : nat. ((((sym_leibniz) (((nat) \to nat) \to (nat) \to nat)) ((invert_permut) (n))) ((((filter_nat_type) (((nat) \to nat) \to (nat) \to nat)) (invert_permut_body)) (n))) ((eq_invert_permut) (n)).
axiom eq_invert_permut_body_O : (((leibniz) (((nat) \to nat) \to (nat) \to nat)) ((invert_permut_body) (O))) (\lambda f : (nat) \to nat. \lambda m : nat. ((((match_bool_type) (nat)) (O)) (O)) (((eqb) (m)) ((f) (O)))).
definition sym_eq_invert_permut_body_O : (((leibniz) (((nat) \to nat) \to (nat) \to nat)) (\lambda f : (nat) \to nat. \lambda m : nat. ((((match_bool_type) (nat)) (O)) (O)) (((eqb) (m)) ((f) (O))))) ((invert_permut_body) (O)) := ((((sym_leibniz) (((nat) \to nat) \to (nat) \to nat)) ((invert_permut_body) (O))) (\lambda f : (nat) \to nat. \lambda m : nat. ((((match_bool_type) (nat)) (O)) (O)) (((eqb) (m)) ((f) (O))))) (eq_invert_permut_body_O).
axiom eq_invert_permut_body_S : \forall n : nat. (((leibniz) (((nat) \to nat) \to (nat) \to nat)) ((invert_permut_body) ((S) (n)))) (\lambda f : (nat) \to nat. \lambda m : nat. ((((match_bool_type) (nat)) ((S) (n))) ((((invert_permut) (n)) (f)) (m))) (((eqb) (m)) ((f) ((S) (n))))).
definition sym_eq_invert_permut_body_S : \forall n : nat. (((leibniz) (((nat) \to nat) \to (nat) \to nat)) (\lambda f : (nat) \to nat. \lambda m : nat. ((((match_bool_type) (nat)) ((S) (n))) ((((invert_permut) (n)) (f)) (m))) (((eqb) (m)) ((f) ((S) (n)))))) ((invert_permut_body) ((S) (n))) := \lambda n : nat. ((((sym_leibniz) (((nat) \to nat) \to (nat) \to nat)) ((invert_permut_body) ((S) (n)))) (\lambda f : (nat) \to nat. \lambda m : nat. ((((match_bool_type) (nat)) ((S) (n))) ((((invert_permut) (n)) (f)) (m))) (((eqb) (m)) ((f) ((S) (n)))))) ((eq_invert_permut_body_S) (n)).
definition invert_permut_f : \forall f : (nat) \to nat. \forall n : nat. \forall m : nat. (((le) (m)) (n)) \to (((injn) (f)) (n)) \to (((eq) (nat)) ((((invert_permut) (n)) (f)) ((f) (m)))) (m) := \lambda f : (nat) \to nat. \lambda n : nat. \lambda m : nat. \lambda lenm : ((le) (m)) (n). ((((((le_ind) (m)) (\lambda x_417 : nat. (((injn) (f)) (x_417)) \to (((eq) (nat)) ((((invert_permut) (x_417)) (f)) ((f) (m)))) (m))) (((((match_nat_prop) (\lambda Joker_ : nat. (((injn) (f)) (Joker_)) \to (((eq) (nat)) ((((invert_permut) (Joker_)) (f)) ((f) (Joker_)))) (Joker_))) ((((sym_eq_invert_permut) (O)) (\lambda y : ((nat) \to nat) \to (nat) \to nat. (((injn) (f)) (O)) \to (((eq) (nat)) (((y) (f)) ((f) (O)))) (O))) (((((sym_eq_filter_nat_type_O) (((nat) \to nat) \to (nat) \to nat)) (invert_permut_body)) (\lambda y : ((nat) \to nat) \to (nat) \to nat. (((injn) (f)) (O)) \to (((eq) (nat)) (((y) (f)) ((f) (O)))) (O))) (((sym_eq_invert_permut_body_O) (\lambda y : ((nat) \to nat) \to (nat) \to nat. (((injn) (f)) (O)) \to (((eq) (nat)) (((y) (f)) ((f) (O)))) (O))) (((((((eq_ind_r) (bool)) (true)) (\lambda x : bool. (\forall i : nat. \forall j : nat. (((le) (i)) (O)) \to (((le) (j)) (O)) \to ((((eq) (nat)) ((f) (i))) ((f) (j))) \to (((eq) (nat)) (i)) (j)) \to (((eq) (nat)) (((((match_bool_type) (nat)) (O)) (O)) (x))) (O))) (\lambda auto : \forall i : nat. \forall j : nat. (((le) (i)) (O)) \to (((le) (j)) (O)) \to ((((eq) (nat)) ((f) (i))) ((f) (j))) \to (((eq) (nat)) (i)) (j). (((((eq_match_bool_type_true) (nat)) (O)) (O)) (\lambda y : nat. (((eq) (nat)) (((((match_bool_type) (nat)) (O)) (O)) (true))) (y))) (((refl) (nat)) (((((match_bool_type) (nat)) (O)) (O)) (true))))) (((eqb) ((f) (O))) ((f) (O)))) ((eqb_n_n) ((f) (O)))))))) (\lambda a : nat. (((sym_eq_invert_permut) ((S) (a))) (\lambda y : ((nat) \to nat) \to (nat) \to nat. (((injn) (f)) ((S) (a))) \to (((eq) (nat)) (((y) (f)) ((f) ((S) (a))))) ((S) (a)))) ((((((sym_eq_filter_nat_type_S) (((nat) \to nat) \to (nat) \to nat)) (invert_permut_body)) (a)) (\lambda y : ((nat) \to nat) \to (nat) \to nat. (((injn) (f)) ((S) (a))) \to (((eq) (nat)) (((y) (f)) ((f) ((S) (a))))) ((S) (a)))) ((((sym_eq_invert_permut_body_S) (a)) (\lambda y : ((nat) \to nat) \to (nat) \to nat. (((injn) (f)) ((S) (a))) \to (((eq) (nat)) (((y) (f)) ((f) ((S) (a))))) ((S) (a)))) (((((((eq_ind_r) (bool)) (true)) (\lambda x : bool. (\forall i : nat. \forall j : nat. (((le) (i)) ((S) (a))) \to (((le) (j)) ((S) (a))) \to ((((eq) (nat)) ((f) (i))) ((f) (j))) \to (((eq) (nat)) (i)) (j)) \to (((eq) (nat)) (((((match_bool_type) (nat)) ((S) (a))) ((((invert_permut) (a)) (f)) ((f) ((S) (a))))) (x))) ((S) (a)))) (\lambda auto : \forall i : nat. \forall j : nat. (((le) (i)) ((S) (a))) \to (((le) (j)) ((S) (a))) \to ((((eq) (nat)) ((f) (i))) ((f) (j))) \to (((eq) (nat)) (i)) (j). (((((eq_match_bool_type_true) (nat)) ((S) (a))) ((((invert_permut) (a)) (f)) ((f) ((S) (a))))) (\lambda y : nat. (((eq) (nat)) (((((match_bool_type) (nat)) ((S) (a))) ((((invert_permut) (a)) (f)) ((f) ((S) (a))))) (true))) (y))) (((refl) (nat)) (((((match_bool_type) (nat)) ((S) (a))) ((((invert_permut) (a)) (f)) ((f) ((S) (a))))) (true))))) (((eqb) ((f) ((S) (a)))) ((f) ((S) (a))))) ((eqb_n_n) ((f) ((S) (a))))))))) (m))) (\lambda m0 : nat. (((sym_eq_invert_permut) ((S) (m0))) (\lambda y : ((nat) \to nat) \to (nat) \to nat. (((le) (m)) (m0)) \to ((((injn) (f)) (m0)) \to (((eq) (nat)) ((((invert_permut) (m0)) (f)) ((f) (m)))) (m)) \to (((injn) (f)) ((S) (m0))) \to (((eq) (nat)) (((y) (f)) ((f) (m)))) (m))) ((((((sym_eq_filter_nat_type_S) (((nat) \to nat) \to (nat) \to nat)) (invert_permut_body)) (m0)) (\lambda y : ((nat) \to nat) \to (nat) \to nat. (((le) (m)) (m0)) \to ((((injn) (f)) (m0)) \to (((eq) (nat)) ((((invert_permut) (m0)) (f)) ((f) (m)))) (m)) \to (((injn) (f)) ((S) (m0))) \to (((eq) (nat)) (((y) (f)) ((f) (m)))) (m))) ((((sym_eq_invert_permut_body_S) (m0)) (\lambda y : ((nat) \to nat) \to (nat) \to nat. (((le) (m)) (m0)) \to ((((injn) (f)) (m0)) \to (((eq) (nat)) ((((invert_permut) (m0)) (f)) ((f) (m)))) (m)) \to (((injn) (f)) ((S) (m0))) \to (((eq) (nat)) (((y) (f)) ((f) (m)))) (m))) (\lambda lem : ((le) (m)) (m0). \lambda H : (((injn) (f)) (m0)) \to (((eq) (nat)) ((((invert_permut) (m0)) (f)) ((f) (m)))) (m). \lambda H1 : ((injn) (f)) ((S) (m0)). ((((((eq_ind_r) (bool)) (false)) (\lambda x : bool. (((eq) (nat)) (((((match_bool_type) (nat)) ((S) (m0))) ((((invert_permut) (m0)) (f)) ((f) (m)))) (x))) (m))) ((((((sym_eq_match_bool_type_false) (nat)) ((S) (m0))) ((((invert_permut) (m0)) (f)) ((f) (m)))) (\lambda y : nat. (((eq) (nat)) (y)) (m))) ((H) ((((injn_Sn_n) (f)) (m0)) (H1))))) (((eqb) ((f) (m))) ((f) ((S) (m0))))) ((((not_eq_to_eqb_false) ((f) (m))) ((f) ((S) (m0)))) (\lambda eqf : (((eq) (nat)) ((f) (m))) ((f) ((S) (m0))). (((absurd) ((((eq) (nat)) (m)) ((S) (m0)))) ((((((H1) (m)) ((S) (m0))) ((((le_S) (m)) (m0)) (lem))) ((le_n) ((S) (m0)))) (((((((rewrite_l) (nat)) ((f) (m))) (\lambda Joker_ : nat. (((eq) (nat)) ((f) (m))) (Joker_))) (((refl) (nat)) ((f) (m)))) ((f) ((S) (m0)))) (eqf)))) ((((lt_to_not_eq) (m)) ((S) (m0))) ((((le_S_S) (m)) (m0)) (lem)))))))))) (n)) (lenm).
definition let_clause_1063 : \forall f : (nat) \to nat. \forall n : nat. (((permut) (f)) (n)) \to \forall i : nat. \forall j : nat. (((le) (i)) (n)) \to (((le) (j)) (n)) \to \forall a : nat. (((And) (((le) (a)) (n))) ((((eq) (nat)) ((f) (a))) (i))) \to (((le) (a)) (n)) \to ((((eq) (nat)) ((f) (a))) (i)) \to \forall b : nat. (((And) (((le) (b)) (n))) ((((eq) (nat)) ((f) (b))) (j))) \to (((le) (b)) (n)) \to ((((eq) (nat)) ((f) (b))) (j)) \to (\forall i0 : nat. (((le) (i0)) (n)) \to ((le) ((f) (i0))) (n)) \to (((injn) (f)) (n)) \to ((((eq) (nat)) (a)) (b)) \to (((eq) (nat)) ((f) (a))) (j) := \lambda f : (nat) \to nat. \lambda n : nat. \lambda permf : ((permut) (f)) (n). \lambda i : nat. \lambda j : nat. \lambda lein : ((le) (i)) (n). \lambda lejn : ((le) (j)) (n). \lambda a : nat. \lambda Jokerclearme : ((And) (((le) (a)) (n))) ((((eq) (nat)) ((f) (a))) (i)). \lambda lean : ((le) (a)) (n). \lambda fa : (((eq) (nat)) ((f) (a))) (i). \lambda b : nat. \lambda Jokerclearme0 : ((And) (((le) (b)) (n))) ((((eq) (nat)) ((f) (b))) (j)). \lambda lebn : ((le) (b)) (n). \lambda fb : (((eq) (nat)) ((f) (b))) (j). \lambda Joker_ : \forall i0 : nat. (((le) (i0)) (n)) \to ((le) ((f) (i0))) (n). \lambda injf : ((injn) (f)) (n). \lambda auto : (((eq) (nat)) (a)) (b). ((((((rewrite_r) (nat)) (b)) (\lambda Joker_1 : nat. (((eq) (nat)) ((f) (Joker_1))) (j))) (fb)) (a)) (auto).
definition let_clause_1068 : \forall f : (nat) \to nat. \forall n : nat. (((permut) (f)) (n)) \to \forall i : nat. \forall j : nat. (((le) (i)) (n)) \to (((le) (j)) (n)) \to \forall a : nat. (((And) (((le) (a)) (n))) ((((eq) (nat)) ((f) (a))) (i))) \to (((le) (a)) (n)) \to ((((eq) (nat)) ((f) (a))) (i)) \to \forall b : nat. (((And) (((le) (b)) (n))) ((((eq) (nat)) ((f) (b))) (j))) \to (((le) (b)) (n)) \to ((((eq) (nat)) ((f) (b))) (j)) \to (\forall i0 : nat. (((le) (i0)) (n)) \to ((le) ((f) (i0))) (n)) \to (((injn) (f)) (n)) \to ((((eq) (nat)) (a)) (b)) \to (((eq) (nat)) ((f) (a))) (i) := \lambda f : (nat) \to nat. \lambda n : nat. \lambda permf : ((permut) (f)) (n). \lambda i : nat. \lambda j : nat. \lambda lein : ((le) (i)) (n). \lambda lejn : ((le) (j)) (n). \lambda a : nat. \lambda Jokerclearme : ((And) (((le) (a)) (n))) ((((eq) (nat)) ((f) (a))) (i)). \lambda lean : ((le) (a)) (n). \lambda fa : (((eq) (nat)) ((f) (a))) (i). \lambda b : nat. \lambda Jokerclearme0 : ((And) (((le) (b)) (n))) ((((eq) (nat)) ((f) (b))) (j)). \lambda lebn : ((le) (b)) (n). \lambda fb : (((eq) (nat)) ((f) (b))) (j). \lambda Joker_ : \forall i0 : nat. (((le) (i0)) (n)) \to ((le) ((f) (i0))) (n). \lambda injf : ((injn) (f)) (n). \lambda auto : (((eq) (nat)) (a)) (b). ((((((rewrite_l) (nat)) (j)) (\lambda Joker_1 : nat. (((eq) (nat)) ((f) (a))) (Joker_1))) (((((((((((((((((((let_clause_1063) (f)) (n)) (permf)) (i)) (j)) (lein)) (lejn)) (a)) (Jokerclearme)) (lean)) (fa)) (b)) (Jokerclearme0)) (lebn)) (fb)) (Joker_)) (injf)) (auto))) (i)) (((((((rewrite_l) (nat)) ((f) (a))) (\lambda Joker_1 : nat. (((eq) (nat)) (Joker_1)) (i))) (fa)) (j)) (((((((((((((((((((let_clause_1063) (f)) (n)) (permf)) (i)) (j)) (lein)) (lejn)) (a)) (Jokerclearme)) (lean)) (fa)) (b)) (Jokerclearme0)) (lebn)) (fb)) (Joker_)) (injf)) (auto))).
definition injective_invert_permut : \forall f : (nat) \to nat. \forall n : nat. (((permut) (f)) (n)) \to ((injn) (((invert_permut) (n)) (f))) (n) := \lambda f : (nat) \to nat. \lambda n : nat. \lambda permf : ((permut) (f)) (n). \lambda i : nat. \lambda j : nat. \lambda lein : ((le) (i)) (n). \lambda lejn : ((le) (j)) (n). (((((match_ex_prop) (nat)) (\lambda p : nat. ((And) (((le) (p)) (n))) ((((eq) (nat)) ((f) (p))) (i)))) (((((eq) (nat)) ((((invert_permut) (n)) (f)) (i))) ((((invert_permut) (n)) (f)) (j))) \to (((eq) (nat)) (i)) (j))) (\lambda a : nat. \lambda Jokerclearme : ((And) (((le) (a)) (n))) ((((eq) (nat)) ((f) (a))) (i)). (((((match_And_prop) (((le) (a)) (n))) ((((eq) (nat)) ((f) (a))) (i))) (((((eq) (nat)) ((((invert_permut) (n)) (f)) (i))) ((((invert_permut) (n)) (f)) (j))) \to (((eq) (nat)) (i)) (j))) (\lambda lean : ((le) (a)) (n). \lambda fa : (((eq) (nat)) ((f) (a))) (i). (((((match_ex_prop) (nat)) (\lambda p : nat. ((And) (((le) (p)) (n))) ((((eq) (nat)) ((f) (p))) (j)))) (((((eq) (nat)) ((((invert_permut) (n)) (f)) (i))) ((((invert_permut) (n)) (f)) (j))) \to (((eq) (nat)) (i)) (j))) (\lambda b : nat. \lambda Jokerclearme0 : ((And) (((le) (b)) (n))) ((((eq) (nat)) ((f) (b))) (j)). (((((match_And_prop) (((le) (b)) (n))) ((((eq) (nat)) ((f) (b))) (j))) (((((eq) (nat)) ((((invert_permut) (n)) (f)) (i))) ((((invert_permut) (n)) (f)) (j))) \to (((eq) (nat)) (i)) (j))) (\lambda lebn : ((le) (b)) (n). \lambda fb : (((eq) (nat)) ((f) (b))) (j). (((((match_And_prop) (\forall i1 : nat. (((le) (i1)) (n)) \to ((le) ((f) (i1))) (n))) (((injn) (f)) (n))) (((((eq) (nat)) ((((invert_permut) (n)) (f)) (i))) ((((invert_permut) (n)) (f)) (j))) \to (((eq) (nat)) (i)) (j))) (\lambda Joker_ : \forall i0 : nat. (((le) (i0)) (n)) \to ((le) ((f) (i0))) (n). \lambda injf : ((injn) (f)) (n). ((((((eq_ind) (nat)) ((f) (a))) (\lambda x_1 : nat. ((((eq) (nat)) ((((invert_permut) (n)) (f)) (x_1))) ((((invert_permut) (n)) (f)) (j))) \to (((eq) (nat)) (x_1)) (j))) (((((((eq_ind) (nat)) ((f) (b))) (\lambda x_1 : nat. ((((eq) (nat)) ((((invert_permut) (n)) (f)) ((f) (a)))) ((((invert_permut) (n)) (f)) (x_1))) \to (((eq) (nat)) ((f) (a))) (x_1))) (((((((eq_ind_r) (nat)) (a)) (\lambda x : nat. ((((eq) (nat)) (x)) ((((invert_permut) (n)) (f)) ((f) (b)))) \to (((eq) (nat)) ((f) (a))) ((f) (b)))) (((((((eq_ind_r) (nat)) (b)) (\lambda x : nat. ((((eq) (nat)) (a)) (x)) \to (((eq) (nat)) ((f) (a))) ((f) (b)))) (\lambda auto : (((eq) (nat)) (a)) (b). ((((((rewrite_r) (nat)) (i)) (\lambda Joker_1 : nat. (((eq) (nat)) (Joker_1)) ((f) (b)))) (((((((rewrite_l) (nat)) (a)) (\lambda Joker_1 : nat. (((eq) (nat)) (i)) ((f) (Joker_1)))) (((((((rewrite_r) (nat)) (i)) (\lambda Joker_1 : nat. (((eq) (nat)) (i)) (Joker_1))) (((refl) (nat)) (i))) ((f) (a))) (((((((((((((((((((let_clause_1068) (f)) (n)) (permf)) (i)) (j)) (lein)) (lejn)) (a)) (Jokerclearme)) (lean)) (fa)) (b)) (Jokerclearme0)) (lebn)) (fb)) (Joker_)) (injf)) (auto)))) (b)) (auto))) ((f) (a))) (((((((((((((((((((let_clause_1068) (f)) (n)) (permf)) (i)) (j)) (lein)) (lejn)) (a)) (Jokerclearme)) (lean)) (fa)) (b)) (Jokerclearme0)) (lebn)) (fb)) (Joker_)) (injf)) (auto)))) ((((invert_permut) (n)) (f)) ((f) (b)))) ((((((invert_permut_f) (f)) (n)) (b)) (lebn)) (injf)))) ((((invert_permut) (n)) (f)) ((f) (a)))) ((((((invert_permut_f) (f)) (n)) (a)) (lean)) (injf)))) (j)) (fb))) (i)) (fa))) (permf))) (Jokerclearme0))) ((((((permut_to_bijn) (n)) (f)) (permf)) (j)) (lejn)))) (Jokerclearme))) ((((((permut_to_bijn) (n)) (f)) (permf)) (i)) (lein)).
definition permut_invert_permut : \forall f : (nat) \to nat. \forall n : nat. (((permut) (f)) (n)) \to ((permut) (((invert_permut) (n)) (f))) (n) := \lambda f : (nat) \to nat. \lambda n : nat. \lambda permf : ((permut) (f)) (n). \lambda z : Prop. \lambda f9 : (\forall x : nat. (((le) (x)) (n)) \to ((le) ((((invert_permut) (n)) (f)) (x))) (n)) \to (((injn) (((invert_permut) (n)) (f))) (n)) \to z. ((f9) (\lambda i : nat. \lambda lein : ((le) (i)) (n). ((((nat_ind) (\lambda Jokerx_365 : nat. ((le) ((((invert_permut) (Jokerx_365)) (f)) (i))) (Jokerx_365))) ((((sym_eq_invert_permut) (O)) (\lambda y : ((nat) \to nat) \to (nat) \to nat. ((le) (((y) (f)) (i))) (O))) (((((sym_eq_filter_nat_type_O) (((nat) \to nat) \to (nat) \to nat)) (invert_permut_body)) (\lambda y : ((nat) \to nat) \to (nat) \to nat. ((le) (((y) (f)) (i))) (O))) (((sym_eq_invert_permut_body_O) (\lambda y : ((nat) \to nat) \to (nat) \to nat. ((le) (((y) (f)) (i))) (O))) (((((match_bool_prop) (\lambda Joker_ : bool. ((le) (((((match_bool_type) (nat)) (O)) (O)) (Joker_))) (O))) ((((((eq_match_bool_type_true) (nat)) (O)) (O)) (\lambda y : nat. ((le) (((((match_bool_type) (nat)) (O)) (O)) (true))) (y))) ((le_n) (((((match_bool_type) (nat)) (O)) (O)) (true))))) ((((((eq_match_bool_type_false) (nat)) (O)) (O)) (\lambda y : nat. ((le) (((((match_bool_type) (nat)) (O)) (O)) (false))) (y))) ((le_n) (((((match_bool_type) (nat)) (O)) (O)) (false))))) (((eqb) (i)) ((f) (O)))))))) (\lambda n1 : nat. (((sym_eq_invert_permut) ((S) (n1))) (\lambda y : ((nat) \to nat) \to (nat) \to nat. (((le) ((((invert_permut) (n1)) (f)) (i))) (n1)) \to ((le) (((y) (f)) (i))) ((S) (n1)))) ((((((sym_eq_filter_nat_type_S) (((nat) \to nat) \to (nat) \to nat)) (invert_permut_body)) (n1)) (\lambda y : ((nat) \to nat) \to (nat) \to nat. (((le) ((((invert_permut) (n1)) (f)) (i))) (n1)) \to ((le) (((y) (f)) (i))) ((S) (n1)))) ((((sym_eq_invert_permut_body_S) (n1)) (\lambda y : ((nat) \to nat) \to (nat) \to nat. (((le) ((((invert_permut) (n1)) (f)) (i))) (n1)) \to ((le) (((y) (f)) (i))) ((S) (n1)))) (\lambda Hind : ((le) ((((invert_permut) (n1)) (f)) (i))) (n1). ((((match_bool_prop) (\lambda Joker_ : bool. ((le) (((((match_bool_type) (nat)) ((S) (n1))) ((((invert_permut) (n1)) (f)) (i))) (Joker_))) ((S) (n1)))) ((((((eq_match_bool_type_true) (nat)) ((S) (n1))) ((((invert_permut) (n1)) (f)) (i))) (\lambda y : nat. ((le) (((((match_bool_type) (nat)) ((S) (n1))) ((((invert_permut) (n1)) (f)) (i))) (true))) (y))) ((le_n) (((((match_bool_type) (nat)) ((S) (n1))) ((((invert_permut) (n1)) (f)) (i))) (true))))) ((((((sym_eq_match_bool_type_false) (nat)) ((S) (n1))) ((((invert_permut) (n1)) (f)) (i))) (\lambda y : nat. ((le) (y)) ((S) (n1)))) ((((le_S) ((((invert_permut) (n1)) (f)) (i))) (n1)) (Hind)))) (((eqb) (i)) ((f) ((S) (n1))))))))) (n))) ((((injective_invert_permut) (f)) (n)) (permf)).
definition f_invert_permut : \forall f : (nat) \to nat. \forall n : nat. \forall m : nat. (((le) (m)) (n)) \to (((permut) (f)) (n)) \to (((eq) (nat)) ((f) ((((invert_permut) (n)) (f)) (m)))) (m) := \lambda f : (nat) \to nat. \lambda n : nat. \lambda m : nat. \lambda lemn : ((le) (m)) (n). \lambda permf : ((permut) (f)) (n). (((((match_And_prop) (\forall i : nat. (((le) (i)) (n)) \to ((le) ((((invert_permut) (n)) (f)) (i))) (n))) (((injn) (((invert_permut) (n)) (f))) (n))) ((((eq) (nat)) ((f) ((((invert_permut) (n)) (f)) (m)))) (m))) (\lambda Hle : \forall i : nat. (((le) (i)) (n)) \to ((le) ((((invert_permut) (n)) (f)) (i))) (n). \lambda Hinj : ((injn) (((invert_permut) (n)) (f))) (n). (((((match_And_prop) (\forall i : nat. (((le) (i)) (n)) \to ((le) ((f) (i))) (n))) (((injn) (f)) (n))) ((((eq) (nat)) ((f) ((((invert_permut) (n)) (f)) (m)))) (m))) (\lambda lef : \forall i : nat. (((le) (i)) (n)) \to ((le) ((f) (i))) (n). \lambda injf : ((injn) (f)) (n). ((((((((injective_invert_permut) (f)) (n)) (permf)) ((f) ((((invert_permut) (n)) (f)) (m)))) (m)) (((lef) ((((invert_permut) (n)) (f)) (m))) (((Hle) (m)) (lemn)))) (lemn)) ((((((invert_permut_f) (f)) (n)) ((((invert_permut) (n)) (f)) (m))) (((Hle) (m)) (lemn))) (injf)))) (permf))) ((((permut_invert_permut) (f)) (n)) (permf)).
axiom gcd_aux : (nat) \to (nat) \to (nat) \to nat.
axiom gcd_aux_body : (nat) \to (nat) \to (nat) \to nat.
axiom eq_gcd_aux : \forall p : nat. (((leibniz) ((nat) \to (nat) \to nat)) ((gcd_aux) (p))) ((((filter_nat_type) ((nat) \to (nat) \to nat)) (gcd_aux_body)) (p)).
definition sym_eq_gcd_aux : \forall p : nat. (((leibniz) ((nat) \to (nat) \to nat)) ((((filter_nat_type) ((nat) \to (nat) \to nat)) (gcd_aux_body)) (p))) ((gcd_aux) (p)) := \lambda p : nat. ((((sym_leibniz) ((nat) \to (nat) \to nat)) ((gcd_aux) (p))) ((((filter_nat_type) ((nat) \to (nat) \to nat)) (gcd_aux_body)) (p))) ((eq_gcd_aux) (p)).
axiom eq_gcd_aux_body_O : (((leibniz) ((nat) \to (nat) \to nat)) ((gcd_aux_body) (O))) (\lambda m : nat. \lambda n : nat. m).
definition sym_eq_gcd_aux_body_O : (((leibniz) ((nat) \to (nat) \to nat)) (\lambda m : nat. \lambda n : nat. m)) ((gcd_aux_body) (O)) := ((((sym_leibniz) ((nat) \to (nat) \to nat)) ((gcd_aux_body) (O))) (\lambda m : nat. \lambda n : nat. m)) (eq_gcd_aux_body_O).
axiom eq_gcd_aux_body_S : \forall p : nat. (((leibniz) ((nat) \to (nat) \to nat)) ((gcd_aux_body) ((S) (p)))) (\lambda m : nat. \lambda n : nat. ((((match_bool_type) (nat)) (n)) ((((gcd_aux) (p)) (n)) (((mod) (m)) (n)))) (((dividesb) (n)) (m))).
definition sym_eq_gcd_aux_body_S : \forall p : nat. (((leibniz) ((nat) \to (nat) \to nat)) (\lambda m : nat. \lambda n : nat. ((((match_bool_type) (nat)) (n)) ((((gcd_aux) (p)) (n)) (((mod) (m)) (n)))) (((dividesb) (n)) (m)))) ((gcd_aux_body) ((S) (p))) := \lambda p : nat. ((((sym_leibniz) ((nat) \to (nat) \to nat)) ((gcd_aux_body) ((S) (p)))) (\lambda m : nat. \lambda n : nat. ((((match_bool_type) (nat)) (n)) ((((gcd_aux) (p)) (n)) (((mod) (m)) (n)))) (((dividesb) (n)) (m)))) ((eq_gcd_aux_body_S) (p)).
definition gcd : (nat) \to (nat) \to nat := \lambda n : nat. \lambda m : nat. ((((match_bool_type) (nat)) ((((gcd_aux) (n)) (m)) (n))) ((((gcd_aux) (m)) (n)) (m))) (((leb) (n)) (m)).
definition commutative_gcd : \forall n : nat. \forall m : nat. (((eq) (nat)) (((gcd) (n)) (m))) (((gcd) (m)) (n)) := \lambda n : nat. \lambda m : nat. (((((leb_elim) (n)) (m)) (\lambda Joker_ : bool. (((eq) (nat)) (((((match_bool_type) (nat)) ((((gcd_aux) (n)) (m)) (n))) ((((gcd_aux) (m)) (n)) (m))) (Joker_))) (((((match_bool_type) (nat)) ((((gcd_aux) (m)) (n)) (m))) ((((gcd_aux) (n)) (m)) (n))) (((leb) (m)) (n))))) (\lambda lenm : ((le) (n)) (m). ((((((match_Or_prop) (((lt) (n)) (m))) ((((eq) (nat)) (n)) (m))) ((((eq) (nat)) (((((match_bool_type) (nat)) ((((gcd_aux) (n)) (m)) (n))) ((((gcd_aux) (m)) (n)) (m))) (true))) (((((match_bool_type) (nat)) ((((gcd_aux) (m)) (n)) (m))) ((((gcd_aux) (n)) (m)) (n))) (((leb) (m)) (n))))) (\lambda ltnm : ((lt) (n)) (m). ((((((eq_ind_r) (bool)) (false)) (\lambda x : bool. (((eq) (nat)) (((((match_bool_type) (nat)) ((((gcd_aux) (n)) (m)) (n))) ((((gcd_aux) (m)) (n)) (m))) (true))) (((((match_bool_type) (nat)) ((((gcd_aux) (m)) (n)) (m))) ((((gcd_aux) (n)) (m)) (n))) (x)))) ((((((sym_eq_match_bool_type_false) (nat)) ((((gcd_aux) (m)) (n)) (m))) ((((gcd_aux) (n)) (m)) (n))) (\lambda y : nat. (((eq) (nat)) (((((match_bool_type) (nat)) ((((gcd_aux) (n)) (m)) (n))) ((((gcd_aux) (m)) (n)) (m))) (true))) (y))) ((((((eq_match_bool_type_true) (nat)) ((((gcd_aux) (n)) (m)) (n))) ((((gcd_aux) (m)) (n)) (m))) (\lambda y : nat. (((eq) (nat)) (((((match_bool_type) (nat)) ((((gcd_aux) (n)) (m)) (n))) ((((gcd_aux) (m)) (n)) (m))) (true))) (y))) (((refl) (nat)) (((((match_bool_type) (nat)) ((((gcd_aux) (n)) (m)) (n))) ((((gcd_aux) (m)) (n)) (m))) (true)))))) (((leb) (m)) (n))) ((((not_le_to_leb_false) (m)) (n)) ((((lt_to_not_le) (n)) (m)) (ltnm))))) (\lambda eqnm : (((eq) (nat)) (n)) (m). ((((((eq_ind_r) (nat)) (m)) (\lambda x : nat. (((eq) (nat)) (((((match_bool_type) (nat)) ((((gcd_aux) (x)) (m)) (x))) ((((gcd_aux) (m)) (x)) (m))) (true))) (((((match_bool_type) (nat)) ((((gcd_aux) (m)) (x)) (m))) ((((gcd_aux) (x)) (m)) (x))) (((leb) (m)) (x))))) (((((match_bool_prop) (\lambda Joker_ : bool. (((eq) (nat)) (((((match_bool_type) (nat)) ((((gcd_aux) (m)) (m)) (m))) ((((gcd_aux) (m)) (m)) (m))) (true))) (((((match_bool_type) (nat)) ((((gcd_aux) (m)) (m)) (m))) ((((gcd_aux) (m)) (m)) (m))) (Joker_)))) (((refl) (nat)) (((((match_bool_type) (nat)) ((((gcd_aux) (m)) (m)) (m))) ((((gcd_aux) (m)) (m)) (m))) (true)))) ((((((sym_eq_match_bool_type_false) (nat)) ((((gcd_aux) (m)) (m)) (m))) ((((gcd_aux) (m)) (m)) (m))) (\lambda y : nat. (((eq) (nat)) (((((match_bool_type) (nat)) ((((gcd_aux) (m)) (m)) (m))) ((((gcd_aux) (m)) (m)) (m))) (true))) (y))) ((((((eq_match_bool_type_true) (nat)) ((((gcd_aux) (m)) (m)) (m))) ((((gcd_aux) (m)) (m)) (m))) (\lambda y : nat. (((eq) (nat)) (((((match_bool_type) (nat)) ((((gcd_aux) (m)) (m)) (m))) ((((gcd_aux) (m)) (m)) (m))) (true))) (y))) (((refl) (nat)) (((((match_bool_type) (nat)) ((((gcd_aux) (m)) (m)) (m))) ((((gcd_aux) (m)) (m)) (m))) (true)))))) (((leb) (m)) (m)))) (n)) (eqnm))) ((((le_to_or_lt_eq) (n)) (m)) (lenm)))) (\lambda notlenm : (Not) (((le) (n)) (m)). ((((((eq_ind_r) (bool)) (true)) (\lambda x : bool. (((eq) (nat)) (((((match_bool_type) (nat)) ((((gcd_aux) (n)) (m)) (n))) ((((gcd_aux) (m)) (n)) (m))) (false))) (((((match_bool_type) (nat)) ((((gcd_aux) (m)) (n)) (m))) ((((gcd_aux) (n)) (m)) (n))) (x)))) ((((((sym_eq_match_bool_type_false) (nat)) ((((gcd_aux) (n)) (m)) (n))) ((((gcd_aux) (m)) (n)) (m))) (\lambda y : nat. (((eq) (nat)) (y)) (((((match_bool_type) (nat)) ((((gcd_aux) (m)) (n)) (m))) ((((gcd_aux) (n)) (m)) (n))) (true)))) ((((((sym_eq_match_bool_type_true) (nat)) ((((gcd_aux) (m)) (n)) (m))) ((((gcd_aux) (n)) (m)) (n))) (\lambda y : nat. (((eq) (nat)) ((((gcd_aux) (m)) (n)) (m))) (y))) ((((((eq_match_bool_type_false) (nat)) ((((gcd_aux) (n)) (m)) (n))) ((((gcd_aux) (m)) (n)) (m))) (\lambda y : nat. (((eq) (nat)) ((((gcd_aux) (m)) (n)) (m))) (y))) ((((((eq_match_bool_type_false) (nat)) ((((gcd_aux) (n)) (m)) (n))) ((((gcd_aux) (m)) (n)) (m))) (\lambda y : nat. (((eq) (nat)) (y)) (((((match_bool_type) (nat)) ((((gcd_aux) (n)) (m)) (n))) ((((gcd_aux) (m)) (n)) (m))) (false)))) (((refl) (nat)) (((((match_bool_type) (nat)) ((((gcd_aux) (n)) (m)) (n))) ((((gcd_aux) (m)) (n)) (m))) (false)))))))) (((leb) (m)) (n))) ((((le_to_leb_true) (m)) (n)) ((((((transitive_le) (m)) ((S) (m))) (n)) ((le_n_Sn) (m))) ((((not_le_to_lt) (n)) (m)) (notlenm))))).
definition gcd_O_l : \forall m : nat. (((eq) (nat)) (((gcd) (O)) (m))) (m) := \lambda m : nat. (((((eq_match_bool_type_true) (nat)) (m)) ((((gcd_aux) (m)) (O)) (m))) (\lambda y : nat. (((eq) (nat)) (((gcd) (O)) (m))) (y))) (((eq_leb_body_O) (\lambda y : (nat) \to bool. (((eq) (nat)) (((gcd) (O)) (m))) (((((match_bool_type) (nat)) (m)) ((((gcd_aux) (m)) (O)) (m))) ((y) (m))))) (((((eq_filter_nat_type_O) ((nat) \to bool)) (leb_body)) (\lambda y : (nat) \to bool. (((eq) (nat)) (((gcd) (O)) (m))) (((((match_bool_type) (nat)) (m)) ((((gcd_aux) (m)) (O)) (m))) ((y) (m))))) ((((eq_leb) (O)) (\lambda y : (nat) \to bool. (((eq) (nat)) (((gcd) (O)) (m))) (((((match_bool_type) (nat)) (m)) ((((gcd_aux) (m)) (O)) (m))) ((y) (m))))) (((eq_gcd_aux_body_O) (\lambda y : (nat) \to (nat) \to nat. (((eq) (nat)) (((gcd) (O)) (m))) (((((match_bool_type) (nat)) (((y) (m)) (O))) ((((gcd_aux) (m)) (O)) (m))) (((leb) (O)) (m))))) (((((eq_filter_nat_type_O) ((nat) \to (nat) \to nat)) (gcd_aux_body)) (\lambda y : (nat) \to (nat) \to nat. (((eq) (nat)) (((gcd) (O)) (m))) (((((match_bool_type) (nat)) (((y) (m)) (O))) ((((gcd_aux) (m)) (O)) (m))) (((leb) (O)) (m))))) ((((eq_gcd_aux) (O)) (\lambda y : (nat) \to (nat) \to nat. (((eq) (nat)) (((gcd) (O)) (m))) (((((match_bool_type) (nat)) (((y) (m)) (O))) ((((gcd_aux) (m)) (O)) (m))) (((leb) (O)) (m))))) (((refl) (nat)) (((gcd) (O)) (m))))))))).
definition divides_mod_to_divides : \forall p : nat. \forall m : nat. \forall n : nat. (((lt) (O)) (n)) \to (((divides) (p)) (((mod) (m)) (n))) \to (((divides) (p)) (n)) \to ((divides) (p)) (m) := \lambda p : nat. \lambda m : nat. \lambda n : nat. \lambda posn : ((lt) (O)) (n). \lambda Jokerclearme : ((divides) (p)) (((mod) (m)) (n)). (((((match_divides_prop) (p)) (((mod) (m)) (n))) ((((divides) (p)) (n)) \to ((divides) (p)) (m))) (\lambda q1 : nat. \lambda eq1 : (((eq) (nat)) (((mod) (m)) (n))) (((times) (p)) (q1)). \lambda Jokerclearme0 : ((divides) (p)) (n). (((((match_divides_prop) (p)) (n)) (((divides) (p)) (m))) (\lambda q2 : nat. \lambda eq2 : (((eq) (nat)) (n)) (((times) (p)) (q2)). ((((quotient) (p)) (m)) (((plus) (((times) (q2)) (((div) (m)) (n)))) (q1))) (((((((eq_ind_r) (nat)) (((plus) (((times) (p)) (((times) (q2)) (((div) (m)) (n))))) (((times) (p)) (q1)))) (\lambda x : nat. (((eq) (nat)) (m)) (x))) (((((((eq_ind) (nat)) (((mod) (m)) (n))) (\lambda x_1 : nat. (((eq) (nat)) (m)) (((plus) (((times) (p)) (((times) (q2)) (((div) (m)) (n))))) (x_1)))) (((((((eq_ind) (nat)) (((times) (((times) (p)) (q2))) (((div) (m)) (n)))) (\lambda x_1 : nat. (((eq) (nat)) (m)) (((plus) (x_1)) (((mod) (m)) (n))))) (((((((eq_ind) (nat)) (n)) (\lambda x_1 : nat. (((eq) (nat)) (m)) (((plus) (((times) (x_1)) (((div) (m)) (n)))) (((mod) (m)) (n))))) (((((((rewrite_r) (nat)) (((plus) (((mod) (m)) (n))) (((times) (n)) (((div) (m)) (n))))) (\lambda Joker_ : nat. (((eq) (nat)) (m)) (Joker_))) (((((((rewrite_l) (nat)) (m)) (\lambda Joker_ : nat. (((eq) (nat)) (m)) (Joker_))) (((refl) (nat)) (m))) (((plus) (((mod) (m)) (n))) (((times) (n)) (((div) (m)) (n))))) (((((((rewrite_l) (nat)) (((plus) (((times) (n)) (((div) (m)) (n)))) (((mod) (m)) (n)))) (\lambda Joker_ : nat. (((eq) (nat)) (m)) (Joker_))) (((((((rewrite_l) (nat)) (((times) (((div) (m)) (n))) (n))) (\lambda Joker_ : nat. (((eq) (nat)) (m)) (((plus) (Joker_)) (((mod) (m)) (n))))) (((div_mod) (m)) (n))) (((times) (n)) (((div) (m)) (n)))) (((commutative_times) (((div) (m)) (n))) (n)))) (((plus) (((mod) (m)) (n))) (((times) (n)) (((div) (m)) (n))))) (((commutative_plus) (((times) (n)) (((div) (m)) (n)))) (((mod) (m)) (n)))))) (((plus) (((times) (n)) (((div) (m)) (n)))) (((mod) (m)) (n)))) (((commutative_plus) (((times) (n)) (((div) (m)) (n)))) (((mod) (m)) (n))))) (((times) (p)) (q2))) (eq2))) (((times) (p)) (((times) (q2)) (((div) (m)) (n))))) ((((associative_times) (p)) (q2)) (((div) (m)) (n))))) (((times) (p)) (q1))) (eq1))) (((times) (p)) (((plus) (((times) (q2)) (((div) (m)) (n)))) (q1)))) ((((distributive_times_plus) (p)) (((times) (q2)) (((div) (m)) (n)))) (q1))))) (Jokerclearme0))) (Jokerclearme).
definition divides_to_gcd_aux : \forall p : nat. \forall m : nat. \forall n : nat. (((lt) (O)) (p)) \to (((lt) (O)) (n)) \to (((divides) (n)) (m)) \to (((eq) (nat)) ((((gcd_aux) (p)) (m)) (n))) (n) := \lambda p : nat. \lambda m : nat. \lambda n : nat. \lambda posp : ((lt) (O)) (p). ((((lt_O_n_elim) (p)) (posp)) (\lambda Joker_ : nat. (((lt) (O)) (n)) \to (((divides) (n)) (m)) \to (((eq) (nat)) ((((gcd_aux) (Joker_)) (m)) (n))) (n))) (\lambda l : nat. (((sym_eq_gcd_aux) ((S) (l))) (\lambda y : (nat) \to (nat) \to nat. (((lt) (O)) (n)) \to (((divides) (n)) (m)) \to (((eq) (nat)) (((y) (m)) (n))) (n))) ((((((sym_eq_filter_nat_type_S) ((nat) \to (nat) \to nat)) (gcd_aux_body)) (l)) (\lambda y : (nat) \to (nat) \to nat. (((lt) (O)) (n)) \to (((divides) (n)) (m)) \to (((eq) (nat)) (((y) (m)) (n))) (n))) ((((sym_eq_gcd_aux_body_S) (l)) (\lambda y : (nat) \to (nat) \to nat. (((lt) (O)) (n)) \to (((divides) (n)) (m)) \to (((eq) (nat)) (((y) (m)) (n))) (n))) (\lambda posn : ((lt) (O)) (n). \lambda divnm : ((divides) (n)) (m). ((((((eq_ind_r) (bool)) (true)) (\lambda x : bool. (((eq) (nat)) (((((match_bool_type) (nat)) (n)) ((((gcd_aux) (l)) (n)) (((mod) (m)) (n)))) (x))) (n))) ((((((sym_eq_match_bool_type_true) (nat)) (n)) ((((gcd_aux) (l)) (n)) (((((match_nat_type) (nat)) (m)) (\lambda p0 : nat. (((mod_aux) (m)) (m)) (p0))) (n)))) (\lambda y : nat. (((eq) (nat)) (y)) (n))) (((refl) (nat)) (n)))) (((dividesb) (n)) (m))) (((((divides_to_dividesb_true) (n)) (m)) (posn)) (divnm)))))).
definition not_divides_to_gcd_aux : \forall p : nat. \forall m : nat. \forall n : nat. (((lt) (O)) (n)) \to ((Not) (((divides) (n)) (m))) \to (((eq) (nat)) ((((gcd_aux) ((S) (p))) (m)) (n))) ((((gcd_aux) (p)) (n)) (((mod) (m)) (n))) := \lambda p : nat. \lambda m : nat. \lambda n : nat. (((sym_eq_gcd_aux) ((S) (p))) (\lambda y : (nat) \to (nat) \to nat. (((lt) (O)) (n)) \to ((Not) (((divides) (n)) (m))) \to (((eq) (nat)) (((y) (m)) (n))) ((((gcd_aux) (p)) (n)) (((mod) (m)) (n))))) ((((((sym_eq_filter_nat_type_S) ((nat) \to (nat) \to nat)) (gcd_aux_body)) (p)) (\lambda y : (nat) \to (nat) \to nat. (((lt) (O)) (n)) \to ((Not) (((divides) (n)) (m))) \to (((eq) (nat)) (((y) (m)) (n))) ((((gcd_aux) (p)) (n)) (((mod) (m)) (n))))) ((((sym_eq_gcd_aux_body_S) (p)) (\lambda y : (nat) \to (nat) \to nat. (((lt) (O)) (n)) \to ((Not) (((divides) (n)) (m))) \to (((eq) (nat)) (((y) (m)) (n))) ((((gcd_aux) (p)) (n)) (((mod) (m)) (n))))) (\lambda lenm : ((lt) (O)) (n). \lambda divnm : (Not) (((divides) (n)) (m)). ((((((eq_ind_r) (bool)) (false)) (\lambda x : bool. (((eq) (nat)) (((((match_bool_type) (nat)) (n)) ((((gcd_aux) (p)) (n)) (((mod) (m)) (n)))) (x))) ((((gcd_aux) (p)) (n)) (((mod) (m)) (n))))) ((((((sym_eq_match_bool_type_false) (nat)) (n)) ((((gcd_aux) (p)) (n)) (((((match_nat_type) (nat)) (m)) (\lambda p0 : nat. (((mod_aux) (m)) (m)) (p0))) (n)))) (\lambda y : nat. (((eq) (nat)) (y)) ((((gcd_aux) (p)) (n)) (((((match_nat_type) (nat)) (m)) (\lambda p0 : nat. (((mod_aux) (m)) (m)) (p0))) (n))))) (((refl) (nat)) ((((gcd_aux) (p)) (n)) (((((match_nat_type) (nat)) (m)) (\lambda p0 : nat. (((mod_aux) (m)) (m)) (p0))) (n)))))) (((dividesb) (n)) (m))) (((((not_divides_to_dividesb_false) (n)) (m)) (lenm)) (divnm))))).
definition divides_gcd_aux_mn : \forall p : nat. \forall m : nat. \forall n : nat. (((lt) (O)) (n)) \to (((le) (n)) (m)) \to (((le) (n)) (p)) \to ((And) (((divides) ((((gcd_aux) (p)) (m)) (n))) (m))) (((divides) ((((gcd_aux) (p)) (m)) (n))) (n)) := \lambda p : nat. ((((nat_ind) (\lambda Jokerx_365 : nat. \forall m : nat. \forall n : nat. (((lt) (O)) (n)) \to (((le) (n)) (m)) \to (((le) (n)) (Jokerx_365)) \to ((And) (((divides) ((((gcd_aux) (Jokerx_365)) (m)) (n))) (m))) (((divides) ((((gcd_aux) (Jokerx_365)) (m)) (n))) (n)))) (\lambda m : nat. \lambda n : nat. \lambda posn : ((lt) (O)) (n). \lambda lenm : ((le) (n)) (m). \lambda lenO : ((le) (n)) (O). ((falsity) (((And) (((divides) ((((gcd_aux) (O)) (m)) (n))) (m))) (((divides) ((((gcd_aux) (O)) (m)) (n))) (n)))) ((((absurd) (((lt) (O)) (n))) (posn)) ((((le_to_not_lt) (n)) (O)) (lenO))))) (\lambda q : nat. \lambda Hind : \forall m : nat. \forall n : nat. (((lt) (O)) (n)) \to (((le) (n)) (m)) \to (((le) (n)) (q)) \to ((And) (((divides) ((((gcd_aux) (q)) (m)) (n))) (m))) (((divides) ((((gcd_aux) (q)) (m)) (n))) (n)). \lambda m : nat. \lambda n : nat. \lambda posn : ((lt) (O)) (n). \lambda lenm : ((le) (n)) (m). \lambda lenS : ((le) (n)) ((S) (q)). ((((((match_Or_prop) (((divides) (n)) (m))) ((Not) (((divides) (n)) (m)))) (((And) (((divides) ((((gcd_aux) ((S) (q))) (m)) (n))) (m))) (((divides) ((((gcd_aux) ((S) (q))) (m)) (n))) (n)))) (\lambda divnm : ((divides) (n)) (m). ((((((eq_ind_r) (nat)) (n)) (\lambda x : nat. ((And) (((divides) (x)) (m))) (((divides) (x)) (n)))) (\lambda z : Prop. \lambda f : (((divides) (n)) (m)) \to (((divides) (n)) (n)) \to z. ((f) (divnm)) ((divides_n_n) (n)))) ((((gcd_aux) ((S) (q))) (m)) (n))) (((((((divides_to_gcd_aux) ((S) (q))) (m)) (n)) ((lt_O_S) (q))) (posn)) (divnm)))) (\lambda ndivnm : (Not) (((divides) (n)) (m)). ((((((eq_ind_r) (nat)) ((((gcd_aux) (q)) (n)) (((mod) (m)) (n)))) (\lambda x : nat. ((And) (((divides) (x)) (m))) (((divides) (x)) (n)))) ((((((match_And_prop) (((divides) ((((gcd_aux) (q)) (n)) (((mod) (m)) (n)))) (n))) (((divides) ((((gcd_aux) (q)) (n)) (((mod) (m)) (n)))) (((mod) (m)) (n)))) (((And) (((divides) ((((gcd_aux) (q)) (n)) (((mod) (m)) (n)))) (m))) (((divides) ((((gcd_aux) (q)) (n)) (((mod) (m)) (n)))) (n)))) (\lambda H : ((divides) ((((gcd_aux) (q)) (n)) (((mod) (m)) (n)))) (n). \lambda H1 : ((divides) ((((gcd_aux) (q)) (n)) (((mod) (m)) (n)))) (((mod) (m)) (n)). \lambda z : Prop. \lambda f : (((divides) ((((gcd_aux) (q)) (n)) (((mod) (m)) (n)))) (m)) \to (((divides) ((((gcd_aux) (q)) (n)) (((mod) (m)) (n)))) (n)) \to z. ((f) (((((((divides_mod_to_divides) ((((gcd_aux) (q)) (n)) (((mod) (m)) (n)))) (m)) (n)) (posn)) (H1)) (H))) (H))) ((((((Hind) (n)) (((mod) (m)) (n))) (((((((match_Or_prop) (((lt) (O)) (((mod) (m)) (n)))) ((((eq) (nat)) (O)) (((mod) (m)) (n)))) (((lt) (O)) (((mod) (m)) (n)))) (\lambda auto : ((lt) (O)) (((mod) (m)) (n)). auto)) (\lambda modO : (((eq) (nat)) (O)) (((mod) (m)) (n)). ((falsity) (((lt) (O)) (((mod) (m)) (n)))) ((((absurd) (((divides) (n)) (m))) (((((mod_O_to_divides) (n)) (m)) (posn)) (((((((rewrite_l) (nat)) (O)) (\lambda Joker_ : nat. (((eq) (nat)) (Joker_)) (O))) (((refl) (nat)) (O))) (((mod) (m)) (n))) (modO)))) (ndivnm)))) ((((le_to_or_lt_eq) (O)) (((mod) (m)) (n))) ((le_O_n) (((mod) (m)) (n)))))) ((((lt_to_le) (((mod) (m)) (n))) (n)) ((((lt_mod_m_m) (m)) (n)) (posn)))) ((((le_S_S_to_le) (((mod) (m)) (n))) (q)) ((((((transitive_le) ((S) (((mod) (m)) (n)))) (n)) ((S) (q))) ((((lt_mod_m_m) (m)) (n)) (posn))) (lenS)))))) ((((gcd_aux) ((S) (q))) (m)) (n))) ((((((not_divides_to_gcd_aux) (q)) (m)) (n)) (posn)) (ndivnm)))) (((decidable_divides) (n)) (m)))) (p).
definition divides_gcd_nm : \forall n : nat. \forall m : nat. ((And) (((divides) (((gcd) (n)) (m))) (m))) (((divides) (((gcd) (n)) (m))) (n)) := \lambda n : nat. \lambda m : nat. ((((((match_Or_prop) (((lt) (O)) (n))) ((((eq) (nat)) (O)) (n))) (((And) (((divides) (((gcd) (n)) (m))) (m))) (((divides) (((gcd) (n)) (m))) (n)))) (\lambda posn : ((lt) (O)) (n). ((((((match_Or_prop) (((lt) (O)) (m))) ((((eq) (nat)) (O)) (m))) (((And) (((divides) (((gcd) (n)) (m))) (m))) (((divides) (((gcd) (n)) (m))) (n)))) (\lambda posm : ((lt) (O)) (m). (((((leb_elim) (n)) (m)) (\lambda Joker_ : bool. ((And) (((divides) (((((match_bool_type) (nat)) ((((gcd_aux) (n)) (m)) (n))) ((((gcd_aux) (m)) (n)) (m))) (Joker_))) (m))) (((divides) (((((match_bool_type) (nat)) ((((gcd_aux) (n)) (m)) (n))) ((((gcd_aux) (m)) (n)) (m))) (Joker_))) (n)))) ((((((sym_eq_match_bool_type_true) (nat)) ((((gcd_aux) (n)) (m)) (n))) ((((gcd_aux) (m)) (n)) (m))) (\lambda y : nat. (((le) (n)) (m)) \to ((And) (((divides) (((((match_bool_type) (nat)) ((((gcd_aux) (n)) (m)) (n))) ((((gcd_aux) (m)) (n)) (m))) (true))) (m))) (((divides) (y)) (n)))) ((((((sym_eq_match_bool_type_true) (nat)) ((((gcd_aux) (n)) (m)) (n))) ((((gcd_aux) (m)) (n)) (m))) (\lambda y : nat. (((le) (n)) (m)) \to ((And) (((divides) (y)) (m))) (((divides) ((((gcd_aux) (n)) (m)) (n))) (n)))) (\lambda lenm : ((le) (n)) (m). ((((((divides_gcd_aux_mn) (n)) (m)) (n)) (posn)) (lenm)) ((le_n) (n)))))) ((((((sym_eq_match_bool_type_false) (nat)) ((((gcd_aux) (n)) (m)) (n))) ((((gcd_aux) (m)) (n)) (m))) (\lambda y : nat. ((Not) (((le) (n)) (m))) \to ((And) (((divides) (((((match_bool_type) (nat)) ((((gcd_aux) (n)) (m)) (n))) ((((gcd_aux) (m)) (n)) (m))) (false))) (m))) (((divides) (y)) (n)))) ((((((sym_eq_match_bool_type_false) (nat)) ((((gcd_aux) (n)) (m)) (n))) ((((gcd_aux) (m)) (n)) (m))) (\lambda y : nat. ((Not) (((le) (n)) (m))) \to ((And) (((divides) (y)) (m))) (((divides) ((((gcd_aux) (m)) (n)) (m))) (n)))) (\lambda notlt : (Not) (((le) (n)) (m)). (((((match_And_prop) (((divides) ((((gcd_aux) (m)) (n)) (m))) (n))) (((divides) ((((gcd_aux) (m)) (n)) (m))) (m))) (((And) (((divides) ((((gcd_aux) (m)) (n)) (m))) (m))) (((divides) ((((gcd_aux) (m)) (n)) (m))) (n)))) (\lambda auto : ((divides) ((((gcd_aux) (m)) (n)) (m))) (n). \lambda auto' : ((divides) ((((gcd_aux) (m)) (n)) (m))) (m). \lambda z : Prop. \lambda f : (((divides) ((((gcd_aux) (m)) (n)) (m))) (m)) \to (((divides) ((((gcd_aux) (m)) (n)) (m))) (n)) \to z. ((f) (auto')) (auto))) (((((((divides_gcd_aux_mn) (m)) (n)) (m)) (posm)) ((((((transitive_le) (m)) ((S) (m))) (n)) ((le_n_Sn) (m))) ((((not_le_to_lt) (n)) (m)) (notlt)))) ((le_n) (m)))))))) (\lambda eqmO : (((eq) (nat)) (O)) (m). ((((((eq_ind) (nat)) (O)) (\lambda x_1 : nat. ((And) (((divides) (((gcd) (n)) (x_1))) (x_1))) (((divides) (((gcd) (n)) (x_1))) (n)))) (\lambda z : Prop. \lambda f : (((divides) (((gcd) (n)) (O))) (O)) \to (((divides) (((gcd) (n)) (O))) (n)) \to z. ((f) ((divides_n_O) (((gcd) (n)) (O)))) (((((eq_coerc) (((divides) (((gcd) (n)) (O))) (((gcd) (n)) (O)))) (((divides) (((gcd) (n)) (O))) (n))) ((divides_n_n) (((gcd) (n)) (O)))) (((((((rewrite_r) (nat)) (n)) (\lambda Joker_ : nat. (((eq) Prop) (((divides) (((gcd) (n)) (O))) (Joker_))) (((divides) (((gcd) (n)) (O))) (n)))) (((refl) Prop) (((divides) (((gcd) (n)) (O))) (n)))) (((gcd) (n)) (O))) (((((((rewrite_l) (nat)) (((gcd) (O)) (n))) (\lambda Joker_ : nat. (((eq) (nat)) (((gcd) (n)) (O))) (Joker_))) (((commutative_gcd) (n)) (O))) (n)) ((gcd_O_l) (n))))))) (m)) (eqmO))) ((((le_to_or_lt_eq) (O)) (m)) ((le_O_n) (m))))) (\lambda eqnO : (((eq) (nat)) (O)) (n). ((((((eq_ind) (nat)) (O)) (\lambda x_1 : nat. ((And) (((divides) (((gcd) (x_1)) (m))) (m))) (((divides) (((gcd) (x_1)) (m))) (x_1)))) (\lambda z : Prop. \lambda f : (((divides) (((gcd) (O)) (m))) (m)) \to (((divides) (((gcd) (O)) (m))) (O)) \to z. ((f) ((((((eq_match_bool_type_true) (nat)) (m)) ((((gcd_aux) (m)) (O)) (m))) (\lambda y : nat. ((divides) (((((match_bool_type) (nat)) ((((gcd_aux) (O)) (m)) (O))) ((((gcd_aux) (m)) (O)) (m))) (((leb) (O)) (m)))) (y))) (((eq_leb_body_O) (\lambda y : (nat) \to bool. ((divides) (((((match_bool_type) (nat)) ((((gcd_aux) (O)) (m)) (O))) ((((gcd_aux) (m)) (O)) (m))) (((leb) (O)) (m)))) (((((match_bool_type) (nat)) (m)) ((((gcd_aux) (m)) (O)) (m))) ((y) (m))))) (((((eq_filter_nat_type_O) ((nat) \to bool)) (leb_body)) (\lambda y : (nat) \to bool. ((divides) (((((match_bool_type) (nat)) ((((gcd_aux) (O)) (m)) (O))) ((((gcd_aux) (m)) (O)) (m))) (((leb) (O)) (m)))) (((((match_bool_type) (nat)) (m)) ((((gcd_aux) (m)) (O)) (m))) ((y) (m))))) ((((eq_leb) (O)) (\lambda y : (nat) \to bool. ((divides) (((((match_bool_type) (nat)) ((((gcd_aux) (O)) (m)) (O))) ((((gcd_aux) (m)) (O)) (m))) (((leb) (O)) (m)))) (((((match_bool_type) (nat)) (m)) ((((gcd_aux) (m)) (O)) (m))) ((y) (m))))) (((eq_gcd_aux_body_O) (\lambda y : (nat) \to (nat) \to nat. ((divides) (((gcd) (O)) (m))) (((((match_bool_type) (nat)) (((y) (m)) (O))) ((((gcd_aux) (m)) (O)) (m))) (((leb) (O)) (m))))) (((((eq_filter_nat_type_O) ((nat) \to (nat) \to nat)) (gcd_aux_body)) (\lambda y : (nat) \to (nat) \to nat. ((divides) (((gcd) (O)) (m))) (((((match_bool_type) (nat)) (((y) (m)) (O))) ((((gcd_aux) (m)) (O)) (m))) (((leb) (O)) (m))))) ((((eq_gcd_aux) (O)) (\lambda y : (nat) \to (nat) \to nat. ((divides) (((gcd) (O)) (m))) (((((match_bool_type) (nat)) (((y) (m)) (O))) ((((gcd_aux) (m)) (O)) (m))) (((leb) (O)) (m))))) ((divides_n_n) (((gcd) (O)) (m))))))))))) ((divides_n_O) (((gcd) (O)) (m))))) (n)) (eqnO))) ((((le_to_or_lt_eq) (O)) (n)) ((le_O_n) (n))).
definition divides_gcd_l : \forall n : nat. \forall m : nat. ((divides) (((gcd) (n)) (m))) (n) := \lambda n : nat. \lambda m : nat. (((proj2) (((divides) (((gcd) (n)) (m))) (m))) (((divides) (((gcd) (n)) (m))) (n))) (((divides_gcd_nm) (n)) (m)).
definition divides_gcd_r : \forall n : nat. \forall m : nat. ((divides) (((gcd) (n)) (m))) (m) := \lambda n : nat. \lambda m : nat. (((proj1) (((divides) (((gcd) (n)) (m))) (m))) (((divides) (((gcd) (n)) (m))) (n))) (((divides_gcd_nm) (n)) (m)).
definition let_clause_1544 : \forall p : nat. \forall q : nat. (\forall m : nat. \forall n : nat. (((lt) (O)) (n)) \to (((le) (n)) (m)) \to (((le) (n)) (q)) \to ((Ex) (nat)) (\lambda a : nat. ((Ex) (nat)) (\lambda b : nat. ((Or) ((((eq) (nat)) (((minus) (((times) (a)) (n))) (((times) (b)) (m)))) ((((gcd_aux) (q)) (m)) (n)))) ((((eq) (nat)) (((minus) (((times) (b)) (m))) (((times) (a)) (n)))) ((((gcd_aux) (q)) (m)) (n)))))) \to \forall m : nat. \forall n : nat. (((lt) (O)) (n)) \to (((le) (n)) (m)) \to (((le) (n)) ((S) (q))) \to ((Not) (((divides) (n)) (m))) \to \forall a : nat. (((Ex) (nat)) (\lambda b : nat. ((Or) ((((eq) (nat)) (((minus) (((times) (a)) (((mod) (m)) (n)))) (((times) (b)) (n)))) ((((gcd_aux) (q)) (n)) (((mod) (m)) (n))))) ((((eq) (nat)) (((minus) (((times) (b)) (n))) (((times) (a)) (((mod) (m)) (n))))) ((((gcd_aux) (q)) (n)) (((mod) (m)) (n)))))) \to \forall b : nat. (((Or) ((((eq) (nat)) (((minus) (((times) (a)) (((mod) (m)) (n)))) (((times) (b)) (n)))) ((((gcd_aux) (q)) (n)) (((mod) (m)) (n))))) ((((eq) (nat)) (((minus) (((times) (b)) (n))) (((times) (a)) (((mod) (m)) (n))))) ((((gcd_aux) (q)) (n)) (((mod) (m)) (n))))) \to ((((eq) (nat)) (((minus) (((times) (a)) (((mod) (m)) (n)))) (((times) (b)) (n)))) ((((gcd_aux) (q)) (n)) (((mod) (m)) (n)))) \to (((eq) (nat)) (((minus) (((times) (a)) (((mod) (m)) (n)))) (((times) (n)) (b)))) ((((gcd_aux) (q)) (n)) (((mod) (m)) (n))) := \lambda p : nat. \lambda q : nat. \lambda Hind : \forall m : nat. \forall n : nat. (((lt) (O)) (n)) \to (((le) (n)) (m)) \to (((le) (n)) (q)) \to ((Ex) (nat)) (\lambda a : nat. ((Ex) (nat)) (\lambda b : nat. ((Or) ((((eq) (nat)) (((minus) (((times) (a)) (n))) (((times) (b)) (m)))) ((((gcd_aux) (q)) (m)) (n)))) ((((eq) (nat)) (((minus) (((times) (b)) (m))) (((times) (a)) (n)))) ((((gcd_aux) (q)) (m)) (n))))). \lambda m : nat. \lambda n : nat. \lambda posn : ((lt) (O)) (n). \lambda lenm : ((le) (n)) (m). \lambda lenS : ((le) (n)) ((S) (q)). \lambda ndivnm : (Not) (((divides) (n)) (m)). \lambda a : nat. \lambda Jokerclearme : ((Ex) (nat)) (\lambda b : nat. ((Or) ((((eq) (nat)) (((minus) (((times) (a)) (((mod) (m)) (n)))) (((times) (b)) (n)))) ((((gcd_aux) (q)) (n)) (((mod) (m)) (n))))) ((((eq) (nat)) (((minus) (((times) (b)) (n))) (((times) (a)) (((mod) (m)) (n))))) ((((gcd_aux) (q)) (n)) (((mod) (m)) (n))))). \lambda b : nat. \lambda Jokerclearme0 : ((Or) ((((eq) (nat)) (((minus) (((times) (a)) (((mod) (m)) (n)))) (((times) (b)) (n)))) ((((gcd_aux) (q)) (n)) (((mod) (m)) (n))))) ((((eq) (nat)) (((minus) (((times) (b)) (n))) (((times) (a)) (((mod) (m)) (n))))) ((((gcd_aux) (q)) (n)) (((mod) (m)) (n)))). \lambda H : (((eq) (nat)) (((minus) (((times) (a)) (((mod) (m)) (n)))) (((times) (b)) (n)))) ((((gcd_aux) (q)) (n)) (((mod) (m)) (n))). ((((((rewrite_l) (nat)) (((times) (b)) (n))) (\lambda Joker_ : nat. (((eq) (nat)) (((minus) (((times) (a)) (((mod) (m)) (n)))) (Joker_))) ((((gcd_aux) (q)) (n)) (((mod) (m)) (n))))) (H)) (((times) (n)) (b))) (((commutative_times) (b)) (n)).
definition let_clause_15441 : \forall p : nat. \forall q : nat. (\forall m : nat. \forall n : nat. (((lt) (O)) (n)) \to (((le) (n)) (m)) \to (((le) (n)) (q)) \to ((Ex) (nat)) (\lambda a : nat. ((Ex) (nat)) (\lambda b : nat. ((Or) ((((eq) (nat)) (((minus) (((times) (a)) (n))) (((times) (b)) (m)))) ((((gcd_aux) (q)) (m)) (n)))) ((((eq) (nat)) (((minus) (((times) (b)) (m))) (((times) (a)) (n)))) ((((gcd_aux) (q)) (m)) (n)))))) \to \forall m : nat. \forall n : nat. (((lt) (O)) (n)) \to (((le) (n)) (m)) \to (((le) (n)) ((S) (q))) \to ((Not) (((divides) (n)) (m))) \to \forall a : nat. (((Ex) (nat)) (\lambda b : nat. ((Or) ((((eq) (nat)) (((minus) (((times) (a)) (((mod) (m)) (n)))) (((times) (b)) (n)))) ((((gcd_aux) (q)) (n)) (((mod) (m)) (n))))) ((((eq) (nat)) (((minus) (((times) (b)) (n))) (((times) (a)) (((mod) (m)) (n))))) ((((gcd_aux) (q)) (n)) (((mod) (m)) (n)))))) \to \forall b : nat. (((Or) ((((eq) (nat)) (((minus) (((times) (a)) (((mod) (m)) (n)))) (((times) (b)) (n)))) ((((gcd_aux) (q)) (n)) (((mod) (m)) (n))))) ((((eq) (nat)) (((minus) (((times) (b)) (n))) (((times) (a)) (((mod) (m)) (n))))) ((((gcd_aux) (q)) (n)) (((mod) (m)) (n))))) \to ((((eq) (nat)) (((minus) (((times) (b)) (n))) (((times) (a)) (((mod) (m)) (n))))) ((((gcd_aux) (q)) (n)) (((mod) (m)) (n)))) \to (((eq) (nat)) (((minus) (((times) (n)) (b))) (((times) (a)) (((mod) (m)) (n))))) ((((gcd_aux) (q)) (n)) (((mod) (m)) (n))) := \lambda p : nat. \lambda q : nat. \lambda Hind : \forall m : nat. \forall n : nat. (((lt) (O)) (n)) \to (((le) (n)) (m)) \to (((le) (n)) (q)) \to ((Ex) (nat)) (\lambda a : nat. ((Ex) (nat)) (\lambda b : nat. ((Or) ((((eq) (nat)) (((minus) (((times) (a)) (n))) (((times) (b)) (m)))) ((((gcd_aux) (q)) (m)) (n)))) ((((eq) (nat)) (((minus) (((times) (b)) (m))) (((times) (a)) (n)))) ((((gcd_aux) (q)) (m)) (n))))). \lambda m : nat. \lambda n : nat. \lambda posn : ((lt) (O)) (n). \lambda lenm : ((le) (n)) (m). \lambda lenS : ((le) (n)) ((S) (q)). \lambda ndivnm : (Not) (((divides) (n)) (m)). \lambda a : nat. \lambda Jokerclearme : ((Ex) (nat)) (\lambda b : nat. ((Or) ((((eq) (nat)) (((minus) (((times) (a)) (((mod) (m)) (n)))) (((times) (b)) (n)))) ((((gcd_aux) (q)) (n)) (((mod) (m)) (n))))) ((((eq) (nat)) (((minus) (((times) (b)) (n))) (((times) (a)) (((mod) (m)) (n))))) ((((gcd_aux) (q)) (n)) (((mod) (m)) (n))))). \lambda b : nat. \lambda Jokerclearme0 : ((Or) ((((eq) (nat)) (((minus) (((times) (a)) (((mod) (m)) (n)))) (((times) (b)) (n)))) ((((gcd_aux) (q)) (n)) (((mod) (m)) (n))))) ((((eq) (nat)) (((minus) (((times) (b)) (n))) (((times) (a)) (((mod) (m)) (n))))) ((((gcd_aux) (q)) (n)) (((mod) (m)) (n)))). \lambda H : (((eq) (nat)) (((minus) (((times) (b)) (n))) (((times) (a)) (((mod) (m)) (n))))) ((((gcd_aux) (q)) (n)) (((mod) (m)) (n))). ((((((rewrite_l) (nat)) (((times) (b)) (n))) (\lambda Joker_ : nat. (((eq) (nat)) (((minus) (Joker_)) (((times) (a)) (((mod) (m)) (n))))) ((((gcd_aux) (q)) (n)) (((mod) (m)) (n))))) (H)) (((times) (n)) (b))) (((commutative_times) (b)) (n)).
definition eq_minus_gcd_aux : \forall p : nat. \forall m : nat. \forall n : nat. (((lt) (O)) (n)) \to (((le) (n)) (m)) \to (((le) (n)) (p)) \to ((Ex) (nat)) (\lambda a : nat. ((Ex) (nat)) (\lambda b : nat. ((Or) ((((eq) (nat)) (((minus) (((times) (a)) (n))) (((times) (b)) (m)))) ((((gcd_aux) (p)) (m)) (n)))) ((((eq) (nat)) (((minus) (((times) (b)) (m))) (((times) (a)) (n)))) ((((gcd_aux) (p)) (m)) (n))))) := \lambda p : nat. ((((nat_ind) (\lambda Jokerx_365 : nat. \forall m : nat. \forall n : nat. (((lt) (O)) (n)) \to (((le) (n)) (m)) \to (((le) (n)) (Jokerx_365)) \to ((Ex) (nat)) (\lambda a : nat. ((Ex) (nat)) (\lambda b : nat. ((Or) ((((eq) (nat)) (((minus) (((times) (a)) (n))) (((times) (b)) (m)))) ((((gcd_aux) (Jokerx_365)) (m)) (n)))) ((((eq) (nat)) (((minus) (((times) (b)) (m))) (((times) (a)) (n)))) ((((gcd_aux) (Jokerx_365)) (m)) (n))))))) (\lambda m : nat. \lambda n : nat. \lambda posn : ((lt) (O)) (n). \lambda lenm : ((le) (n)) (m). \lambda lenO : ((le) (n)) (O). ((falsity) (((Ex) (nat)) (\lambda a : nat. ((Ex) (nat)) (\lambda b : nat. ((Or) ((((eq) (nat)) (((minus) (((times) (a)) (n))) (((times) (b)) (m)))) ((((gcd_aux) (O)) (m)) (n)))) ((((eq) (nat)) (((minus) (((times) (b)) (m))) (((times) (a)) (n)))) ((((gcd_aux) (O)) (m)) (n))))))) ((((absurd) (((lt) (O)) (n))) (posn)) ((((le_to_not_lt) (n)) (O)) (lenO))))) (\lambda q : nat. \lambda Hind : \forall m : nat. \forall n : nat. (((lt) (O)) (n)) \to (((le) (n)) (m)) \to (((le) (n)) (q)) \to ((Ex) (nat)) (\lambda a : nat. ((Ex) (nat)) (\lambda b : nat. ((Or) ((((eq) (nat)) (((minus) (((times) (a)) (n))) (((times) (b)) (m)))) ((((gcd_aux) (q)) (m)) (n)))) ((((eq) (nat)) (((minus) (((times) (b)) (m))) (((times) (a)) (n)))) ((((gcd_aux) (q)) (m)) (n))))). \lambda m : nat. \lambda n : nat. \lambda posn : ((lt) (O)) (n). \lambda lenm : ((le) (n)) (m). \lambda lenS : ((le) (n)) ((S) (q)). ((((((match_Or_prop) (((divides) (n)) (m))) ((Not) (((divides) (n)) (m)))) (((Ex) (nat)) (\lambda a : nat. ((Ex) (nat)) (\lambda b : nat. ((Or) ((((eq) (nat)) (((minus) (((times) (a)) (n))) (((times) (b)) (m)))) ((((gcd_aux) ((S) (q))) (m)) (n)))) ((((eq) (nat)) (((minus) (((times) (b)) (m))) (((times) (a)) (n)))) ((((gcd_aux) ((S) (q))) (m)) (n))))))) (\lambda divnm : ((divides) (n)) (m). ((((((eq_ind_r) (nat)) (n)) (\lambda x : nat. ((Ex) (nat)) (\lambda a : nat. ((Ex) (nat)) (\lambda b : nat. ((Or) ((((eq) (nat)) (((minus) (((times) (a)) (n))) (((times) (b)) (m)))) (x))) ((((eq) (nat)) (((minus) (((times) (b)) (m))) (((times) (a)) (n)))) (x)))))) (\lambda z : Prop. \lambda f : \forall x : nat. (((Ex) (nat)) (\lambda b : nat. ((Or) ((((eq) (nat)) (((minus) (((times) (x)) (n))) (((times) (b)) (m)))) (n))) ((((eq) (nat)) (((minus) (((times) (b)) (m))) (((times) (x)) (n)))) (n)))) \to z. ((f) ((S) (O))) (\lambda z0 : Prop. \lambda f2 : \forall x : nat. (((Or) ((((eq) (nat)) (((minus) (((times) ((S) (O))) (n))) (((times) (x)) (m)))) (n))) ((((eq) (nat)) (((minus) (((times) (x)) (m))) (((times) ((S) (O))) (n)))) (n))) \to z0. ((f2) (O)) (\lambda z1 : Prop. \lambda l : ((((eq) (nat)) (((minus) (((times) ((S) (O))) (n))) (((times) (O)) (m)))) (n)) \to z1. \lambda r : ((((eq) (nat)) (((minus) (((times) (O)) (m))) (((times) ((S) (O))) (n)))) (n)) \to z1. (l) (((((((rewrite_r) (nat)) (((times) (n)) ((S) (O)))) (\lambda Joker_ : nat. (((eq) (nat)) (((minus) (Joker_)) (((times) (O)) (m)))) (n))) (((((((rewrite_l) (nat)) (((plus) (n)) (((times) (n)) (O)))) (\lambda Joker_ : nat. (((eq) (nat)) (((minus) (Joker_)) (((times) (O)) (m)))) (n))) (((((((rewrite_l) (nat)) (O)) (\lambda Joker_ : nat. (((eq) (nat)) (((minus) (((plus) (n)) (Joker_))) (((times) (O)) (m)))) (n))) (((((((rewrite_l) (nat)) (n)) (\lambda Joker_ : nat. (((eq) (nat)) (((minus) (Joker_)) (((times) (O)) (m)))) (n))) (((((((rewrite_r) (nat)) (((times) (m)) (O))) (\lambda Joker_ : nat. (((eq) (nat)) (((minus) (n)) (Joker_))) (n))) (((((((rewrite_l) (nat)) (O)) (\lambda Joker_ : nat. (((eq) (nat)) (((minus) (n)) (Joker_))) (n))) (((((((rewrite_l) (nat)) (n)) (\lambda Joker_ : nat. (((eq) (nat)) (Joker_)) (n))) (((refl) (nat)) (n))) (((minus) (n)) (O))) ((minus_n_O) (n)))) (((times) (m)) (O))) ((times_n_O) (m)))) (((times) (O)) (m))) (((commutative_times) (O)) (m)))) (((plus) (n)) (O))) ((plus_n_O) (n)))) (((times) (n)) (O))) ((times_n_O) (n)))) (((times) (n)) ((S) (O)))) (((times_n_Sm) (n)) (O)))) (((times) ((S) (O))) (n))) (((commutative_times) ((S) (O))) (n))))))) ((((gcd_aux) ((S) (q))) (m)) (n))) (((((((divides_to_gcd_aux) ((S) (q))) (m)) (n)) ((lt_O_S) (q))) (posn)) (divnm)))) (\lambda ndivnm : (Not) (((divides) (n)) (m)). ((((((eq_ind_r) (nat)) ((((gcd_aux) (q)) (n)) (((mod) (m)) (n)))) (\lambda x : nat. ((Ex) (nat)) (\lambda a : nat. ((Ex) (nat)) (\lambda b : nat. ((Or) ((((eq) (nat)) (((minus) (((times) (a)) (n))) (((times) (b)) (m)))) (x))) ((((eq) (nat)) (((minus) (((times) (b)) (m))) (((times) (a)) (n)))) (x)))))) ((((((match_ex_prop) (nat)) (\lambda a : nat. ((Ex) (nat)) (\lambda b : nat. ((Or) ((((eq) (nat)) (((minus) (((times) (a)) (((mod) (m)) (n)))) (((times) (b)) (n)))) ((((gcd_aux) (q)) (n)) (((mod) (m)) (n))))) ((((eq) (nat)) (((minus) (((times) (b)) (n))) (((times) (a)) (((mod) (m)) (n))))) ((((gcd_aux) (q)) (n)) (((mod) (m)) (n))))))) (((Ex) (nat)) (\lambda a : nat. ((Ex) (nat)) (\lambda b : nat. ((Or) ((((eq) (nat)) (((minus) (((times) (a)) (n))) (((times) (b)) (m)))) ((((gcd_aux) (q)) (n)) (((mod) (m)) (n))))) ((((eq) (nat)) (((minus) (((times) (b)) (m))) (((times) (a)) (n)))) ((((gcd_aux) (q)) (n)) (((mod) (m)) (n)))))))) (\lambda a : nat. \lambda Jokerclearme : ((Ex) (nat)) (\lambda b : nat. ((Or) ((((eq) (nat)) (((minus) (((times) (a)) (((mod) (m)) (n)))) (((times) (b)) (n)))) ((((gcd_aux) (q)) (n)) (((mod) (m)) (n))))) ((((eq) (nat)) (((minus) (((times) (b)) (n))) (((times) (a)) (((mod) (m)) (n))))) ((((gcd_aux) (q)) (n)) (((mod) (m)) (n))))). (((((match_ex_prop) (nat)) (\lambda b : nat. ((Or) ((((eq) (nat)) (((minus) (((times) (a)) (((mod) (m)) (n)))) (((times) (b)) (n)))) ((((gcd_aux) (q)) (n)) (((mod) (m)) (n))))) ((((eq) (nat)) (((minus) (((times) (b)) (n))) (((times) (a)) (((mod) (m)) (n))))) ((((gcd_aux) (q)) (n)) (((mod) (m)) (n)))))) (((Ex) (nat)) (\lambda a0 : nat. ((Ex) (nat)) (\lambda b : nat. ((Or) ((((eq) (nat)) (((minus) (((times) (a0)) (n))) (((times) (b)) (m)))) ((((gcd_aux) (q)) (n)) (((mod) (m)) (n))))) ((((eq) (nat)) (((minus) (((times) (b)) (m))) (((times) (a0)) (n)))) ((((gcd_aux) (q)) (n)) (((mod) (m)) (n)))))))) (\lambda b : nat. \lambda Jokerclearme0 : ((Or) ((((eq) (nat)) (((minus) (((times) (a)) (((mod) (m)) (n)))) (((times) (b)) (n)))) ((((gcd_aux) (q)) (n)) (((mod) (m)) (n))))) ((((eq) (nat)) (((minus) (((times) (b)) (n))) (((times) (a)) (((mod) (m)) (n))))) ((((gcd_aux) (q)) (n)) (((mod) (m)) (n)))). ((((((match_Or_prop) ((((eq) (nat)) (((minus) (((times) (a)) (((mod) (m)) (n)))) (((times) (b)) (n)))) ((((gcd_aux) (q)) (n)) (((mod) (m)) (n))))) ((((eq) (nat)) (((minus) (((times) (b)) (n))) (((times) (a)) (((mod) (m)) (n))))) ((((gcd_aux) (q)) (n)) (((mod) (m)) (n))))) (((Ex) (nat)) (\lambda a0 : nat. ((Ex) (nat)) (\lambda b0 : nat. ((Or) ((((eq) (nat)) (((minus) (((times) (a0)) (n))) (((times) (b0)) (m)))) ((((gcd_aux) (q)) (n)) (((mod) (m)) (n))))) ((((eq) (nat)) (((minus) (((times) (b0)) (m))) (((times) (a0)) (n)))) ((((gcd_aux) (q)) (n)) (((mod) (m)) (n)))))))) (\lambda H : (((eq) (nat)) (((minus) (((times) (a)) (((mod) (m)) (n)))) (((times) (b)) (n)))) ((((gcd_aux) (q)) (n)) (((mod) (m)) (n))). ((((((eq_ind) (nat)) (((minus) (((times) (a)) (((mod) (m)) (n)))) (((times) (b)) (n)))) (\lambda x_1 : nat. ((Ex) (nat)) (\lambda a0 : nat. ((Ex) (nat)) (\lambda b0 : nat. ((Or) ((((eq) (nat)) (((minus) (((times) (a0)) (n))) (((times) (b0)) (m)))) (x_1))) ((((eq) (nat)) (((minus) (((times) (b0)) (m))) (((times) (a0)) (n)))) (x_1)))))) (\lambda z : Prop. \lambda f : \forall x : nat. (((Ex) (nat)) (\lambda b0 : nat. ((Or) ((((eq) (nat)) (((minus) (((times) (x)) (n))) (((times) (b0)) (m)))) (((minus) (((times) (a)) (((mod) (m)) (n)))) (((times) (b)) (n))))) ((((eq) (nat)) (((minus) (((times) (b0)) (m))) (((times) (x)) (n)))) (((minus) (((times) (a)) (((mod) (m)) (n)))) (((times) (b)) (n)))))) \to z. ((f) (((plus) (b)) (((times) (a)) (((div) (m)) (n))))) (\lambda z0 : Prop. \lambda f0 : \forall x : nat. (((Or) ((((eq) (nat)) (((minus) (((times) (((plus) (b)) (((times) (a)) (((div) (m)) (n))))) (n))) (((times) (x)) (m)))) (((minus) (((times) (a)) (((mod) (m)) (n)))) (((times) (b)) (n))))) ((((eq) (nat)) (((minus) (((times) (x)) (m))) (((times) (((plus) (b)) (((times) (a)) (((div) (m)) (n))))) (n)))) (((minus) (((times) (a)) (((mod) (m)) (n)))) (((times) (b)) (n))))) \to z0. ((f0) (a)) (\lambda z1 : Prop. \lambda l : ((((eq) (nat)) (((minus) (((times) (((plus) (b)) (((times) (a)) (((div) (m)) (n))))) (n))) (((times) (a)) (m)))) (((minus) (((times) (a)) (((mod) (m)) (n)))) (((times) (b)) (n)))) \to z1. \lambda r : ((((eq) (nat)) (((minus) (((times) (a)) (m))) (((times) (((plus) (b)) (((times) (a)) (((div) (m)) (n))))) (n)))) (((minus) (((times) (a)) (((mod) (m)) (n)))) (((times) (b)) (n)))) \to z1. (r) (((((((eq_ind) (nat)) (((plus) (((times) (a)) (((div) (m)) (n)))) (b))) (\lambda x_1 : nat. (((eq) (nat)) (((minus) (((times) (a)) (m))) (((times) (x_1)) (n)))) (((minus) (((times) (a)) (((mod) (m)) (n)))) (((times) (b)) (n))))) (((((((eq_ind_r) (nat)) (((plus) (((times) (((times) (a)) (((div) (m)) (n)))) (n))) (((times) (b)) (n)))) (\lambda x : nat. (((eq) (nat)) (((minus) (((times) (a)) (m))) (x))) (((minus) (((times) (a)) (((mod) (m)) (n)))) (((times) (b)) (n))))) (((((((eq_ind_r) (nat)) (((plus) (((times) (((div) (m)) (n))) (n))) (((mod) (m)) (n)))) (\lambda x : nat. (((eq) (nat)) (((minus) (((times) (a)) (x))) (((plus) (((times) (((times) (a)) (((div) (m)) (n)))) (n))) (((times) (b)) (n))))) (((minus) (((times) (a)) (((mod) (m)) (n)))) (((times) (b)) (n))))) (((((((eq_ind_r) (nat)) (((times) (a)) (((times) (((div) (m)) (n))) (n)))) (\lambda x : nat. (((eq) (nat)) (((minus) (((times) (a)) (((plus) (((times) (((div) (m)) (n))) (n))) (((mod) (m)) (n))))) (((plus) (x)) (((times) (b)) (n))))) (((minus) (((times) (a)) (((mod) (m)) (n)))) (((times) (b)) (n))))) (((((((eq_ind) (nat)) (((plus) (((mod) (m)) (n))) (((times) (((div) (m)) (n))) (n)))) (\lambda x_1 : nat. (((eq) (nat)) (((minus) (((times) (a)) (x_1))) (((plus) (((times) (a)) (((times) (((div) (m)) (n))) (n)))) (((times) (b)) (n))))) (((minus) (((times) (a)) (((mod) (m)) (n)))) (((times) (b)) (n))))) (((((((eq_ind_r) (nat)) (((plus) (((times) (a)) (((mod) (m)) (n)))) (((times) (a)) (((times) (((div) (m)) (n))) (n))))) (\lambda x : nat. (((eq) (nat)) (((minus) (x)) (((plus) (((times) (a)) (((times) (((div) (m)) (n))) (n)))) (((times) (b)) (n))))) (((minus) (((times) (a)) (((mod) (m)) (n)))) (((times) (b)) (n))))) (((((((eq_ind) (nat)) (((minus) (((minus) (((plus) (((times) (a)) (((mod) (m)) (n)))) (((times) (a)) (((times) (((div) (m)) (n))) (n))))) (((times) (a)) (((times) (((div) (m)) (n))) (n))))) (((times) (b)) (n)))) (\lambda x_1 : nat. (((eq) (nat)) (x_1)) (((minus) (((times) (a)) (((mod) (m)) (n)))) (((times) (b)) (n))))) (((((((eq_ind) (nat)) (((plus) (((times) (a)) (((times) (((div) (m)) (n))) (n)))) (((times) (a)) (((mod) (m)) (n))))) (\lambda x_1 : nat. (((eq) (nat)) (((minus) (((minus) (x_1)) (((times) (a)) (((times) (((div) (m)) (n))) (n))))) (((times) (b)) (n)))) (((minus) (((times) (a)) (((mod) (m)) (n)))) (((times) (b)) (n))))) (((((((eq_ind) (nat)) (((plus) (((minus) (((times) (a)) (((times) (((div) (m)) (n))) (n)))) (((times) (a)) (((times) (((div) (m)) (n))) (n))))) (((times) (a)) (((mod) (m)) (n))))) (\lambda x_1 : nat. (((eq) (nat)) (((minus) (x_1)) (((times) (b)) (n)))) (((minus) (((times) (a)) (((mod) (m)) (n)))) (((times) (b)) (n))))) (((((((rewrite_r) (nat)) (((times) (n)) (((div) (m)) (n)))) (\lambda Joker_ : nat. (((eq) (nat)) (((minus) (((plus) (((minus) (((times) (a)) (Joker_))) (((times) (a)) (((times) (((div) (m)) (n))) (n))))) (((times) (a)) (((mod) (m)) (n))))) (((times) (b)) (n)))) (((minus) (((times) (a)) (((mod) (m)) (n)))) (((times) (b)) (n))))) (((((((rewrite_r) (nat)) (((times) (n)) (((times) (a)) (((div) (m)) (n))))) (\lambda Joker_ : nat. (((eq) (nat)) (((minus) (((plus) (((minus) (Joker_)) (((times) (a)) (((times) (((div) (m)) (n))) (n))))) (((times) (a)) (((mod) (m)) (n))))) (((times) (b)) (n)))) (((minus) (((times) (a)) (((mod) (m)) (n)))) (((times) (b)) (n))))) (((((((rewrite_r) (nat)) (((times) (n)) (((div) (m)) (n)))) (\lambda Joker_ : nat. (((eq) (nat)) (((minus) (((plus) (((minus) (((times) (n)) (((times) (a)) (((div) (m)) (n))))) (((times) (a)) (Joker_)))) (((times) (a)) (((mod) (m)) (n))))) (((times) (b)) (n)))) (((minus) (((times) (a)) (((mod) (m)) (n)))) (((times) (b)) (n))))) (((((((rewrite_r) (nat)) (((times) (n)) (((times) (a)) (((div) (m)) (n))))) (\lambda Joker_ : nat. (((eq) (nat)) (((minus) (((plus) (((minus) (((times) (n)) (((times) (a)) (((div) (m)) (n))))) (Joker_))) (((times) (a)) (((mod) (m)) (n))))) (((times) (b)) (n)))) (((minus) (((times) (a)) (((mod) (m)) (n)))) (((times) (b)) (n))))) (((((((rewrite_l) (nat)) (O)) (\lambda Joker_ : nat. (((eq) (nat)) (((minus) (((plus) (Joker_)) (((times) (a)) (((mod) (m)) (n))))) (((times) (b)) (n)))) (((minus) (((times) (a)) (((mod) (m)) (n)))) (((times) (b)) (n))))) (((((((rewrite_l) (nat)) (((times) (a)) (((mod) (m)) (n)))) (\lambda Joker_ : nat. (((eq) (nat)) (((minus) (Joker_)) (((times) (b)) (n)))) (((minus) (((times) (a)) (((mod) (m)) (n)))) (((times) (b)) (n))))) (((((((rewrite_r) (nat)) (((times) (n)) (b))) (\lambda Joker_ : nat. (((eq) (nat)) (((minus) (((times) (a)) (((mod) (m)) (n)))) (Joker_))) (((minus) (((times) (a)) (((mod) (m)) (n)))) (((times) (b)) (n))))) (((((((rewrite_r) (nat)) ((((gcd_aux) (q)) (n)) (((mod) (m)) (n)))) (\lambda Joker_ : nat. (((eq) (nat)) (Joker_)) (((minus) (((times) (a)) (((mod) (m)) (n)))) (((times) (b)) (n))))) (((((((rewrite_r) (nat)) (((times) (n)) (b))) (\lambda Joker_ : nat. (((eq) (nat)) ((((gcd_aux) (q)) (n)) (((mod) (m)) (n)))) (((minus) (((times) (a)) (((mod) (m)) (n)))) (Joker_)))) (((((((rewrite_r) (nat)) ((((gcd_aux) (q)) (n)) (((mod) (m)) (n)))) (\lambda Joker_ : nat. (((eq) (nat)) ((((gcd_aux) (q)) (n)) (((mod) (m)) (n)))) (Joker_))) (((refl) (nat)) ((((gcd_aux) (q)) (n)) (((mod) (m)) (n))))) (((minus) (((times) (a)) (((mod) (m)) (n)))) (((times) (n)) (b)))) (((((((((((((((let_clause_1544) (p)) (q)) (Hind)) (m)) (n)) (posn)) (lenm)) (lenS)) (ndivnm)) (a)) (Jokerclearme)) (b)) (Jokerclearme0)) (H)))) (((times) (b)) (n))) (((commutative_times) (b)) (n)))) (((minus) (((times) (a)) (((mod) (m)) (n)))) (((times) (n)) (b)))) (((((((((((((((let_clause_1544) (p)) (q)) (Hind)) (m)) (n)) (posn)) (lenm)) (lenS)) (ndivnm)) (a)) (Jokerclearme)) (b)) (Jokerclearme0)) (H)))) (((times) (b)) (n))) (((commutative_times) (b)) (n)))) (((plus) (O)) (((times) (a)) (((mod) (m)) (n))))) ((plus_O_n) (((times) (a)) (((mod) (m)) (n)))))) (((minus) (((times) (n)) (((times) (a)) (((div) (m)) (n))))) (((times) (n)) (((times) (a)) (((div) (m)) (n)))))) ((minus_n_n) (((times) (n)) (((times) (a)) (((div) (m)) (n))))))) (((times) (a)) (((times) (n)) (((div) (m)) (n))))) ((((times_times) (a)) (n)) (((div) (m)) (n))))) (((times) (((div) (m)) (n))) (n))) (((commutative_times) (((div) (m)) (n))) (n)))) (((times) (a)) (((times) (n)) (((div) (m)) (n))))) ((((times_times) (a)) (n)) (((div) (m)) (n))))) (((times) (((div) (m)) (n))) (n))) (((commutative_times) (((div) (m)) (n))) (n)))) (((minus) (((plus) (((times) (a)) (((times) (((div) (m)) (n))) (n)))) (((times) (a)) (((mod) (m)) (n))))) (((times) (a)) (((times) (((div) (m)) (n))) (n))))) (((((plus_minus) (((times) (a)) (((times) (((div) (m)) (n))) (n)))) (((times) (a)) (((times) (((div) (m)) (n))) (n)))) (((times) (a)) (((mod) (m)) (n)))) ((le_n) (((times) (a)) (((times) (((div) (m)) (n))) (n))))))) (((plus) (((times) (a)) (((mod) (m)) (n)))) (((times) (a)) (((times) (((div) (m)) (n))) (n))))) (((commutative_plus) (((times) (a)) (((times) (((div) (m)) (n))) (n)))) (((times) (a)) (((mod) (m)) (n)))))) (((minus) (((plus) (((times) (a)) (((mod) (m)) (n)))) (((times) (a)) (((times) (((div) (m)) (n))) (n))))) (((plus) (((times) (a)) (((times) (((div) (m)) (n))) (n)))) (((times) (b)) (n))))) ((((minus_plus) (((plus) (((times) (a)) (((mod) (m)) (n)))) (((times) (a)) (((times) (((div) (m)) (n))) (n))))) (((times) (a)) (((times) (((div) (m)) (n))) (n)))) (((times) (b)) (n))))) (((times) (a)) (((plus) (((mod) (m)) (n))) (((times) (((div) (m)) (n))) (n))))) ((((distributive_times_plus) (a)) (((mod) (m)) (n))) (((times) (((div) (m)) (n))) (n))))) (((plus) (((times) (((div) (m)) (n))) (n))) (((mod) (m)) (n)))) (((commutative_plus) (((mod) (m)) (n))) (((times) (((div) (m)) (n))) (n))))) (((times) (((times) (a)) (((div) (m)) (n)))) (n))) ((((associative_times) (a)) (((div) (m)) (n))) (n)))) (m)) (((div_mod) (m)) (n)))) (((times) (((plus) (((times) (a)) (((div) (m)) (n)))) (b))) (n))) ((((distributive_times_plus_r) (n)) (((times) (a)) (((div) (m)) (n)))) (b)))) (((plus) (b)) (((times) (a)) (((div) (m)) (n))))) (((commutative_plus) (((times) (a)) (((div) (m)) (n)))) (b))))))) ((((gcd_aux) (q)) (n)) (((mod) (m)) (n)))) (H))) (\lambda H : (((eq) (nat)) (((minus) (((times) (b)) (n))) (((times) (a)) (((mod) (m)) (n))))) ((((gcd_aux) (q)) (n)) (((mod) (m)) (n))). ((((((eq_ind) (nat)) (((minus) (((times) (b)) (n))) (((times) (a)) (((mod) (m)) (n))))) (\lambda x_1 : nat. ((Ex) (nat)) (\lambda a0 : nat. ((Ex) (nat)) (\lambda b0 : nat. ((Or) ((((eq) (nat)) (((minus) (((times) (a0)) (n))) (((times) (b0)) (m)))) (x_1))) ((((eq) (nat)) (((minus) (((times) (b0)) (m))) (((times) (a0)) (n)))) (x_1)))))) (\lambda z : Prop. \lambda f : \forall x : nat. (((Ex) (nat)) (\lambda b0 : nat. ((Or) ((((eq) (nat)) (((minus) (((times) (x)) (n))) (((times) (b0)) (m)))) (((minus) (((times) (b)) (n))) (((times) (a)) (((mod) (m)) (n)))))) ((((eq) (nat)) (((minus) (((times) (b0)) (m))) (((times) (x)) (n)))) (((minus) (((times) (b)) (n))) (((times) (a)) (((mod) (m)) (n))))))) \to z. ((f) (((plus) (b)) (((times) (a)) (((div) (m)) (n))))) (\lambda z0 : Prop. \lambda f0 : \forall x : nat. (((Or) ((((eq) (nat)) (((minus) (((times) (((plus) (b)) (((times) (a)) (((div) (m)) (n))))) (n))) (((times) (x)) (m)))) (((minus) (((times) (b)) (n))) (((times) (a)) (((mod) (m)) (n)))))) ((((eq) (nat)) (((minus) (((times) (x)) (m))) (((times) (((plus) (b)) (((times) (a)) (((div) (m)) (n))))) (n)))) (((minus) (((times) (b)) (n))) (((times) (a)) (((mod) (m)) (n)))))) \to z0. ((f0) (a)) (\lambda z1 : Prop. \lambda l : ((((eq) (nat)) (((minus) (((times) (((plus) (b)) (((times) (a)) (((div) (m)) (n))))) (n))) (((times) (a)) (m)))) (((minus) (((times) (b)) (n))) (((times) (a)) (((mod) (m)) (n))))) \to z1. \lambda r : ((((eq) (nat)) (((minus) (((times) (a)) (m))) (((times) (((plus) (b)) (((times) (a)) (((div) (m)) (n))))) (n)))) (((minus) (((times) (b)) (n))) (((times) (a)) (((mod) (m)) (n))))) \to z1. (l) (((((((eq_ind_r) (nat)) (((plus) (((times) (b)) (n))) (((times) (((times) (a)) (((div) (m)) (n)))) (n)))) (\lambda x : nat. (((eq) (nat)) (((minus) (x)) (((times) (a)) (m)))) (((minus) (((times) (b)) (n))) (((times) (a)) (((mod) (m)) (n)))))) (((((((eq_ind_r) (nat)) (((plus) (((times) (((div) (m)) (n))) (n))) (((mod) (m)) (n)))) (\lambda x : nat. (((eq) (nat)) (((minus) (((plus) (((times) (b)) (n))) (((times) (((times) (a)) (((div) (m)) (n)))) (n)))) (((times) (a)) (x)))) (((minus) (((times) (b)) (n))) (((times) (a)) (((mod) (m)) (n)))))) (((((((eq_ind_r) (nat)) (((plus) (((times) (a)) (((times) (((div) (m)) (n))) (n)))) (((times) (a)) (((mod) (m)) (n))))) (\lambda x : nat. (((eq) (nat)) (((minus) (((plus) (((times) (b)) (n))) (((times) (((times) (a)) (((div) (m)) (n)))) (n)))) (x))) (((minus) (((times) (b)) (n))) (((times) (a)) (((mod) (m)) (n)))))) (((((((eq_ind_r) (nat)) (((times) (a)) (((times) (((div) (m)) (n))) (n)))) (\lambda x : nat. (((eq) (nat)) (((minus) (((plus) (((times) (b)) (n))) (x))) (((plus) (((times) (a)) (((times) (((div) (m)) (n))) (n)))) (((times) (a)) (((mod) (m)) (n)))))) (((minus) (((times) (b)) (n))) (((times) (a)) (((mod) (m)) (n)))))) (((((((eq_ind) (nat)) (((minus) (((minus) (((plus) (((times) (b)) (n))) (((times) (a)) (((times) (((div) (m)) (n))) (n))))) (((times) (a)) (((times) (((div) (m)) (n))) (n))))) (((times) (a)) (((mod) (m)) (n))))) (\lambda x_1 : nat. (((eq) (nat)) (x_1)) (((minus) (((times) (b)) (n))) (((times) (a)) (((mod) (m)) (n)))))) (((((((eq_ind) (nat)) (((plus) (((times) (a)) (((times) (((div) (m)) (n))) (n)))) (((times) (b)) (n)))) (\lambda x_1 : nat. (((eq) (nat)) (((minus) (((minus) (x_1)) (((times) (a)) (((times) (((div) (m)) (n))) (n))))) (((times) (a)) (((mod) (m)) (n))))) (((minus) (((times) (b)) (n))) (((times) (a)) (((mod) (m)) (n)))))) (((((((eq_ind) (nat)) (((plus) (((minus) (((times) (a)) (((times) (((div) (m)) (n))) (n)))) (((times) (a)) (((times) (((div) (m)) (n))) (n))))) (((times) (b)) (n)))) (\lambda x_1 : nat. (((eq) (nat)) (((minus) (x_1)) (((times) (a)) (((mod) (m)) (n))))) (((minus) (((times) (b)) (n))) (((times) (a)) (((mod) (m)) (n)))))) (((((((rewrite_r) (nat)) (((times) (n)) (((div) (m)) (n)))) (\lambda Joker_ : nat. (((eq) (nat)) (((minus) (((plus) (((minus) (((times) (a)) (Joker_))) (((times) (a)) (((times) (((div) (m)) (n))) (n))))) (((times) (b)) (n)))) (((times) (a)) (((mod) (m)) (n))))) (((minus) (((times) (b)) (n))) (((times) (a)) (((mod) (m)) (n)))))) (((((((rewrite_r) (nat)) (((times) (n)) (((times) (a)) (((div) (m)) (n))))) (\lambda Joker_ : nat. (((eq) (nat)) (((minus) (((plus) (((minus) (Joker_)) (((times) (a)) (((times) (((div) (m)) (n))) (n))))) (((times) (b)) (n)))) (((times) (a)) (((mod) (m)) (n))))) (((minus) (((times) (b)) (n))) (((times) (a)) (((mod) (m)) (n)))))) (((((((rewrite_r) (nat)) (((times) (n)) (((div) (m)) (n)))) (\lambda Joker_ : nat. (((eq) (nat)) (((minus) (((plus) (((minus) (((times) (n)) (((times) (a)) (((div) (m)) (n))))) (((times) (a)) (Joker_)))) (((times) (b)) (n)))) (((times) (a)) (((mod) (m)) (n))))) (((minus) (((times) (b)) (n))) (((times) (a)) (((mod) (m)) (n)))))) (((((((rewrite_r) (nat)) (((times) (n)) (((times) (a)) (((div) (m)) (n))))) (\lambda Joker_ : nat. (((eq) (nat)) (((minus) (((plus) (((minus) (((times) (n)) (((times) (a)) (((div) (m)) (n))))) (Joker_))) (((times) (b)) (n)))) (((times) (a)) (((mod) (m)) (n))))) (((minus) (((times) (b)) (n))) (((times) (a)) (((mod) (m)) (n)))))) (((((((rewrite_l) (nat)) (O)) (\lambda Joker_ : nat. (((eq) (nat)) (((minus) (((plus) (Joker_)) (((times) (b)) (n)))) (((times) (a)) (((mod) (m)) (n))))) (((minus) (((times) (b)) (n))) (((times) (a)) (((mod) (m)) (n)))))) (((((((rewrite_r) (nat)) (((times) (n)) (b))) (\lambda Joker_ : nat. (((eq) (nat)) (((minus) (((plus) (O)) (Joker_))) (((times) (a)) (((mod) (m)) (n))))) (((minus) (((times) (b)) (n))) (((times) (a)) (((mod) (m)) (n)))))) (((((((rewrite_l) (nat)) (((times) (n)) (b))) (\lambda Joker_ : nat. (((eq) (nat)) (((minus) (Joker_)) (((times) (a)) (((mod) (m)) (n))))) (((minus) (((times) (b)) (n))) (((times) (a)) (((mod) (m)) (n)))))) (((((((rewrite_r) (nat)) ((((gcd_aux) (q)) (n)) (((mod) (m)) (n)))) (\lambda Joker_ : nat. (((eq) (nat)) (Joker_)) (((minus) (((times) (b)) (n))) (((times) (a)) (((mod) (m)) (n)))))) (((((((rewrite_r) (nat)) (((times) (n)) (b))) (\lambda Joker_ : nat. (((eq) (nat)) ((((gcd_aux) (q)) (n)) (((mod) (m)) (n)))) (((minus) (Joker_)) (((times) (a)) (((mod) (m)) (n)))))) (((((((rewrite_r) (nat)) ((((gcd_aux) (q)) (n)) (((mod) (m)) (n)))) (\lambda Joker_ : nat. (((eq) (nat)) ((((gcd_aux) (q)) (n)) (((mod) (m)) (n)))) (Joker_))) (((refl) (nat)) ((((gcd_aux) (q)) (n)) (((mod) (m)) (n))))) (((minus) (((times) (n)) (b))) (((times) (a)) (((mod) (m)) (n))))) (((((((((((((((let_clause_15441) (p)) (q)) (Hind)) (m)) (n)) (posn)) (lenm)) (lenS)) (ndivnm)) (a)) (Jokerclearme)) (b)) (Jokerclearme0)) (H)))) (((times) (b)) (n))) (((commutative_times) (b)) (n)))) (((minus) (((times) (n)) (b))) (((times) (a)) (((mod) (m)) (n))))) (((((((((((((((let_clause_15441) (p)) (q)) (Hind)) (m)) (n)) (posn)) (lenm)) (lenS)) (ndivnm)) (a)) (Jokerclearme)) (b)) (Jokerclearme0)) (H)))) (((plus) (O)) (((times) (n)) (b)))) ((plus_O_n) (((times) (n)) (b))))) (((times) (b)) (n))) (((commutative_times) (b)) (n)))) (((minus) (((times) (n)) (((times) (a)) (((div) (m)) (n))))) (((times) (n)) (((times) (a)) (((div) (m)) (n)))))) ((minus_n_n) (((times) (n)) (((times) (a)) (((div) (m)) (n))))))) (((times) (a)) (((times) (n)) (((div) (m)) (n))))) ((((times_times) (a)) (n)) (((div) (m)) (n))))) (((times) (((div) (m)) (n))) (n))) (((commutative_times) (((div) (m)) (n))) (n)))) (((times) (a)) (((times) (n)) (((div) (m)) (n))))) ((((times_times) (a)) (n)) (((div) (m)) (n))))) (((times) (((div) (m)) (n))) (n))) (((commutative_times) (((div) (m)) (n))) (n)))) (((minus) (((plus) (((times) (a)) (((times) (((div) (m)) (n))) (n)))) (((times) (b)) (n)))) (((times) (a)) (((times) (((div) (m)) (n))) (n))))) (((((plus_minus) (((times) (a)) (((times) (((div) (m)) (n))) (n)))) (((times) (a)) (((times) (((div) (m)) (n))) (n)))) (((times) (b)) (n))) ((le_n) (((times) (a)) (((times) (((div) (m)) (n))) (n))))))) (((plus) (((times) (b)) (n))) (((times) (a)) (((times) (((div) (m)) (n))) (n))))) (((commutative_plus) (((times) (a)) (((times) (((div) (m)) (n))) (n)))) (((times) (b)) (n))))) (((minus) (((plus) (((times) (b)) (n))) (((times) (a)) (((times) (((div) (m)) (n))) (n))))) (((plus) (((times) (a)) (((times) (((div) (m)) (n))) (n)))) (((times) (a)) (((mod) (m)) (n)))))) ((((minus_plus) (((plus) (((times) (b)) (n))) (((times) (a)) (((times) (((div) (m)) (n))) (n))))) (((times) (a)) (((times) (((div) (m)) (n))) (n)))) (((times) (a)) (((mod) (m)) (n)))))) (((times) (((times) (a)) (((div) (m)) (n)))) (n))) ((((associative_times) (a)) (((div) (m)) (n))) (n)))) (((times) (a)) (((plus) (((times) (((div) (m)) (n))) (n))) (((mod) (m)) (n))))) ((((distributive_times_plus) (a)) (((times) (((div) (m)) (n))) (n))) (((mod) (m)) (n))))) (m)) (((div_mod) (m)) (n)))) (((times) (((plus) (b)) (((times) (a)) (((div) (m)) (n))))) (n))) ((((distributive_times_plus_r) (n)) (b)) (((times) (a)) (((div) (m)) (n))))))))) ((((gcd_aux) (q)) (n)) (((mod) (m)) (n)))) (H))) (Jokerclearme0))) (Jokerclearme))) ((((((Hind) (n)) (((mod) (m)) (n))) (((((((match_Or_prop) (((lt) (O)) (((mod) (m)) (n)))) ((((eq) (nat)) (O)) (((mod) (m)) (n)))) (((lt) (O)) (((mod) (m)) (n)))) (\lambda auto : ((lt) (O)) (((mod) (m)) (n)). auto)) (\lambda modO : (((eq) (nat)) (O)) (((mod) (m)) (n)). ((falsity) (((lt) (O)) (((mod) (m)) (n)))) ((((absurd) (((divides) (n)) (m))) (((((mod_O_to_divides) (n)) (m)) (posn)) (((((((rewrite_l) (nat)) (O)) (\lambda Joker_ : nat. (((eq) (nat)) (Joker_)) (O))) (((refl) (nat)) (O))) (((mod) (m)) (n))) (modO)))) (ndivnm)))) ((((le_to_or_lt_eq) (O)) (((mod) (m)) (n))) ((le_O_n) (((mod) (m)) (n)))))) ((((lt_to_le) (((mod) (m)) (n))) (n)) ((((lt_mod_m_m) (m)) (n)) (posn)))) ((((le_S_S_to_le) (((mod) (m)) (n))) (q)) ((((((transitive_le) ((S) (((mod) (m)) (n)))) (n)) ((S) (q))) ((((lt_mod_m_m) (m)) (n)) (posn))) (lenS)))))) ((((gcd_aux) ((S) (q))) (m)) (n))) ((((((not_divides_to_gcd_aux) (q)) (m)) (n)) (posn)) (ndivnm)))) (((decidable_divides) (n)) (m)))) (p).
definition let_clause_1549 : \forall m : nat. \forall n : nat. (((lt) (O)) (n)) \to ((((eq) (nat)) (O)) (m)) \to \forall x1106 : nat. (((eq) (nat)) (x1106)) (((minus) (x1106)) (m)) := \lambda m : nat. \lambda n : nat. \lambda posn : ((lt) (O)) (n). \lambda eqm0 : (((eq) (nat)) (O)) (m). \lambda x1106 : nat. ((((((rewrite_l) (nat)) (O)) (\lambda Joker_ : nat. (((eq) (nat)) (x1106)) (((minus) (x1106)) (Joker_)))) ((minus_n_O) (x1106))) (m)) (eqm0).
definition let_clause_15491 : \forall m : nat. \forall n : nat. ((((eq) (nat)) (O)) (n)) \to \forall x1106 : nat. (((eq) (nat)) (x1106)) (((minus) (x1106)) (n)) := \lambda m : nat. \lambda n : nat. \lambda eqn0 : (((eq) (nat)) (O)) (n). \lambda x1106 : nat. ((((((rewrite_l) (nat)) (O)) (\lambda Joker_ : nat. (((eq) (nat)) (x1106)) (((minus) (x1106)) (Joker_)))) ((minus_n_O) (x1106))) (n)) (eqn0).
definition let_clause_1551 : \forall m : nat. \forall n : nat. ((((eq) (nat)) (O)) (n)) \to \forall x347 : nat. (((eq) (nat)) (n)) (((times) (x347)) (n)) := \lambda m : nat. \lambda n : nat. \lambda eqn0 : (((eq) (nat)) (O)) (n). \lambda x347 : nat. ((((((rewrite_l) (nat)) (O)) (\lambda Joker_ : nat. (((eq) (nat)) (n)) (((times) (x347)) (Joker_)))) (((((((rewrite_l) (nat)) (O)) (\lambda Joker_ : nat. (((eq) (nat)) (Joker_)) (((times) (x347)) (O)))) ((times_n_O) (x347))) (n)) (eqn0))) (n)) (eqn0).
definition eq_minus_gcd : \forall m : nat. \forall n : nat. ((Ex) (nat)) (\lambda a : nat. ((Ex) (nat)) (\lambda b : nat. ((Or) ((((eq) (nat)) (((minus) (((times) (a)) (n))) (((times) (b)) (m)))) (((gcd) (n)) (m)))) ((((eq) (nat)) (((minus) (((times) (b)) (m))) (((times) (a)) (n)))) (((gcd) (n)) (m))))) := \lambda m : nat. \lambda n : nat. ((((((match_Or_prop) (((lt) (O)) (n))) ((((eq) (nat)) (O)) (n))) (((Ex) (nat)) (\lambda a : nat. ((Ex) (nat)) (\lambda b : nat. ((Or) ((((eq) (nat)) (((minus) (((times) (a)) (n))) (((times) (b)) (m)))) (((gcd) (n)) (m)))) ((((eq) (nat)) (((minus) (((times) (b)) (m))) (((times) (a)) (n)))) (((gcd) (n)) (m))))))) (\lambda posn : ((lt) (O)) (n). ((((((match_Or_prop) (((lt) (O)) (m))) ((((eq) (nat)) (O)) (m))) (((Ex) (nat)) (\lambda a : nat. ((Ex) (nat)) (\lambda b : nat. ((Or) ((((eq) (nat)) (((minus) (((times) (a)) (n))) (((times) (b)) (m)))) (((gcd) (n)) (m)))) ((((eq) (nat)) (((minus) (((times) (b)) (m))) (((times) (a)) (n)))) (((gcd) (n)) (m))))))) (\lambda posm : ((lt) (O)) (m). (((((leb_elim) (n)) (m)) (\lambda Joker_ : bool. ((Ex) (nat)) (\lambda a : nat. ((Ex) (nat)) (\lambda b : nat. ((Or) ((((eq) (nat)) (((minus) (((times) (a)) (n))) (((times) (b)) (m)))) (((((match_bool_type) (nat)) ((((gcd_aux) (n)) (m)) (n))) ((((gcd_aux) (m)) (n)) (m))) (Joker_)))) ((((eq) (nat)) (((minus) (((times) (b)) (m))) (((times) (a)) (n)))) (((((match_bool_type) (nat)) ((((gcd_aux) (n)) (m)) (n))) ((((gcd_aux) (m)) (n)) (m))) (Joker_))))))) ((((((sym_eq_match_bool_type_true) (nat)) ((((gcd_aux) (n)) (m)) (n))) ((((gcd_aux) (m)) (n)) (m))) (\lambda y : nat. (((le) (n)) (m)) \to ((Ex) (nat)) (\lambda a : nat. ((Ex) (nat)) (\lambda b : nat. ((Or) ((((eq) (nat)) (((minus) (((times) (a)) (n))) (((times) (b)) (m)))) (((((match_bool_type) (nat)) ((((gcd_aux) (n)) (m)) (n))) ((((gcd_aux) (m)) (n)) (m))) (true)))) ((((eq) (nat)) (((minus) (((times) (b)) (m))) (((times) (a)) (n)))) (y)))))) ((((((sym_eq_match_bool_type_true) (nat)) ((((gcd_aux) (n)) (m)) (n))) ((((gcd_aux) (m)) (n)) (m))) (\lambda y : nat. (((le) (n)) (m)) \to ((Ex) (nat)) (\lambda a : nat. ((Ex) (nat)) (\lambda b : nat. ((Or) ((((eq) (nat)) (((minus) (((times) (a)) (n))) (((times) (b)) (m)))) (y))) ((((eq) (nat)) (((minus) (((times) (b)) (m))) (((times) (a)) (n)))) ((((gcd_aux) (n)) (m)) (n))))))) (\lambda lenm : ((le) (n)) (m). ((((((eq_minus_gcd_aux) (n)) (m)) (n)) (posn)) (lenm)) ((le_n) (n)))))) ((((((sym_eq_match_bool_type_false) (nat)) ((((gcd_aux) (n)) (m)) (n))) ((((gcd_aux) (m)) (n)) (m))) (\lambda y : nat. ((Not) (((le) (n)) (m))) \to ((Ex) (nat)) (\lambda a : nat. ((Ex) (nat)) (\lambda b : nat. ((Or) ((((eq) (nat)) (((minus) (((times) (a)) (n))) (((times) (b)) (m)))) (((((match_bool_type) (nat)) ((((gcd_aux) (n)) (m)) (n))) ((((gcd_aux) (m)) (n)) (m))) (false)))) ((((eq) (nat)) (((minus) (((times) (b)) (m))) (((times) (a)) (n)))) (y)))))) ((((((sym_eq_match_bool_type_false) (nat)) ((((gcd_aux) (n)) (m)) (n))) ((((gcd_aux) (m)) (n)) (m))) (\lambda y : nat. ((Not) (((le) (n)) (m))) \to ((Ex) (nat)) (\lambda a : nat. ((Ex) (nat)) (\lambda b : nat. ((Or) ((((eq) (nat)) (((minus) (((times) (a)) (n))) (((times) (b)) (m)))) (y))) ((((eq) (nat)) (((minus) (((times) (b)) (m))) (((times) (a)) (n)))) ((((gcd_aux) (m)) (n)) (m))))))) (\lambda nlenm : (Not) (((le) (n)) (m)). (((((match_ex_prop) (nat)) (\lambda a : nat. ((Ex) (nat)) (\lambda b : nat. ((Or) ((((eq) (nat)) (((minus) (((times) (a)) (m))) (((times) (b)) (n)))) ((((gcd_aux) (m)) (n)) (m)))) ((((eq) (nat)) (((minus) (((times) (b)) (n))) (((times) (a)) (m)))) ((((gcd_aux) (m)) (n)) (m)))))) (((Ex) (nat)) (\lambda a : nat. ((Ex) (nat)) (\lambda b : nat. ((Or) ((((eq) (nat)) (((minus) (((times) (a)) (n))) (((times) (b)) (m)))) ((((gcd_aux) (m)) (n)) (m)))) ((((eq) (nat)) (((minus) (((times) (b)) (m))) (((times) (a)) (n)))) ((((gcd_aux) (m)) (n)) (m))))))) (\lambda a : nat. \lambda Jokerclearme : ((Ex) (nat)) (\lambda b : nat. ((Or) ((((eq) (nat)) (((minus) (((times) (a)) (m))) (((times) (b)) (n)))) ((((gcd_aux) (m)) (n)) (m)))) ((((eq) (nat)) (((minus) (((times) (b)) (n))) (((times) (a)) (m)))) ((((gcd_aux) (m)) (n)) (m)))). (((((match_ex_prop) (nat)) (\lambda b : nat. ((Or) ((((eq) (nat)) (((minus) (((times) (a)) (m))) (((times) (b)) (n)))) ((((gcd_aux) (m)) (n)) (m)))) ((((eq) (nat)) (((minus) (((times) (b)) (n))) (((times) (a)) (m)))) ((((gcd_aux) (m)) (n)) (m))))) (((Ex) (nat)) (\lambda a0 : nat. ((Ex) (nat)) (\lambda b : nat. ((Or) ((((eq) (nat)) (((minus) (((times) (a0)) (n))) (((times) (b)) (m)))) ((((gcd_aux) (m)) (n)) (m)))) ((((eq) (nat)) (((minus) (((times) (b)) (m))) (((times) (a0)) (n)))) ((((gcd_aux) (m)) (n)) (m))))))) (\lambda b : nat. \lambda Jokerclearme0 : ((Or) ((((eq) (nat)) (((minus) (((times) (a)) (m))) (((times) (b)) (n)))) ((((gcd_aux) (m)) (n)) (m)))) ((((eq) (nat)) (((minus) (((times) (b)) (n))) (((times) (a)) (m)))) ((((gcd_aux) (m)) (n)) (m))). ((((((match_Or_prop) ((((eq) (nat)) (((minus) (((times) (a)) (m))) (((times) (b)) (n)))) ((((gcd_aux) (m)) (n)) (m)))) ((((eq) (nat)) (((minus) (((times) (b)) (n))) (((times) (a)) (m)))) ((((gcd_aux) (m)) (n)) (m)))) (((Ex) (nat)) (\lambda a0 : nat. ((Ex) (nat)) (\lambda b0 : nat. ((Or) ((((eq) (nat)) (((minus) (((times) (a0)) (n))) (((times) (b0)) (m)))) ((((gcd_aux) (m)) (n)) (m)))) ((((eq) (nat)) (((minus) (((times) (b0)) (m))) (((times) (a0)) (n)))) ((((gcd_aux) (m)) (n)) (m))))))) (\lambda H : (((eq) (nat)) (((minus) (((times) (a)) (m))) (((times) (b)) (n)))) ((((gcd_aux) (m)) (n)) (m)). \lambda z : Prop. \lambda f : \forall x : nat. (((Ex) (nat)) (\lambda b0 : nat. ((Or) ((((eq) (nat)) (((minus) (((times) (x)) (n))) (((times) (b0)) (m)))) ((((gcd_aux) (m)) (n)) (m)))) ((((eq) (nat)) (((minus) (((times) (b0)) (m))) (((times) (x)) (n)))) ((((gcd_aux) (m)) (n)) (m))))) \to z. ((f) (b)) (\lambda z0 : Prop. \lambda f2 : \forall x : nat. (((Or) ((((eq) (nat)) (((minus) (((times) (b)) (n))) (((times) (x)) (m)))) ((((gcd_aux) (m)) (n)) (m)))) ((((eq) (nat)) (((minus) (((times) (x)) (m))) (((times) (b)) (n)))) ((((gcd_aux) (m)) (n)) (m)))) \to z0. ((f2) (a)) (\lambda z1 : Prop. \lambda l : ((((eq) (nat)) (((minus) (((times) (b)) (n))) (((times) (a)) (m)))) ((((gcd_aux) (m)) (n)) (m))) \to z1. \lambda r : ((((eq) (nat)) (((minus) (((times) (a)) (m))) (((times) (b)) (n)))) ((((gcd_aux) (m)) (n)) (m))) \to z1. (r) (((((((rewrite_r) (nat)) (((times) (m)) (a))) (\lambda Joker_ : nat. (((eq) (nat)) (((minus) (Joker_)) (((times) (b)) (n)))) ((((gcd_aux) (m)) (n)) (m)))) (((((((rewrite_r) (nat)) (((times) (n)) (b))) (\lambda Joker_ : nat. (((eq) (nat)) (((minus) (((times) (m)) (a))) (Joker_))) ((((gcd_aux) (m)) (n)) (m)))) (((((((rewrite_r) (nat)) ((((gcd_aux) (m)) (n)) (m))) (\lambda Joker_ : nat. (((eq) (nat)) (Joker_)) ((((gcd_aux) (m)) (n)) (m)))) (((refl) (nat)) ((((gcd_aux) (m)) (n)) (m)))) (((minus) (((times) (m)) (a))) (((times) (n)) (b)))) (((((((rewrite_l) (nat)) (((times) (b)) (n))) (\lambda Joker_ : nat. (((eq) (nat)) (((minus) (((times) (m)) (a))) (Joker_))) ((((gcd_aux) (m)) (n)) (m)))) (((((((rewrite_l) (nat)) (((times) (a)) (m))) (\lambda Joker_ : nat. (((eq) (nat)) (((minus) (Joker_)) (((times) (b)) (n)))) ((((gcd_aux) (m)) (n)) (m)))) (H)) (((times) (m)) (a))) (((commutative_times) (a)) (m)))) (((times) (n)) (b))) (((commutative_times) (b)) (n))))) (((times) (b)) (n))) (((commutative_times) (b)) (n)))) (((times) (a)) (m))) (((commutative_times) (a)) (m))))))) (\lambda H : (((eq) (nat)) (((minus) (((times) (b)) (n))) (((times) (a)) (m)))) ((((gcd_aux) (m)) (n)) (m)). \lambda z : Prop. \lambda f : \forall y : nat. (((Ex) (nat)) (\lambda b0 : nat. ((Or) ((((eq) (nat)) (((minus) (((times) (y)) (n))) (((times) (b0)) (m)))) ((((gcd_aux) (m)) (n)) (m)))) ((((eq) (nat)) (((minus) (((times) (b0)) (m))) (((times) (y)) (n)))) ((((gcd_aux) (m)) (n)) (m))))) \to z. ((f) (b)) (\lambda z0 : Prop. \lambda f2 : \forall x : nat. (((Or) ((((eq) (nat)) (((minus) (((times) (b)) (n))) (((times) (x)) (m)))) ((((gcd_aux) (m)) (n)) (m)))) ((((eq) (nat)) (((minus) (((times) (x)) (m))) (((times) (b)) (n)))) ((((gcd_aux) (m)) (n)) (m)))) \to z0. ((f2) (a)) (\lambda z1 : Prop. \lambda l : ((((eq) (nat)) (((minus) (((times) (b)) (n))) (((times) (a)) (m)))) ((((gcd_aux) (m)) (n)) (m))) \to z1. \lambda r : ((((eq) (nat)) (((minus) (((times) (a)) (m))) (((times) (b)) (n)))) ((((gcd_aux) (m)) (n)) (m))) \to z1. (l) (((((((rewrite_r) (nat)) (((times) (n)) (b))) (\lambda Joker_ : nat. (((eq) (nat)) (((minus) (Joker_)) (((times) (a)) (m)))) ((((gcd_aux) (m)) (n)) (m)))) (((((((rewrite_r) (nat)) (((times) (m)) (a))) (\lambda Joker_ : nat. (((eq) (nat)) (((minus) (((times) (n)) (b))) (Joker_))) ((((gcd_aux) (m)) (n)) (m)))) (((((((rewrite_r) (nat)) ((((gcd_aux) (m)) (n)) (m))) (\lambda Joker_ : nat. (((eq) (nat)) (Joker_)) ((((gcd_aux) (m)) (n)) (m)))) (((refl) (nat)) ((((gcd_aux) (m)) (n)) (m)))) (((minus) (((times) (n)) (b))) (((times) (m)) (a)))) (((((((rewrite_l) (nat)) (((times) (a)) (m))) (\lambda Joker_ : nat. (((eq) (nat)) (((minus) (((times) (n)) (b))) (Joker_))) ((((gcd_aux) (m)) (n)) (m)))) (((((((rewrite_l) (nat)) (((times) (b)) (n))) (\lambda Joker_ : nat. (((eq) (nat)) (((minus) (Joker_)) (((times) (a)) (m)))) ((((gcd_aux) (m)) (n)) (m)))) (H)) (((times) (n)) (b))) (((commutative_times) (b)) (n)))) (((times) (m)) (a))) (((commutative_times) (a)) (m))))) (((times) (a)) (m))) (((commutative_times) (a)) (m)))) (((times) (b)) (n))) (((commutative_times) (b)) (n))))))) (Jokerclearme0))) (Jokerclearme))) (((((((eq_minus_gcd_aux) (m)) (n)) (m)) (posm)) ((((((transitive_le) (m)) ((S) (m))) (n)) ((le_n_Sn) (m))) ((((not_le_to_lt) (n)) (m)) (nlenm)))) ((le_n) (m)))))))) (\lambda eqm0 : (((eq) (nat)) (O)) (m). ((((((eq_ind_r) (nat)) (m)) (\lambda x : nat. ((Ex) (nat)) (\lambda a : nat. ((Ex) (nat)) (\lambda b : nat. ((Or) ((((eq) (nat)) (((minus) (((times) (a)) (n))) (((times) (b)) (m)))) (((gcd) (n)) (m)))) ((((eq) (nat)) (((minus) (((times) (b)) (m))) (((times) (a)) (n)))) (((gcd) (n)) (m))))))) (\lambda z : Prop. \lambda f : \forall x : nat. (((Ex) (nat)) (\lambda b : nat. ((Or) ((((eq) (nat)) (((minus) (((times) (x)) (n))) (((times) (b)) (m)))) (((gcd) (n)) (m)))) ((((eq) (nat)) (((minus) (((times) (b)) (m))) (((times) (x)) (n)))) (((gcd) (n)) (m))))) \to z. ((f) ((S) (O))) (\lambda z0 : Prop. \lambda f2 : \forall y : nat. (((Or) ((((eq) (nat)) (((minus) (((times) ((S) (O))) (n))) (((times) (y)) (m)))) (((gcd) (n)) (m)))) ((((eq) (nat)) (((minus) (((times) (y)) (m))) (((times) ((S) (O))) (n)))) (((gcd) (n)) (m)))) \to z0. ((f2) (O)) (\lambda z1 : Prop. \lambda l : ((((eq) (nat)) (((minus) (((times) ((S) (O))) (n))) (((times) (O)) (m)))) (((gcd) (n)) (m))) \to z1. \lambda r : ((((eq) (nat)) (((minus) (((times) (O)) (m))) (((times) ((S) (O))) (n)))) (((gcd) (n)) (m))) \to z1. (l) (((((eq_coerc) ((((eq) (nat)) (n)) (((minus) (n)) (O)))) ((((eq) (nat)) (((minus) (((times) ((S) (O))) (n))) (((times) (O)) (m)))) (((gcd) (n)) (m)))) ((minus_n_O) (n))) (((((((rewrite_r) (nat)) (m)) (\lambda Joker_ : nat. (((eq) Prop) ((((eq) (nat)) (n)) (((minus) (n)) (Joker_)))) ((((eq) (nat)) (((minus) (((times) ((S) (O))) (n))) (((times) (O)) (m)))) (((gcd) (n)) (m))))) (((((((rewrite_l) (nat)) (n)) (\lambda Joker_ : nat. (((eq) Prop) ((((eq) (nat)) (n)) (Joker_))) ((((eq) (nat)) (((minus) (((times) ((S) (O))) (n))) (((times) (O)) (m)))) (((gcd) (n)) (m))))) (((((((rewrite_r) (nat)) (m)) (\lambda Joker_ : nat. (((eq) Prop) ((((eq) (nat)) (n)) (n))) ((((eq) (nat)) (((minus) (((times) ((S) (Joker_))) (n))) (((times) (O)) (m)))) (((gcd) (n)) (m))))) (((((((rewrite_r) (nat)) (((times) (n)) ((S) (m)))) (\lambda Joker_ : nat. (((eq) Prop) ((((eq) (nat)) (n)) (n))) ((((eq) (nat)) (((minus) (Joker_)) (((times) (O)) (m)))) (((gcd) (n)) (m))))) (((((((rewrite_l) (nat)) (((plus) (n)) (((times) (n)) (m)))) (\lambda Joker_ : nat. (((eq) Prop) ((((eq) (nat)) (n)) (n))) ((((eq) (nat)) (((minus) (Joker_)) (((times) (O)) (m)))) (((gcd) (n)) (m))))) (((((((rewrite_r) (nat)) (((times) (m)) (n))) (\lambda Joker_ : nat. (((eq) Prop) ((((eq) (nat)) (n)) (n))) ((((eq) (nat)) (((minus) (((plus) (n)) (Joker_))) (((times) (O)) (m)))) (((gcd) (n)) (m))))) (((((((rewrite_l) (nat)) (m)) (\lambda Joker_ : nat. (((eq) Prop) ((((eq) (nat)) (n)) (n))) ((((eq) (nat)) (((minus) (((plus) (n)) (Joker_))) (((times) (O)) (m)))) (((gcd) (n)) (m))))) (((((((rewrite_r) (nat)) (((plus) (m)) (n))) (\lambda Joker_ : nat. (((eq) Prop) ((((eq) (nat)) (n)) (n))) ((((eq) (nat)) (((minus) (Joker_)) (((times) (O)) (m)))) (((gcd) (n)) (m))))) (((((((rewrite_l) (nat)) (n)) (\lambda Joker_ : nat. (((eq) Prop) ((((eq) (nat)) (n)) (n))) ((((eq) (nat)) (((minus) (Joker_)) (((times) (O)) (m)))) (((gcd) (n)) (m))))) (((((((rewrite_r) (nat)) (m)) (\lambda Joker_ : nat. (((eq) Prop) ((((eq) (nat)) (n)) (n))) ((((eq) (nat)) (((minus) (n)) (((times) (Joker_)) (m)))) (((gcd) (n)) (m))))) (((((((rewrite_l) (nat)) (m)) (\lambda Joker_ : nat. (((eq) Prop) ((((eq) (nat)) (n)) (n))) ((((eq) (nat)) (((minus) (n)) (Joker_))) (((gcd) (n)) (m))))) (((((((rewrite_l) (nat)) (n)) (\lambda Joker_ : nat. (((eq) Prop) ((((eq) (nat)) (n)) (n))) ((((eq) (nat)) (Joker_)) (((gcd) (n)) (m))))) (((((((rewrite_r) (nat)) (((gcd) (m)) (n))) (\lambda Joker_ : nat. (((eq) Prop) ((((eq) (nat)) (n)) (n))) ((((eq) (nat)) (n)) (Joker_)))) (((((((rewrite_r) (nat)) (n)) (\lambda Joker_ : nat. (((eq) Prop) ((((eq) (nat)) (n)) (n))) ((((eq) (nat)) (n)) (Joker_)))) (((refl) Prop) ((((eq) (nat)) (n)) (n)))) (((gcd) (m)) (n))) (((((((rewrite_l) (nat)) (O)) (\lambda Joker_ : nat. (((eq) (nat)) (((gcd) (Joker_)) (n))) (n))) ((gcd_O_l) (n))) (m)) (eqm0)))) (((gcd) (n)) (m))) (((commutative_gcd) (n)) (m)))) (((minus) (n)) (m))) ((((((let_clause_1549) (m)) (n)) (posn)) (eqm0)) (n)))) (((times) (m)) (m))) (((((((rewrite_l) (nat)) (O)) (\lambda Joker_ : nat. (((eq) (nat)) (m)) (((times) (m)) (Joker_)))) (((((((rewrite_l) (nat)) (O)) (\lambda Joker_ : nat. (((eq) (nat)) (Joker_)) (((times) (m)) (O)))) ((times_n_O) (m))) (m)) (eqm0))) (m)) (eqm0)))) (O)) (eqm0))) (((plus) (m)) (n))) (((((((rewrite_l) (nat)) (O)) (\lambda Joker_ : nat. (((eq) (nat)) (n)) (((plus) (Joker_)) (n)))) ((plus_O_n) (n))) (m)) (eqm0)))) (((plus) (n)) (m))) (((commutative_plus) (n)) (m)))) (((times) (m)) (n))) (((((((rewrite_l) (nat)) (O)) (\lambda Joker_ : nat. (((eq) (nat)) (m)) (((times) (Joker_)) (n)))) (((((((rewrite_l) (nat)) (O)) (\lambda Joker_ : nat. (((eq) (nat)) (Joker_)) (((times) (O)) (n)))) ((times_O_n) (n))) (m)) (eqm0))) (m)) (eqm0)))) (((times) (n)) (m))) (((commutative_times) (n)) (m)))) (((times) (n)) ((S) (m)))) (((times_n_Sm) (n)) (m)))) (((times) ((S) (m))) (n))) (((commutative_times) ((S) (m))) (n)))) (O)) (eqm0))) (((minus) (n)) (m))) ((((((let_clause_1549) (m)) (n)) (posn)) (eqm0)) (n)))) (O)) (eqm0))))))) (O)) (eqm0))) ((((le_to_or_lt_eq) (O)) (m)) ((le_O_n) (m))))) (\lambda eqn0 : (((eq) (nat)) (O)) (n). ((((((eq_ind_r) (nat)) (n)) (\lambda x : nat. ((Ex) (nat)) (\lambda a : nat. ((Ex) (nat)) (\lambda b : nat. ((Or) ((((eq) (nat)) (((minus) (((times) (a)) (n))) (((times) (b)) (m)))) (((gcd) (n)) (m)))) ((((eq) (nat)) (((minus) (((times) (b)) (m))) (((times) (a)) (n)))) (((gcd) (n)) (m))))))) (\lambda z : Prop. \lambda f : \forall x : nat. (((Ex) (nat)) (\lambda b : nat. ((Or) ((((eq) (nat)) (((minus) (((times) (x)) (n))) (((times) (b)) (m)))) (((gcd) (n)) (m)))) ((((eq) (nat)) (((minus) (((times) (b)) (m))) (((times) (x)) (n)))) (((gcd) (n)) (m))))) \to z. ((f) (O)) (\lambda z0 : Prop. \lambda f0 : \forall x : nat. (((Or) ((((eq) (nat)) (((minus) (((times) (O)) (n))) (((times) (x)) (m)))) (((gcd) (n)) (m)))) ((((eq) (nat)) (((minus) (((times) (x)) (m))) (((times) (O)) (n)))) (((gcd) (n)) (m)))) \to z0. ((f0) ((S) (O))) (\lambda z1 : Prop. \lambda l : ((((eq) (nat)) (((minus) (((times) (O)) (n))) (((times) ((S) (O))) (m)))) (((gcd) (n)) (m))) \to z1. \lambda r : ((((eq) (nat)) (((minus) (((times) ((S) (O))) (m))) (((times) (O)) (n)))) (((gcd) (n)) (m))) \to z1. (r) (((((eq_coerc) ((((eq) (nat)) (m)) (((minus) (m)) (O)))) ((((eq) (nat)) (((minus) (((times) ((S) (O))) (m))) (((times) (O)) (n)))) (((gcd) (n)) (m)))) ((minus_n_O) (m))) (((((((rewrite_r) (nat)) (m)) (\lambda Joker_ : nat. (((eq) Prop) ((((eq) (nat)) (m)) (((minus) (m)) (O)))) ((((eq) (nat)) (((minus) (((times) ((S) (O))) (m))) (((times) (O)) (n)))) (Joker_)))) (((((((rewrite_r) (nat)) (n)) (\lambda Joker_ : nat. (((eq) Prop) ((((eq) (nat)) (m)) (((minus) (m)) (Joker_)))) ((((eq) (nat)) (((minus) (((times) ((S) (O))) (m))) (((times) (O)) (n)))) (m)))) (((((((rewrite_l) (nat)) (m)) (\lambda Joker_ : nat. (((eq) Prop) ((((eq) (nat)) (m)) (Joker_))) ((((eq) (nat)) (((minus) (((times) ((S) (O))) (m))) (((times) (O)) (n)))) (m)))) (((((((rewrite_r) (nat)) (n)) (\lambda Joker_ : nat. (((eq) Prop) ((((eq) (nat)) (m)) (m))) ((((eq) (nat)) (((minus) (((times) ((S) (Joker_))) (m))) (((times) (O)) (n)))) (m)))) (((((((rewrite_r) (nat)) (((times) (m)) ((S) (n)))) (\lambda Joker_ : nat. (((eq) Prop) ((((eq) (nat)) (m)) (m))) ((((eq) (nat)) (((minus) (Joker_)) (((times) (O)) (n)))) (m)))) (((((((rewrite_l) (nat)) (((plus) (m)) (((times) (m)) (n)))) (\lambda Joker_ : nat. (((eq) Prop) ((((eq) (nat)) (m)) (m))) ((((eq) (nat)) (((minus) (Joker_)) (((times) (O)) (n)))) (m)))) (((((((rewrite_l) (nat)) (n)) (\lambda Joker_ : nat. (((eq) Prop) ((((eq) (nat)) (m)) (m))) ((((eq) (nat)) (((minus) (((plus) (m)) (Joker_))) (((times) (O)) (n)))) (m)))) (((((((rewrite_l) (nat)) (m)) (\lambda Joker_ : nat. (((eq) Prop) ((((eq) (nat)) (m)) (m))) ((((eq) (nat)) (((minus) (Joker_)) (((times) (O)) (n)))) (m)))) (((((((rewrite_r) (nat)) (n)) (\lambda Joker_ : nat. (((eq) Prop) ((((eq) (nat)) (m)) (m))) ((((eq) (nat)) (((minus) (m)) (((times) (Joker_)) (n)))) (m)))) (((((((rewrite_l) (nat)) (n)) (\lambda Joker_ : nat. (((eq) Prop) ((((eq) (nat)) (m)) (m))) ((((eq) (nat)) (((minus) (m)) (Joker_))) (m)))) (((((((rewrite_l) (nat)) (m)) (\lambda Joker_ : nat. (((eq) Prop) ((((eq) (nat)) (m)) (m))) ((((eq) (nat)) (Joker_)) (m)))) (((refl) Prop) ((((eq) (nat)) (m)) (m)))) (((minus) (m)) (n))) (((((let_clause_15491) (m)) (n)) (eqn0)) (m)))) (((times) (n)) (n))) (((((let_clause_1551) (m)) (n)) (eqn0)) (n)))) (O)) (eqn0))) (((plus) (m)) (n))) (((((((rewrite_l) (nat)) (O)) (\lambda Joker_ : nat. (((eq) (nat)) (m)) (((plus) (m)) (Joker_)))) ((plus_n_O) (m))) (n)) (eqn0)))) (((times) (m)) (n))) (((((let_clause_1551) (m)) (n)) (eqn0)) (m)))) (((times) (m)) ((S) (n)))) (((times_n_Sm) (m)) (n)))) (((times) ((S) (n))) (m))) (((commutative_times) ((S) (n))) (m)))) (O)) (eqn0))) (((minus) (m)) (n))) (((((let_clause_15491) (m)) (n)) (eqn0)) (m)))) (O)) (eqn0))) (((gcd) (n)) (m))) (((((((rewrite_l) (nat)) (O)) (\lambda Joker_ : nat. (((eq) (nat)) (((gcd) (Joker_)) (m))) (m))) ((gcd_O_l) (m))) (n)) (eqn0)))))))) (O)) (eqn0))) ((((le_to_or_lt_eq) (O)) (n)) ((le_O_n) (n))).
definition let_clause_1545 : \forall m : nat. \forall n : nat. ((((eq) (nat)) (((gcd) (m)) (n))) (O)) \to (((divides) (O)) (n)) \to \forall q1 : nat. ((((eq) (nat)) (n)) (((times) (O)) (q1))) \to (((divides) (O)) (m)) \to \forall q2 : nat. ((((eq) (nat)) (m)) (((times) (O)) (q2))) \to (((eq) (nat)) (m)) (O) := \lambda m : nat. \lambda n : nat. \lambda H : (((eq) (nat)) (((gcd) (m)) (n))) (O). \lambda Jokerclearme : ((divides) (O)) (n). \lambda q1 : nat. \lambda H1 : (((eq) (nat)) (n)) (((times) (O)) (q1)). \lambda Jokerclearme0 : ((divides) (O)) (m). \lambda q2 : nat. \lambda H2 : (((eq) (nat)) (m)) (((times) (O)) (q2)). ((((((rewrite_r) (nat)) (((times) (q2)) (O))) (\lambda Joker_ : nat. (((eq) (nat)) (m)) (Joker_))) (((((((rewrite_l) (nat)) (((times) (O)) (q2))) (\lambda Joker_ : nat. (((eq) (nat)) (m)) (Joker_))) (H2)) (((times) (q2)) (O))) (((commutative_times) (O)) (q2)))) (O)) ((times_n_O) (q2)).
definition gcd_O_to_eq_O : \forall m : nat. \forall n : nat. ((((eq) (nat)) (((gcd) (m)) (n))) (O)) \to ((And) ((((eq) (nat)) (m)) (O))) ((((eq) (nat)) (n)) (O)) := \lambda m : nat. \lambda n : nat. \lambda H : (((eq) (nat)) (((gcd) (m)) (n))) (O). (((((match_And_prop) (((divides) (O)) (n))) (((divides) (O)) (m))) (((And) ((((eq) (nat)) (m)) (O))) ((((eq) (nat)) (n)) (O)))) (\lambda Jokerclearme : ((divides) (O)) (n). (((((match_divides_prop) (O)) (n)) ((((divides) (O)) (m)) \to ((And) ((((eq) (nat)) (m)) (O))) ((((eq) (nat)) (n)) (O)))) (\lambda q1 : nat. \lambda H1 : (((eq) (nat)) (n)) (((times) (O)) (q1)). \lambda Jokerclearme0 : ((divides) (O)) (m). (((((match_divides_prop) (O)) (m)) (((And) ((((eq) (nat)) (m)) (O))) ((((eq) (nat)) (n)) (O)))) (\lambda q2 : nat. \lambda H2 : (((eq) (nat)) (m)) (((times) (O)) (q2)). \lambda z : Prop. \lambda f : ((((eq) (nat)) (m)) (O)) \to ((((eq) (nat)) (n)) (O)) \to z. ((f) (((((((rewrite_l) (nat)) (m)) (\lambda Joker_ : nat. (((eq) (nat)) (m)) (Joker_))) (((refl) (nat)) (m))) (O)) (((((((rewrite_r) (nat)) (((times) (q2)) (O))) (\lambda Joker_ : nat. (((eq) (nat)) (m)) (Joker_))) (((((((rewrite_l) (nat)) (((times) (O)) (q2))) (\lambda Joker_ : nat. (((eq) (nat)) (m)) (Joker_))) (H2)) (((times) (q2)) (O))) (((commutative_times) (O)) (q2)))) (O)) ((times_n_O) (q2))))) (((((((rewrite_r) (nat)) (m)) (\lambda Joker_ : nat. (((eq) (nat)) (Joker_)) (O))) (((((((rewrite_l) (nat)) (m)) (\lambda Joker_ : nat. (((eq) (nat)) (m)) (Joker_))) (((refl) (nat)) (m))) (O)) ((((((((((let_clause_1545) (m)) (n)) (H)) (Jokerclearme)) (q1)) (H1)) (Jokerclearme0)) (q2)) (H2)))) (n)) (((((((rewrite_r) (nat)) (((times) (m)) (q1))) (\lambda Joker_ : nat. (((eq) (nat)) (n)) (Joker_))) (((((((rewrite_r) (nat)) (O)) (\lambda Joker_ : nat. (((eq) (nat)) (n)) (((times) (Joker_)) (q1)))) (H1)) (m)) ((((((((((let_clause_1545) (m)) (n)) (H)) (Jokerclearme)) (q1)) (H1)) (Jokerclearme0)) (q2)) (H2)))) (m)) (((((((rewrite_r) (nat)) (O)) (\lambda Joker_ : nat. (((eq) (nat)) (m)) (((times) (Joker_)) (q1)))) (((((((rewrite_r) (nat)) (O)) (\lambda Joker_ : nat. (((eq) (nat)) (Joker_)) (((times) (O)) (q1)))) ((times_O_n) (q1))) (m)) ((((((((((let_clause_1545) (m)) (n)) (H)) (Jokerclearme)) (q1)) (H1)) (Jokerclearme0)) (q2)) (H2)))) (m)) ((((((((((let_clause_1545) (m)) (n)) (H)) (Jokerclearme)) (q1)) (H1)) (Jokerclearme0)) (q2)) (H2))))))) (Jokerclearme0))) (Jokerclearme))) (((((((eq_ind) (nat)) (((gcd) (m)) (n))) (\lambda x_1 : nat. ((And) (((divides) (x_1)) (n))) (((divides) (x_1)) (m)))) (((divides_gcd_nm) (m)) (n))) (O)) (H)).
definition let_clause_1571 : \forall m : nat. \forall n : nat. (((lt) (O)) (n)) \to ((((eq) (nat)) (((gcd) (m)) (n))) (O)) \to ((((eq) (nat)) (m)) (O)) \to ((((eq) (nat)) (n)) (O)) \to (((eq) (nat)) (m)) (n) := \lambda m : nat. \lambda n : nat. \lambda posn : ((lt) (O)) (n). \lambda H : (((eq) (nat)) (((gcd) (m)) (n))) (O). \lambda auto : (((eq) (nat)) (m)) (O). \lambda auto' : (((eq) (nat)) (n)) (O). ((((((rewrite_r) (nat)) (O)) (\lambda Joker_ : nat. (((eq) (nat)) (m)) (Joker_))) (auto)) (n)) (auto').
definition let_clause_1572 : \forall m : nat. \forall n : nat. (((lt) (O)) (n)) \to ((((eq) (nat)) (((gcd) (m)) (n))) (O)) \to ((((eq) (nat)) (m)) (O)) \to ((((eq) (nat)) (n)) (O)) \to (((eq) (nat)) (m)) (O) := \lambda m : nat. \lambda n : nat. \lambda posn : ((lt) (O)) (n). \lambda H : (((eq) (nat)) (((gcd) (m)) (n))) (O). \lambda auto : (((eq) (nat)) (m)) (O). \lambda auto' : (((eq) (nat)) (n)) (O). ((((((rewrite_r) (nat)) (n)) (\lambda Joker_ : nat. (((eq) (nat)) (Joker_)) (O))) (auto')) (m)) (((((((let_clause_1571) (m)) (n)) (posn)) (H)) (auto)) (auto')).
definition lt_O_gcd : \forall m : nat. \forall n : nat. (((lt) (O)) (n)) \to ((lt) (O)) (((gcd) (m)) (n)) := \lambda m : nat. \lambda n : nat. \lambda posn : ((lt) (O)) (n). ((((nat_case) (((gcd) (m)) (n))) ((lt) (O))) (\lambda H : (((eq) (nat)) (((gcd) (m)) (n))) (O). (((((match_And_prop) ((((eq) (nat)) (m)) (O))) ((((eq) (nat)) (n)) (O))) (((lt) (O)) (O))) (\lambda auto : (((eq) (nat)) (m)) (O). \lambda auto' : (((eq) (nat)) (n)) (O). ((((eq_coerc) (((lt) (O)) (n))) (((lt) (O)) (O))) (posn)) (((((((rewrite_l) (nat)) (m)) (\lambda Joker_ : nat. (((eq) Prop) (((lt) (Joker_)) (n))) (((lt) (O)) (O)))) (((((((rewrite_l) (nat)) (m)) (\lambda Joker_ : nat. (((eq) Prop) (((lt) (m)) (Joker_))) (((lt) (O)) (O)))) (((((((rewrite_l) (nat)) (m)) (\lambda Joker_ : nat. (((eq) Prop) (((lt) (m)) (m))) (((lt) (Joker_)) (O)))) (((((((rewrite_l) (nat)) (m)) (\lambda Joker_ : nat. (((eq) Prop) (((lt) (m)) (m))) (((lt) (m)) (Joker_)))) (((refl) Prop) (((lt) (m)) (m)))) (O)) (((((((let_clause_1572) (m)) (n)) (posn)) (H)) (auto)) (auto')))) (O)) (((((((let_clause_1572) (m)) (n)) (posn)) (H)) (auto)) (auto')))) (n)) (((((((let_clause_1571) (m)) (n)) (posn)) (H)) (auto)) (auto')))) (O)) (((((((let_clause_1572) (m)) (n)) (posn)) (H)) (auto)) (auto'))))) ((((gcd_O_to_eq_O) (m)) (n)) (H)))) (\lambda m0 : nat. \lambda auto : (((eq) (nat)) (((gcd) (m)) (n))) ((S) (m0)). (lt_O_S) (m0)).
definition prime_to_gcd_1 : \forall n : nat. \forall m : nat. ((prime) (n)) \to ((Not) (((divides) (n)) (m))) \to (((eq) (nat)) (((gcd) (n)) (m))) ((S) (O)) := \lambda n : nat. \lambda m : nat. \lambda Jokerclearme : (prime) (n). (((((match_And_prop) (((lt) ((S) (O))) (n))) (\forall m1 : nat. (((divides) (m1)) (n)) \to (((lt) ((S) (O))) (m1)) \to (((eq) (nat)) (m1)) (n))) (((Not) (((divides) (n)) (m))) \to (((eq) (nat)) (((gcd) (n)) (m))) ((S) (O)))) (\lambda lt1n : ((lt) ((S) (O))) (n). \lambda primen : \forall m0 : nat. (((divides) (m0)) (n)) \to (((lt) ((S) (O))) (m0)) \to (((eq) (nat)) (m0)) (n). \lambda ndivnm : (Not) (((divides) (n)) (m)). ((((le_to_le_to_eq) (((gcd) (n)) (m))) ((S) (O))) ((((not_lt_to_le) ((S) (O))) (((gcd) (n)) (m))) (((((not_to_not) (((lt) ((S) (O))) (((gcd) (n)) (m)))) ((((eq) (nat)) (((gcd) (n)) (m))) (n))) (((primen) (((gcd) (n)) (m))) (((divides_gcd_l) (n)) (m)))) (((((not_to_not) ((((eq) (nat)) (((gcd) (n)) (m))) (n))) (((divides) (n)) (m))) (\lambda auto : (((eq) (nat)) (((gcd) (n)) (m))) (n). ((((eq_coerc) (((divides) (((gcd) (n)) (m))) (m))) (((divides) (n)) (m))) (((divides_gcd_r) (n)) (m))) (((((((rewrite_r) (nat)) (n)) (\lambda Joker_ : nat. (((eq) Prop) (((divides) (Joker_)) (m))) (((divides) (n)) (m)))) (((refl) Prop) (((divides) (n)) (m)))) (((gcd) (n)) (m))) (auto)))) (ndivnm))))) ((((lt_O_gcd) (n)) (m)) (((((not_eq_to_le_to_lt) (O)) (m)) (((((not_to_not) ((((eq) (nat)) (O)) (m))) (((divides) (n)) (m))) (\lambda auto : (((eq) (nat)) (O)) (m). ((((eq_coerc) (((divides) (n)) (O))) (((divides) (n)) (m))) ((divides_n_O) (n))) (((((((rewrite_r) (nat)) (m)) (\lambda Joker_ : nat. (((eq) Prop) (((divides) (n)) (Joker_))) (((divides) (n)) (m)))) (((refl) Prop) (((divides) (n)) (m)))) (O)) (auto)))) (ndivnm))) ((le_O_n) (m)))))) (Jokerclearme).
definition divides_times_to_divides : \forall p : nat. \forall n : nat. \forall m : nat. ((prime) (p)) \to (((divides) (p)) (((times) (n)) (m))) \to ((Or) (((divides) (p)) (n))) (((divides) (p)) (m)) := \lambda p : nat. \lambda n : nat. \lambda m : nat. \lambda primp : (prime) (p). \lambda Jokerclearme : ((divides) (p)) (((times) (n)) (m)). (((((match_divides_prop) (p)) (((times) (n)) (m))) (((Or) (((divides) (p)) (n))) (((divides) (p)) (m)))) (\lambda c : nat. \lambda nm : (((eq) (nat)) (((times) (n)) (m))) (((times) (p)) (c)). ((((((match_Or_prop) (((divides) (p)) (n))) ((Not) (((divides) (p)) (n)))) (((Or) (((divides) (p)) (n))) (((divides) (p)) (m)))) (\lambda auto : ((divides) (p)) (n). \lambda z : Prop. \lambda l : (((divides) (p)) (n)) \to z. \lambda r : (((divides) (p)) (m)) \to z. (l) (auto))) (\lambda ndivpn : (Not) (((divides) (p)) (n)). \lambda z : Prop. \lambda l : (((divides) (p)) (n)) \to z. \lambda r : (((divides) (p)) (m)) \to z. (r) ((((((match_ex_prop) (nat)) (\lambda a : nat. ((Ex) (nat)) (\lambda b : nat. ((Or) ((((eq) (nat)) (((minus) (((times) (a)) (n))) (((times) (b)) (p)))) ((S) (O)))) ((((eq) (nat)) (((minus) (((times) (b)) (p))) (((times) (a)) (n)))) ((S) (O)))))) (((divides) (p)) (m))) (\lambda a : nat. \lambda Jokerclearme0 : ((Ex) (nat)) (\lambda b : nat. ((Or) ((((eq) (nat)) (((minus) (((times) (a)) (n))) (((times) (b)) (p)))) ((S) (O)))) ((((eq) (nat)) (((minus) (((times) (b)) (p))) (((times) (a)) (n)))) ((S) (O)))). (((((match_ex_prop) (nat)) (\lambda b : nat. ((Or) ((((eq) (nat)) (((minus) (((times) (a)) (n))) (((times) (b)) (p)))) ((S) (O)))) ((((eq) (nat)) (((minus) (((times) (b)) (p))) (((times) (a)) (n)))) ((S) (O))))) (((divides) (p)) (m))) (\lambda b : nat. \lambda Jokerclearme1 : ((Or) ((((eq) (nat)) (((minus) (((times) (a)) (n))) (((times) (b)) (p)))) ((S) (O)))) ((((eq) (nat)) (((minus) (((times) (b)) (p))) (((times) (a)) (n)))) ((S) (O))). ((((((match_Or_prop) ((((eq) (nat)) (((minus) (((times) (a)) (n))) (((times) (b)) (p)))) ((S) (O)))) ((((eq) (nat)) (((minus) (((times) (b)) (p))) (((times) (a)) (n)))) ((S) (O)))) (((divides) (p)) (m))) (\lambda H : (((eq) (nat)) (((minus) (((times) (a)) (n))) (((times) (b)) (p)))) ((S) (O)). ((((quotient) (p)) (m)) (((minus) (((times) (a)) (c))) (((times) (b)) (m)))) (((((((eq_ind_r) (nat)) (((minus) (((times) (p)) (((times) (a)) (c)))) (((times) (p)) (((times) (b)) (m))))) (\lambda x : nat. (((eq) (nat)) (m)) (x))) (((((((eq_ind) (nat)) (((times) (((times) (p)) (a))) (c))) (\lambda x_1 : nat. (((eq) (nat)) (m)) (((minus) (x_1)) (((times) (p)) (((times) (b)) (m)))))) (((((((eq_ind_r) (nat)) (((times) (a)) (p))) (\lambda x : nat. (((eq) (nat)) (m)) (((minus) (((times) (x)) (c))) (((times) (p)) (((times) (b)) (m)))))) (((((((eq_ind_r) (nat)) (((times) (a)) (((times) (p)) (c)))) (\lambda x : nat. (((eq) (nat)) (m)) (((minus) (x)) (((times) (p)) (((times) (b)) (m)))))) (((((((eq_ind) (nat)) (((times) (n)) (m))) (\lambda x_1 : nat. (((eq) (nat)) (m)) (((minus) (((times) (a)) (x_1))) (((times) (p)) (((times) (b)) (m)))))) (((((((eq_ind) (nat)) (((times) (((times) (a)) (n))) (m))) (\lambda x_1 : nat. (((eq) (nat)) (m)) (((minus) (x_1)) (((times) (p)) (((times) (b)) (m)))))) (((((((eq_ind) (nat)) (((times) (((times) (p)) (b))) (m))) (\lambda x_1 : nat. (((eq) (nat)) (m)) (((minus) (((times) (((times) (a)) (n))) (m))) (x_1)))) (((((((eq_ind) (nat)) (((times) (m)) (((times) (a)) (n)))) (\lambda x_1 : nat. (((eq) (nat)) (m)) (((minus) (x_1)) (((times) (((times) (p)) (b))) (m))))) (((((((eq_ind_r) (nat)) (((times) (m)) (((times) (p)) (b)))) (\lambda x : nat. (((eq) (nat)) (m)) (((minus) (((times) (m)) (((times) (a)) (n)))) (x)))) (((((((eq_ind) (nat)) (((times) (m)) (((minus) (((times) (a)) (n))) (((times) (p)) (b))))) (\lambda x_1 : nat. (((eq) (nat)) (m)) (x_1))) (((((((rewrite_r) (nat)) (((times) (n)) (a))) (\lambda Joker_ : nat. (((eq) (nat)) (m)) (((times) (m)) (((minus) (Joker_)) (((times) (p)) (b)))))) (((((((rewrite_l) (nat)) (m)) (\lambda Joker_ : nat. (((eq) (nat)) (m)) (Joker_))) (((refl) (nat)) (m))) (((times) (m)) (((minus) (((times) (n)) (a))) (((times) (p)) (b))))) (((((((rewrite_r) (nat)) ((S) (O))) (\lambda Joker_ : nat. (((eq) (nat)) (m)) (((times) (m)) (Joker_)))) ((times_n_1) (m))) (((minus) (((times) (n)) (a))) (((times) (p)) (b)))) (((((((rewrite_l) (nat)) (((times) (b)) (p))) (\lambda Joker_ : nat. (((eq) (nat)) (((minus) (((times) (n)) (a))) (Joker_))) ((S) (O)))) (((((((rewrite_l) (nat)) (((times) (a)) (n))) (\lambda Joker_ : nat. (((eq) (nat)) (((minus) (Joker_)) (((times) (b)) (p)))) ((S) (O)))) (H)) (((times) (n)) (a))) (((commutative_times) (a)) (n)))) (((times) (p)) (b))) (((commutative_times) (b)) (p)))))) (((times) (a)) (n))) (((commutative_times) (a)) (n)))) (((minus) (((times) (m)) (((times) (a)) (n)))) (((times) (m)) (((times) (p)) (b))))) ((((distributive_times_minus) (m)) (((times) (a)) (n))) (((times) (p)) (b))))) (((times) (((times) (p)) (b))) (m))) (((commutative_times) (((times) (p)) (b))) (m)))) (((times) (((times) (a)) (n))) (m))) (((commutative_times) (m)) (((times) (a)) (n))))) (((times) (p)) (((times) (b)) (m)))) ((((associative_times) (p)) (b)) (m)))) (((times) (a)) (((times) (n)) (m)))) ((((associative_times) (a)) (n)) (m)))) (((times) (p)) (c))) (nm))) (((times) (((times) (a)) (p))) (c))) ((((associative_times) (a)) (p)) (c)))) (((times) (p)) (a))) (((commutative_times) (p)) (a)))) (((times) (p)) (((times) (a)) (c)))) ((((associative_times) (p)) (a)) (c)))) (((times) (p)) (((minus) (((times) (a)) (c))) (((times) (b)) (m))))) ((((distributive_times_minus) (p)) (((times) (a)) (c))) (((times) (b)) (m)))))) (\lambda H : (((eq) (nat)) (((minus) (((times) (b)) (p))) (((times) (a)) (n)))) ((S) (O)). ((((quotient) (p)) (m)) (((minus) (((times) (b)) (m))) (((times) (a)) (c)))) (((((((eq_ind_r) (nat)) (((minus) (((times) (p)) (((times) (b)) (m)))) (((times) (p)) (((times) (a)) (c))))) (\lambda x : nat. (((eq) (nat)) (m)) (x))) (((((((eq_ind) (nat)) (((times) (((times) (p)) (b))) (m))) (\lambda x_1 : nat. (((eq) (nat)) (m)) (((minus) (x_1)) (((times) (p)) (((times) (a)) (c)))))) (((((((eq_ind) (nat)) (((times) (((times) (p)) (a))) (c))) (\lambda x_1 : nat. (((eq) (nat)) (m)) (((minus) (((times) (((times) (p)) (b))) (m))) (x_1)))) (((((((eq_ind) (nat)) (((times) (a)) (p))) (\lambda x_1 : nat. (((eq) (nat)) (m)) (((minus) (((times) (((times) (p)) (b))) (m))) (((times) (x_1)) (c))))) (((((((eq_ind_r) (nat)) (((times) (a)) (((times) (p)) (c)))) (\lambda x : nat. (((eq) (nat)) (m)) (((minus) (((times) (((times) (p)) (b))) (m))) (x)))) (((((((eq_ind) (nat)) (((times) (n)) (m))) (\lambda x_1 : nat. (((eq) (nat)) (m)) (((minus) (((times) (((times) (p)) (b))) (m))) (((times) (a)) (x_1))))) (((((((eq_ind) (nat)) (((times) (((times) (a)) (n))) (m))) (\lambda x_1 : nat. (((eq) (nat)) (m)) (((minus) (((times) (((times) (p)) (b))) (m))) (x_1)))) (((((((eq_ind) (nat)) (((times) (m)) (((times) (p)) (b)))) (\lambda x_1 : nat. (((eq) (nat)) (m)) (((minus) (x_1)) (((times) (((times) (a)) (n))) (m))))) (((((((eq_ind_r) (nat)) (((times) (m)) (((times) (a)) (n)))) (\lambda x : nat. (((eq) (nat)) (m)) (((minus) (((times) (m)) (((times) (p)) (b)))) (x)))) (((((((eq_ind) (nat)) (((times) (m)) (((minus) (((times) (p)) (b))) (((times) (a)) (n))))) (\lambda x_1 : nat. (((eq) (nat)) (m)) (x_1))) (((((((rewrite_r) (nat)) (((times) (n)) (a))) (\lambda Joker_ : nat. (((eq) (nat)) (m)) (((times) (m)) (((minus) (((times) (p)) (b))) (Joker_))))) (((((((rewrite_l) (nat)) (m)) (\lambda Joker_ : nat. (((eq) (nat)) (m)) (Joker_))) (((refl) (nat)) (m))) (((times) (m)) (((minus) (((times) (p)) (b))) (((times) (n)) (a))))) (((((((rewrite_r) (nat)) ((S) (O))) (\lambda Joker_ : nat. (((eq) (nat)) (m)) (((times) (m)) (Joker_)))) ((times_n_1) (m))) (((minus) (((times) (p)) (b))) (((times) (n)) (a)))) (((((((rewrite_l) (nat)) (((times) (a)) (n))) (\lambda Joker_ : nat. (((eq) (nat)) (((minus) (((times) (p)) (b))) (Joker_))) ((S) (O)))) (((((((rewrite_l) (nat)) (((times) (b)) (p))) (\lambda Joker_ : nat. (((eq) (nat)) (((minus) (Joker_)) (((times) (a)) (n)))) ((S) (O)))) (H)) (((times) (p)) (b))) (((commutative_times) (b)) (p)))) (((times) (n)) (a))) (((commutative_times) (a)) (n)))))) (((times) (a)) (n))) (((commutative_times) (a)) (n)))) (((minus) (((times) (m)) (((times) (p)) (b)))) (((times) (m)) (((times) (a)) (n))))) ((((distributive_times_minus) (m)) (((times) (p)) (b))) (((times) (a)) (n))))) (((times) (((times) (a)) (n))) (m))) (((commutative_times) (((times) (a)) (n))) (m)))) (((times) (((times) (p)) (b))) (m))) (((commutative_times) (m)) (((times) (p)) (b))))) (((times) (a)) (((times) (n)) (m)))) ((((associative_times) (a)) (n)) (m)))) (((times) (p)) (c))) (nm))) (((times) (((times) (a)) (p))) (c))) ((((associative_times) (a)) (p)) (c)))) (((times) (p)) (a))) (((commutative_times) (a)) (p)))) (((times) (p)) (((times) (a)) (c)))) ((((associative_times) (p)) (a)) (c)))) (((times) (p)) (((times) (b)) (m)))) ((((associative_times) (p)) (b)) (m)))) (((times) (p)) (((minus) (((times) (b)) (m))) (((times) (a)) (c))))) ((((distributive_times_minus) (p)) (((times) (b)) (m))) (((times) (a)) (c)))))) (Jokerclearme1))) (Jokerclearme0))) (((((((eq_ind) (nat)) (((gcd) (p)) (n))) (\lambda x_1 : nat. ((Ex) (nat)) (\lambda a : nat. ((Ex) (nat)) (\lambda b : nat. ((Or) ((((eq) (nat)) (((minus) (((times) (a)) (n))) (((times) (b)) (p)))) (x_1))) ((((eq) (nat)) (((minus) (((times) (b)) (p))) (((times) (a)) (n)))) (x_1)))))) (((((((eq_ind_r) (nat)) (((gcd) (n)) (p))) (\lambda x : nat. ((Ex) (nat)) (\lambda a : nat. ((Ex) (nat)) (\lambda b : nat. ((Or) ((((eq) (nat)) (((minus) (((times) (a)) (n))) (((times) (b)) (p)))) (x))) ((((eq) (nat)) (((minus) (((times) (b)) (p))) (((times) (a)) (n)))) (x)))))) (((eq_minus_gcd) (p)) (n))) (((gcd) (p)) (n))) (((commutative_gcd) (p)) (n)))) ((S) (O))) (((((prime_to_gcd_1) (p)) (n)) (primp)) (ndivpn)))))) (((decidable_divides) (p)) (n)))) (Jokerclearme).
definition congruent : (nat) \to (nat) \to (nat) \to Prop := \lambda n : nat. \lambda m : nat. \lambda p : nat. (((eq) (nat)) (((mod) (n)) (p))) (((mod) (m)) (p)).
definition congruent_n_n : \forall n : nat. \forall p : nat. (((congruent) (n)) (n)) (p) := \lambda n : nat. \lambda p : nat. ((refl) (nat)) (((mod) (n)) (p)).
definition transitive_congruent : \forall p : nat. ((transitive) (nat)) (\lambda n : nat. \lambda m : nat. (((congruent) (n)) (m)) (p)) := \lambda p : nat. \lambda x : nat. \lambda y : nat. \lambda z : nat. \lambda auto : (((congruent) (x)) (y)) (p). \lambda auto' : (((congruent) (y)) (z)) (p). ((((((rewrite_l) (nat)) (((mod) (x)) (p))) (\lambda Joker_ : nat. (((eq) (nat)) (((mod) (x)) (p))) (Joker_))) (((refl) (nat)) (((mod) (x)) (p)))) (((mod) (z)) (p))) (((((((rewrite_r) (nat)) (((mod) (y)) (p))) (\lambda Joker_ : nat. (((eq) (nat)) (Joker_)) (((mod) (z)) (p)))) (auto')) (((mod) (x)) (p))) (auto)).
definition mod_mod : \forall n : nat. \forall p : nat. (((lt) (O)) (p)) \to (((eq) (nat)) (((mod) (n)) (p))) (((mod) (((mod) (n)) (p))) (p)) := \lambda n : nat. \lambda p : nat. \lambda posp : ((lt) (O)) (p). ((((((eq_ind_r) (nat)) (((plus) (((times) (((div) (((mod) (n)) (p))) (p))) (p))) (((mod) (((mod) (n)) (p))) (p)))) (\lambda x : nat. (((eq) (nat)) (x)) (((mod) (((mod) (n)) (p))) (p)))) (((((((eq_ind_r) (nat)) (O)) (\lambda x : nat. (((eq) (nat)) (((plus) (((times) (x)) (p))) (((mod) (((mod) (n)) (p))) (p)))) (((mod) (((mod) (n)) (p))) (p)))) (((((((rewrite_r) (nat)) (((times) (p)) (O))) (\lambda Joker_ : nat. (((eq) (nat)) (((plus) (Joker_)) (((mod) (((mod) (n)) (p))) (p)))) (((mod) (((mod) (n)) (p))) (p)))) (((((((rewrite_l) (nat)) (O)) (\lambda Joker_ : nat. (((eq) (nat)) (((plus) (Joker_)) (((mod) (((mod) (n)) (p))) (p)))) (((mod) (((mod) (n)) (p))) (p)))) (((((((rewrite_l) (nat)) (((mod) (((mod) (n)) (p))) (p))) (\lambda Joker_ : nat. (((eq) (nat)) (Joker_)) (((mod) (((mod) (n)) (p))) (p)))) (((refl) (nat)) (((mod) (((mod) (n)) (p))) (p)))) (((plus) (O)) (((mod) (((mod) (n)) (p))) (p)))) ((plus_O_n) (((mod) (((mod) (n)) (p))) (p))))) (((times) (p)) (O))) ((times_n_O) (p)))) (((times) (O)) (p))) (((commutative_times) (O)) (p)))) (((div) (((mod) (n)) (p))) (p))) ((((eq_div_O) (((mod) (n)) (p))) (p)) ((((lt_mod_m_m) (n)) (p)) (posp))))) (((mod) (n)) (p))) (((div_mod) (((mod) (n)) (p))) (p)).
definition congruent_n_mod_n : \forall n : nat. \forall p : nat. (((lt) (O)) (p)) \to (((congruent) (n)) (((mod) (n)) (p))) (p) := \lambda n : nat. \lambda p : nat. \lambda posp : ((lt) (O)) (p). (((mod_mod) (n)) (p)) (posp).
definition eq_times_plus_to_congruent : \forall n : nat. \forall m : nat. \forall p : nat. \forall r : nat. (((lt) (O)) (p)) \to ((((eq) (nat)) (n)) (((plus) (((times) (r)) (p))) (m))) \to (((congruent) (n)) (m)) (p) := \lambda n : nat. \lambda m : nat. \lambda p : nat. \lambda r : nat. \lambda posp : ((lt) (O)) (p). \lambda Hn : (((eq) (nat)) (n)) (((plus) (((times) (r)) (p))) (m)). ((((((((div_mod_spec_to_eq2) (n)) (p)) (((div) (n)) (p))) (((mod) (n)) (p))) (((plus) (r)) (((div) (m)) (p)))) (((mod) (m)) (p))) ((((div_mod_spec_div_mod) (n)) (p)) (posp))) (((((((div_mod_spec_intro) (n)) (p)) (((plus) (r)) (((div) (m)) (p)))) (((mod) (m)) (p))) ((((lt_mod_m_m) (m)) (p)) (posp))) (((((((eq_ind_r) (nat)) (((times) (p)) (((plus) (r)) (((div) (m)) (p))))) (\lambda x : nat. (((eq) (nat)) (n)) (((plus) (x)) (((mod) (m)) (p))))) (((((((eq_ind_r) (nat)) (((plus) (((times) (p)) (r))) (((times) (p)) (((div) (m)) (p))))) (\lambda x : nat. (((eq) (nat)) (n)) (((plus) (x)) (((mod) (m)) (p))))) (((((((eq_ind_r) (nat)) (((times) (r)) (p))) (\lambda x : nat. (((eq) (nat)) (n)) (((plus) (((plus) (x)) (((times) (p)) (((div) (m)) (p))))) (((mod) (m)) (p))))) (((((((eq_ind_r) (nat)) (((times) (((div) (m)) (p))) (p))) (\lambda x : nat. (((eq) (nat)) (n)) (((plus) (((plus) (((times) (r)) (p))) (x))) (((mod) (m)) (p))))) (((((((eq_ind_r) (nat)) (((plus) (((times) (r)) (p))) (((plus) (((times) (((div) (m)) (p))) (p))) (((mod) (m)) (p))))) (\lambda x : nat. (((eq) (nat)) (n)) (x))) (((((((rewrite_r) (nat)) (((times) (p)) (r))) (\lambda Joker_ : nat. (((eq) (nat)) (n)) (((plus) (Joker_)) (((plus) (((times) (((div) (m)) (p))) (p))) (((mod) (m)) (p)))))) (((((((rewrite_r) (nat)) (((times) (p)) (((div) (m)) (p)))) (\lambda Joker_ : nat. (((eq) (nat)) (n)) (((plus) (((times) (p)) (r))) (((plus) (Joker_)) (((mod) (m)) (p)))))) (((((((rewrite_r) (nat)) (((plus) (((mod) (m)) (p))) (((times) (p)) (((div) (m)) (p))))) (\lambda Joker_ : nat. (((eq) (nat)) (n)) (((plus) (((times) (p)) (r))) (Joker_)))) (((((((rewrite_l) (nat)) (m)) (\lambda Joker_ : nat. (((eq) (nat)) (n)) (((plus) (((times) (p)) (r))) (Joker_)))) (((((((rewrite_r) (nat)) (((plus) (m)) (((times) (p)) (r)))) (\lambda Joker_ : nat. (((eq) (nat)) (n)) (Joker_))) (((((((rewrite_l) (nat)) (n)) (\lambda Joker_ : nat. (((eq) (nat)) (n)) (Joker_))) (((refl) (nat)) (n))) (((plus) (m)) (((times) (p)) (r)))) (((((((rewrite_l) (nat)) (((plus) (((times) (p)) (r))) (m))) (\lambda Joker_ : nat. (((eq) (nat)) (n)) (Joker_))) (((((((rewrite_l) (nat)) (((times) (r)) (p))) (\lambda Joker_ : nat. (((eq) (nat)) (n)) (((plus) (Joker_)) (m)))) (Hn)) (((times) (p)) (r))) (((commutative_times) (r)) (p)))) (((plus) (m)) (((times) (p)) (r)))) (((commutative_plus) (((times) (p)) (r))) (m))))) (((plus) (((times) (p)) (r))) (m))) (((commutative_plus) (((times) (p)) (r))) (m)))) (((plus) (((mod) (m)) (p))) (((times) (p)) (((div) (m)) (p))))) (((((((rewrite_l) (nat)) (((plus) (((times) (p)) (((div) (m)) (p)))) (((mod) (m)) (p)))) (\lambda Joker_ : nat. (((eq) (nat)) (m)) (Joker_))) (((((((rewrite_l) (nat)) (((times) (((div) (m)) (p))) (p))) (\lambda Joker_ : nat. (((eq) (nat)) (m)) (((plus) (Joker_)) (((mod) (m)) (p))))) (((div_mod) (m)) (p))) (((times) (p)) (((div) (m)) (p)))) (((commutative_times) (((div) (m)) (p))) (p)))) (((plus) (((mod) (m)) (p))) (((times) (p)) (((div) (m)) (p))))) (((commutative_plus) (((times) (p)) (((div) (m)) (p)))) (((mod) (m)) (p)))))) (((plus) (((times) (p)) (((div) (m)) (p)))) (((mod) (m)) (p)))) (((commutative_plus) (((times) (p)) (((div) (m)) (p)))) (((mod) (m)) (p))))) (((times) (((div) (m)) (p))) (p))) (((commutative_times) (((div) (m)) (p))) (p)))) (((times) (r)) (p))) (((commutative_times) (r)) (p)))) (((plus) (((plus) (((times) (r)) (p))) (((times) (((div) (m)) (p))) (p)))) (((mod) (m)) (p)))) ((((associative_plus) (((times) (r)) (p))) (((times) (((div) (m)) (p))) (p))) (((mod) (m)) (p))))) (((times) (p)) (((div) (m)) (p)))) (((commutative_times) (p)) (((div) (m)) (p))))) (((times) (p)) (r))) (((commutative_times) (p)) (r)))) (((times) (p)) (((plus) (r)) (((div) (m)) (p))))) ((((distributive_times_plus) (p)) (r)) (((div) (m)) (p))))) (((times) (((plus) (r)) (((div) (m)) (p)))) (p))) (((commutative_times) (((plus) (r)) (((div) (m)) (p)))) (p)))).
definition divides_to_congruent : \forall n : nat. \forall m : nat. \forall p : nat. (((lt) (O)) (p)) \to (((le) (m)) (n)) \to (((divides) (p)) (((minus) (n)) (m))) \to (((congruent) (n)) (m)) (p) := \lambda n : nat. \lambda m : nat. \lambda p : nat. \lambda posp : ((lt) (O)) (p). \lambda lemn : ((le) (m)) (n). \lambda Jokerclearme : ((divides) (p)) (((minus) (n)) (m)). (((((match_divides_prop) (p)) (((minus) (n)) (m))) ((((congruent) (n)) (m)) (p))) (\lambda q : nat. \lambda Hdiv : (((eq) (nat)) (((minus) (n)) (m))) (((times) (p)) (q)). ((((((eq_times_plus_to_congruent) (n)) (m)) (p)) (q)) (posp)) (((((((eq_ind_r) (nat)) (((plus) (m)) (((times) (q)) (p)))) (\lambda x : nat. (((eq) (nat)) (n)) (x))) ((((((minus_to_plus) (n)) (m)) (((times) (q)) (p))) (lemn)) (((((((rewrite_r) (nat)) (((times) (p)) (q))) (\lambda Joker_ : nat. (((eq) (nat)) (Joker_)) (((times) (q)) (p)))) (((((((rewrite_r) (nat)) (((times) (p)) (q))) (\lambda Joker_ : nat. (((eq) (nat)) (((times) (p)) (q))) (Joker_))) (((refl) (nat)) (((times) (p)) (q)))) (((times) (q)) (p))) (((commutative_times) (q)) (p)))) (((minus) (n)) (m))) (Hdiv)))) (((plus) (((times) (q)) (p))) (m))) (((commutative_plus) (((times) (q)) (p))) (m))))) (Jokerclearme).
definition congruent_to_divides : \forall n : nat. \forall m : nat. \forall p : nat. (((lt) (O)) (p)) \to ((((congruent) (n)) (m)) (p)) \to ((divides) (p)) (((minus) (n)) (m)) := \lambda n : nat. \lambda m : nat. \lambda p : nat. \lambda posp : ((lt) (O)) (p). \lambda Hcong : (((congruent) (n)) (m)) (p). ((((quotient) (p)) (((minus) (n)) (m))) (((minus) (((div) (n)) (p))) (((div) (m)) (p)))) (((((((eq_ind_r) (nat)) (((times) (((minus) (((div) (n)) (p))) (((div) (m)) (p)))) (p))) (\lambda x : nat. (((eq) (nat)) (((minus) (n)) (m))) (x))) (((((((eq_ind_r) (nat)) (((plus) (((times) (((div) (n)) (p))) (p))) (((mod) (n)) (p)))) (\lambda x : nat. (((eq) (nat)) (((minus) (x)) (m))) (((times) (((minus) (((div) (n)) (p))) (((div) (m)) (p)))) (p)))) (((((((eq_ind_r) (nat)) (((plus) (((times) (((div) (m)) (p))) (p))) (((mod) (m)) (p)))) (\lambda x : nat. (((eq) (nat)) (((minus) (((plus) (((times) (((div) (n)) (p))) (p))) (((mod) (n)) (p)))) (x))) (((times) (((minus) (((div) (n)) (p))) (((div) (m)) (p)))) (p)))) (((((((rewrite_r) (nat)) (((times) (p)) (((div) (n)) (p)))) (\lambda Joker_ : nat. (((eq) (nat)) (((minus) (((plus) (Joker_)) (((mod) (n)) (p)))) (((plus) (((times) (((div) (m)) (p))) (p))) (((mod) (m)) (p))))) (((times) (((minus) (((div) (n)) (p))) (((div) (m)) (p)))) (p)))) (((((((rewrite_r) (nat)) (((plus) (((mod) (n)) (p))) (((times) (p)) (((div) (n)) (p))))) (\lambda Joker_ : nat. (((eq) (nat)) (((minus) (Joker_)) (((plus) (((times) (((div) (m)) (p))) (p))) (((mod) (m)) (p))))) (((times) (((minus) (((div) (n)) (p))) (((div) (m)) (p)))) (p)))) (((((((rewrite_l) (nat)) (n)) (\lambda Joker_ : nat. (((eq) (nat)) (((minus) (Joker_)) (((plus) (((times) (((div) (m)) (p))) (p))) (((mod) (m)) (p))))) (((times) (((minus) (((div) (n)) (p))) (((div) (m)) (p)))) (p)))) (((((((rewrite_r) (nat)) (((times) (p)) (((div) (m)) (p)))) (\lambda Joker_ : nat. (((eq) (nat)) (((minus) (n)) (((plus) (Joker_)) (((mod) (m)) (p))))) (((times) (((minus) (((div) (n)) (p))) (((div) (m)) (p)))) (p)))) (((((((rewrite_l) (nat)) (((mod) (n)) (p))) (\lambda Joker_ : nat. (((eq) (nat)) (((minus) (n)) (((plus) (((times) (p)) (((div) (m)) (p)))) (Joker_)))) (((times) (((minus) (((div) (n)) (p))) (((div) (m)) (p)))) (p)))) (((((((rewrite_r) (nat)) (((plus) (((mod) (n)) (p))) (((times) (p)) (((div) (m)) (p))))) (\lambda Joker_ : nat. (((eq) (nat)) (((minus) (n)) (Joker_))) (((times) (((minus) (((div) (n)) (p))) (((div) (m)) (p)))) (p)))) (((((((rewrite_l) (nat)) (((minus) (((minus) (n)) (((mod) (n)) (p)))) (((times) (p)) (((div) (m)) (p))))) (\lambda Joker_ : nat. (((eq) (nat)) (Joker_)) (((times) (((minus) (((div) (n)) (p))) (((div) (m)) (p)))) (p)))) (((((((rewrite_l) (nat)) (((times) (p)) (((div) (n)) (p)))) (\lambda Joker_ : nat. (((eq) (nat)) (((minus) (Joker_)) (((times) (p)) (((div) (m)) (p))))) (((times) (((minus) (((div) (n)) (p))) (((div) (m)) (p)))) (p)))) (((((((rewrite_l) (nat)) (((times) (p)) (((minus) (((div) (n)) (p))) (((div) (m)) (p))))) (\lambda Joker_ : nat. (((eq) (nat)) (Joker_)) (((times) (((minus) (((div) (n)) (p))) (((div) (m)) (p)))) (p)))) (((((((rewrite_r) (nat)) (((times) (p)) (((minus) (((div) (n)) (p))) (((div) (m)) (p))))) (\lambda Joker_ : nat. (((eq) (nat)) (((times) (p)) (((minus) (((div) (n)) (p))) (((div) (m)) (p))))) (Joker_))) (((refl) (nat)) (((times) (p)) (((minus) (((div) (n)) (p))) (((div) (m)) (p)))))) (((times) (((minus) (((div) (n)) (p))) (((div) (m)) (p)))) (p))) (((commutative_times) (((minus) (((div) (n)) (p))) (((div) (m)) (p)))) (p)))) (((minus) (((times) (p)) (((div) (n)) (p)))) (((times) (p)) (((div) (m)) (p))))) ((((distributive_times_minus) (p)) (((div) (n)) (p))) (((div) (m)) (p))))) (((minus) (n)) (((mod) (n)) (p)))) (((((((rewrite_l) (nat)) (((times) (((div) (n)) (p))) (p))) (\lambda Joker_ : nat. (((eq) (nat)) (Joker_)) (((minus) (n)) (((mod) (n)) (p))))) (((eq_times_div_minus_mod) (n)) (p))) (((times) (p)) (((div) (n)) (p)))) (((commutative_times) (((div) (n)) (p))) (p))))) (((minus) (n)) (((plus) (((mod) (n)) (p))) (((times) (p)) (((div) (m)) (p)))))) ((((minus_plus) (n)) (((mod) (n)) (p))) (((times) (p)) (((div) (m)) (p)))))) (((plus) (((times) (p)) (((div) (m)) (p)))) (((mod) (n)) (p)))) (((commutative_plus) (((times) (p)) (((div) (m)) (p)))) (((mod) (n)) (p))))) (((mod) (m)) (p))) (Hcong))) (((times) (((div) (m)) (p))) (p))) (((commutative_times) (((div) (m)) (p))) (p)))) (((plus) (((mod) (n)) (p))) (((times) (p)) (((div) (n)) (p))))) (((((((rewrite_l) (nat)) (((plus) (((times) (p)) (((div) (n)) (p)))) (((mod) (n)) (p)))) (\lambda Joker_ : nat. (((eq) (nat)) (n)) (Joker_))) (((((((rewrite_l) (nat)) (((times) (((div) (n)) (p))) (p))) (\lambda Joker_ : nat. (((eq) (nat)) (n)) (((plus) (Joker_)) (((mod) (n)) (p))))) (((div_mod) (n)) (p))) (((times) (p)) (((div) (n)) (p)))) (((commutative_times) (((div) (n)) (p))) (p)))) (((plus) (((mod) (n)) (p))) (((times) (p)) (((div) (n)) (p))))) (((commutative_plus) (((times) (p)) (((div) (n)) (p)))) (((mod) (n)) (p)))))) (((plus) (((times) (p)) (((div) (n)) (p)))) (((mod) (n)) (p)))) (((commutative_plus) (((times) (p)) (((div) (n)) (p)))) (((mod) (n)) (p))))) (((times) (((div) (n)) (p))) (p))) (((commutative_times) (((div) (n)) (p))) (p)))) (m)) (((div_mod) (m)) (p)))) (n)) (((div_mod) (n)) (p)))) (((times) (p)) (((minus) (((div) (n)) (p))) (((div) (m)) (p))))) (((commutative_times) (p)) (((minus) (((div) (n)) (p))) (((div) (m)) (p))))).
definition let_clause_1034 : \forall n : nat. \forall m : nat. \forall p : nat. (((lt) (O)) (p)) \to \forall x2515 : nat. \forall x2516 : nat. (((eq) (nat)) (x2515)) (((plus) (((mod) (x2515)) (x2516))) (((times) (x2516)) (((div) (x2515)) (x2516)))) := \lambda n : nat. \lambda m : nat. \lambda p : nat. \lambda posp : ((lt) (O)) (p). \lambda x2515 : nat. \lambda x2516 : nat. ((((((rewrite_l) (nat)) (((plus) (((times) (x2516)) (((div) (x2515)) (x2516)))) (((mod) (x2515)) (x2516)))) (\lambda Joker_ : nat. (((eq) (nat)) (x2515)) (Joker_))) (((((((rewrite_l) (nat)) (((times) (((div) (x2515)) (x2516))) (x2516))) (\lambda Joker_ : nat. (((eq) (nat)) (x2515)) (((plus) (Joker_)) (((mod) (x2515)) (x2516))))) (((div_mod) (x2515)) (x2516))) (((times) (x2516)) (((div) (x2515)) (x2516)))) (((commutative_times) (((div) (x2515)) (x2516))) (x2516)))) (((plus) (((mod) (x2515)) (x2516))) (((times) (x2516)) (((div) (x2515)) (x2516))))) (((commutative_plus) (((times) (x2516)) (((div) (x2515)) (x2516)))) (((mod) (x2515)) (x2516))).
definition let_clause_73 : \forall n : nat. \forall m : nat. \forall p : nat. (((lt) (O)) (p)) \to \forall x134 : nat. \forall x135 : nat. \forall x136 : nat. (((eq) (nat)) (((plus) (x134)) (((plus) (x135)) (x136)))) (((plus) (x135)) (((plus) (x134)) (x136))) := \lambda n : nat. \lambda m : nat. \lambda p : nat. \lambda posp : ((lt) (O)) (p). \lambda x134 : nat. \lambda x135 : nat. \lambda x136 : nat. ((((((rewrite_l) (nat)) (((plus) (((plus) (x135)) (x134))) (x136))) (\lambda Joker_ : nat. (((eq) (nat)) (((plus) (x134)) (((plus) (x135)) (x136)))) (Joker_))) ((((assoc_plus1) (x136)) (x135)) (x134))) (((plus) (x135)) (((plus) (x134)) (x136)))) ((((associative_plus) (x135)) (x134)) (x136)).
definition mod_times : \forall n : nat. \forall m : nat. \forall p : nat. (((lt) (O)) (p)) \to (((eq) (nat)) (((mod) (((times) (n)) (m))) (p))) (((mod) (((times) (((mod) (n)) (p))) (((mod) (m)) (p)))) (p)) := \lambda n : nat. \lambda m : nat. \lambda p : nat. \lambda posp : ((lt) (O)) (p). ((((((eq_times_plus_to_congruent) (((times) (n)) (m))) (((times) (((mod) (n)) (p))) (((mod) (m)) (p)))) (p)) (((plus) (((plus) (((times) (((times) (((div) (n)) (p))) (p))) (((div) (m)) (p)))) (((times) (((div) (n)) (p))) (((mod) (m)) (p))))) (((times) (((mod) (n)) (p))) (((div) (m)) (p))))) (posp)) (((((((trans_eq) (nat)) (((times) (n)) (m))) (((times) (((plus) (((times) (((div) (n)) (p))) (p))) (((mod) (n)) (p)))) (((plus) (((times) (((div) (m)) (p))) (p))) (((mod) (m)) (p))))) (((plus) (((times) (((plus) (((plus) (((times) (((times) (((div) (n)) (p))) (p))) (((div) (m)) (p)))) (((times) (((div) (n)) (p))) (((mod) (m)) (p))))) (((times) (((mod) (n)) (p))) (((div) (m)) (p))))) (p))) (((times) (((mod) (n)) (p))) (((mod) (m)) (p))))) (((((((rewrite_r) (nat)) (((times) (p)) (((div) (n)) (p)))) (\lambda Joker_ : nat. (((eq) (nat)) (((times) (n)) (m))) (((times) (((plus) (Joker_)) (((mod) (n)) (p)))) (((plus) (((times) (((div) (m)) (p))) (p))) (((mod) (m)) (p)))))) (((((((rewrite_r) (nat)) (((plus) (((mod) (n)) (p))) (((times) (p)) (((div) (n)) (p))))) (\lambda Joker_ : nat. (((eq) (nat)) (((times) (n)) (m))) (((times) (Joker_)) (((plus) (((times) (((div) (m)) (p))) (p))) (((mod) (m)) (p)))))) (((((((rewrite_l) (nat)) (n)) (\lambda Joker_ : nat. (((eq) (nat)) (((times) (n)) (m))) (((times) (Joker_)) (((plus) (((times) (((div) (m)) (p))) (p))) (((mod) (m)) (p)))))) (((((((rewrite_r) (nat)) (((times) (p)) (((div) (m)) (p)))) (\lambda Joker_ : nat. (((eq) (nat)) (((times) (n)) (m))) (((times) (n)) (((plus) (Joker_)) (((mod) (m)) (p)))))) (((((((rewrite_r) (nat)) (((plus) (((mod) (m)) (p))) (((times) (p)) (((div) (m)) (p))))) (\lambda Joker_ : nat. (((eq) (nat)) (((times) (n)) (m))) (((times) (n)) (Joker_)))) (((((((rewrite_l) (nat)) (m)) (\lambda Joker_ : nat. (((eq) (nat)) (((times) (n)) (m))) (((times) (n)) (Joker_)))) (((refl) (nat)) (((times) (n)) (m)))) (((plus) (((mod) (m)) (p))) (((times) (p)) (((div) (m)) (p))))) (((((((let_clause_1034) (n)) (m)) (p)) (posp)) (m)) (p)))) (((plus) (((times) (p)) (((div) (m)) (p)))) (((mod) (m)) (p)))) (((commutative_plus) (((times) (p)) (((div) (m)) (p)))) (((mod) (m)) (p))))) (((times) (((div) (m)) (p))) (p))) (((commutative_times) (((div) (m)) (p))) (p)))) (((plus) (((mod) (n)) (p))) (((times) (p)) (((div) (n)) (p))))) (((((((let_clause_1034) (n)) (m)) (p)) (posp)) (n)) (p)))) (((plus) (((times) (p)) (((div) (n)) (p)))) (((mod) (n)) (p)))) (((commutative_plus) (((times) (p)) (((div) (n)) (p)))) (((mod) (n)) (p))))) (((times) (((div) (n)) (p))) (p))) (((commutative_times) (((div) (n)) (p))) (p)))) (((((((trans_eq) (nat)) (((times) (((plus) (((times) (((div) (n)) (p))) (p))) (((mod) (n)) (p)))) (((plus) (((times) (((div) (m)) (p))) (p))) (((mod) (m)) (p))))) (((plus) (((plus) (((plus) (((times) (((times) (((div) (n)) (p))) (p))) (((times) (((div) (m)) (p))) (p)))) (((times) (((times) (((div) (n)) (p))) (p))) (((mod) (m)) (p))))) (((times) (((mod) (n)) (p))) (((times) (((div) (m)) (p))) (p))))) (((times) (((mod) (n)) (p))) (((mod) (m)) (p))))) (((plus) (((times) (((plus) (((plus) (((times) (((times) (((div) (n)) (p))) (p))) (((div) (m)) (p)))) (((times) (((div) (n)) (p))) (((mod) (m)) (p))))) (((times) (((mod) (n)) (p))) (((div) (m)) (p))))) (p))) (((times) (((mod) (n)) (p))) (((mod) (m)) (p))))) (((((((eq_ind_r) (nat)) (((plus) (((times) (((times) (((div) (n)) (p))) (p))) (((plus) (((times) (((div) (m)) (p))) (p))) (((mod) (m)) (p))))) (((times) (((mod) (n)) (p))) (((plus) (((times) (((div) (m)) (p))) (p))) (((mod) (m)) (p)))))) (\lambda x : nat. (((eq) (nat)) (x)) (((plus) (((plus) (((plus) (((times) (((times) (((div) (n)) (p))) (p))) (((times) (((div) (m)) (p))) (p)))) (((times) (((times) (((div) (n)) (p))) (p))) (((mod) (m)) (p))))) (((times) (((mod) (n)) (p))) (((times) (((div) (m)) (p))) (p))))) (((times) (((mod) (n)) (p))) (((mod) (m)) (p)))))) (((((((eq_ind_r) (nat)) (((plus) (((times) (((times) (((div) (n)) (p))) (p))) (((times) (((div) (m)) (p))) (p)))) (((times) (((times) (((div) (n)) (p))) (p))) (((mod) (m)) (p))))) (\lambda x : nat. (((eq) (nat)) (((plus) (x)) (((times) (((mod) (n)) (p))) (((plus) (((times) (((div) (m)) (p))) (p))) (((mod) (m)) (p)))))) (((plus) (((plus) (((plus) (((times) (((times) (((div) (n)) (p))) (p))) (((times) (((div) (m)) (p))) (p)))) (((times) (((times) (((div) (n)) (p))) (p))) (((mod) (m)) (p))))) (((times) (((mod) (n)) (p))) (((times) (((div) (m)) (p))) (p))))) (((times) (((mod) (n)) (p))) (((mod) (m)) (p)))))) (((((((eq_ind_r) (nat)) (((plus) (((times) (((mod) (n)) (p))) (((times) (((div) (m)) (p))) (p)))) (((times) (((mod) (n)) (p))) (((mod) (m)) (p))))) (\lambda x : nat. (((eq) (nat)) (((plus) (((plus) (((times) (((times) (((div) (n)) (p))) (p))) (((times) (((div) (m)) (p))) (p)))) (((times) (((times) (((div) (n)) (p))) (p))) (((mod) (m)) (p))))) (x))) (((plus) (((plus) (((plus) (((times) (((times) (((div) (n)) (p))) (p))) (((times) (((div) (m)) (p))) (p)))) (((times) (((times) (((div) (n)) (p))) (p))) (((mod) (m)) (p))))) (((times) (((mod) (n)) (p))) (((times) (((div) (m)) (p))) (p))))) (((times) (((mod) (n)) (p))) (((mod) (m)) (p)))))) (((((((rewrite_l) (nat)) (((plus) (((plus) (((plus) (((times) (((times) (((div) (n)) (p))) (p))) (((times) (((div) (m)) (p))) (p)))) (((times) (((times) (((div) (n)) (p))) (p))) (((mod) (m)) (p))))) (((times) (((mod) (n)) (p))) (((times) (((div) (m)) (p))) (p))))) (((times) (((mod) (n)) (p))) (((mod) (m)) (p))))) (\lambda Joker_ : nat. (((eq) (nat)) (Joker_)) (((plus) (((plus) (((plus) (((times) (((times) (((div) (n)) (p))) (p))) (((times) (((div) (m)) (p))) (p)))) (((times) (((times) (((div) (n)) (p))) (p))) (((mod) (m)) (p))))) (((times) (((mod) (n)) (p))) (((times) (((div) (m)) (p))) (p))))) (((times) (((mod) (n)) (p))) (((mod) (m)) (p)))))) (((refl) (nat)) (((plus) (((plus) (((plus) (((times) (((times) (((div) (n)) (p))) (p))) (((times) (((div) (m)) (p))) (p)))) (((times) (((times) (((div) (n)) (p))) (p))) (((mod) (m)) (p))))) (((times) (((mod) (n)) (p))) (((times) (((div) (m)) (p))) (p))))) (((times) (((mod) (n)) (p))) (((mod) (m)) (p)))))) (((plus) (((plus) (((times) (((times) (((div) (n)) (p))) (p))) (((times) (((div) (m)) (p))) (p)))) (((times) (((times) (((div) (n)) (p))) (p))) (((mod) (m)) (p))))) (((plus) (((times) (((mod) (n)) (p))) (((times) (((div) (m)) (p))) (p)))) (((times) (((mod) (n)) (p))) (((mod) (m)) (p)))))) ((((associative_plus) (((plus) (((times) (((times) (((div) (n)) (p))) (p))) (((times) (((div) (m)) (p))) (p)))) (((times) (((times) (((div) (n)) (p))) (p))) (((mod) (m)) (p))))) (((times) (((mod) (n)) (p))) (((times) (((div) (m)) (p))) (p)))) (((times) (((mod) (n)) (p))) (((mod) (m)) (p)))))) (((times) (((mod) (n)) (p))) (((plus) (((times) (((div) (m)) (p))) (p))) (((mod) (m)) (p))))) ((((distributive_times_plus) (((mod) (n)) (p))) (((times) (((div) (m)) (p))) (p))) (((mod) (m)) (p))))) (((times) (((times) (((div) (n)) (p))) (p))) (((plus) (((times) (((div) (m)) (p))) (p))) (((mod) (m)) (p))))) ((((distributive_times_plus) (((times) (((div) (n)) (p))) (p))) (((times) (((div) (m)) (p))) (p))) (((mod) (m)) (p))))) (((times) (((plus) (((times) (((div) (n)) (p))) (p))) (((mod) (n)) (p)))) (((plus) (((times) (((div) (m)) (p))) (p))) (((mod) (m)) (p))))) ((((distributive_times_plus_r) (((plus) (((times) (((div) (m)) (p))) (p))) (((mod) (m)) (p)))) (((times) (((div) (n)) (p))) (p))) (((mod) (n)) (p))))) (((((((((((eq_f2) (nat)) (nat)) (nat)) (plus)) (((plus) (((plus) (((times) (((times) (((div) (n)) (p))) (p))) (((times) (((div) (m)) (p))) (p)))) (((times) (((times) (((div) (n)) (p))) (p))) (((mod) (m)) (p))))) (((times) (((mod) (n)) (p))) (((times) (((div) (m)) (p))) (p))))) (((times) (((plus) (((plus) (((times) (((times) (((div) (n)) (p))) (p))) (((div) (m)) (p)))) (((times) (((div) (n)) (p))) (((mod) (m)) (p))))) (((times) (((mod) (n)) (p))) (((div) (m)) (p))))) (p))) (((times) (((mod) (n)) (p))) (((mod) (m)) (p)))) (((times) (((mod) (n)) (p))) (((mod) (m)) (p)))) (((((((eq_ind) (nat)) (((times) (((times) (((times) (((div) (n)) (p))) (p))) (((div) (m)) (p)))) (p))) (\lambda x_1 : nat. (((eq) (nat)) (((plus) (((plus) (x_1)) (((times) (((times) (((div) (n)) (p))) (p))) (((mod) (m)) (p))))) (((times) (((mod) (n)) (p))) (((times) (((div) (m)) (p))) (p))))) (((times) (((plus) (((plus) (((times) (((times) (((div) (n)) (p))) (p))) (((div) (m)) (p)))) (((times) (((div) (n)) (p))) (((mod) (m)) (p))))) (((times) (((mod) (n)) (p))) (((div) (m)) (p))))) (p)))) (((((((eq_ind_r) (nat)) (((times) (((div) (n)) (p))) (((times) (p)) (((mod) (m)) (p))))) (\lambda x : nat. (((eq) (nat)) (((plus) (((plus) (((times) (((times) (((times) (((div) (n)) (p))) (p))) (((div) (m)) (p)))) (p))) (x))) (((times) (((mod) (n)) (p))) (((times) (((div) (m)) (p))) (p))))) (((times) (((plus) (((plus) (((times) (((times) (((div) (n)) (p))) (p))) (((div) (m)) (p)))) (((times) (((div) (n)) (p))) (((mod) (m)) (p))))) (((times) (((mod) (n)) (p))) (((div) (m)) (p))))) (p)))) (((((((eq_ind_r) (nat)) (((times) (((mod) (m)) (p))) (p))) (\lambda x : nat. (((eq) (nat)) (((plus) (((plus) (((times) (((times) (((times) (((div) (n)) (p))) (p))) (((div) (m)) (p)))) (p))) (((times) (((div) (n)) (p))) (x)))) (((times) (((mod) (n)) (p))) (((times) (((div) (m)) (p))) (p))))) (((times) (((plus) (((plus) (((times) (((times) (((div) (n)) (p))) (p))) (((div) (m)) (p)))) (((times) (((div) (n)) (p))) (((mod) (m)) (p))))) (((times) (((mod) (n)) (p))) (((div) (m)) (p))))) (p)))) (((((((eq_ind) (nat)) (((times) (((times) (((div) (n)) (p))) (((mod) (m)) (p)))) (p))) (\lambda x_1 : nat. (((eq) (nat)) (((plus) (((plus) (((times) (((times) (((times) (((div) (n)) (p))) (p))) (((div) (m)) (p)))) (p))) (x_1))) (((times) (((mod) (n)) (p))) (((times) (((div) (m)) (p))) (p))))) (((times) (((plus) (((plus) (((times) (((times) (((div) (n)) (p))) (p))) (((div) (m)) (p)))) (((times) (((div) (n)) (p))) (((mod) (m)) (p))))) (((times) (((mod) (n)) (p))) (((div) (m)) (p))))) (p)))) (((((((eq_ind_r) (nat)) (((plus) (((times) (((plus) (((times) (((times) (((div) (n)) (p))) (p))) (((div) (m)) (p)))) (((times) (((div) (n)) (p))) (((mod) (m)) (p))))) (p))) (((times) (((times) (((mod) (n)) (p))) (((div) (m)) (p)))) (p)))) (\lambda x : nat. (((eq) (nat)) (((plus) (((plus) (((times) (((times) (((times) (((div) (n)) (p))) (p))) (((div) (m)) (p)))) (p))) (((times) (((times) (((div) (n)) (p))) (((mod) (m)) (p)))) (p)))) (((times) (((mod) (n)) (p))) (((times) (((div) (m)) (p))) (p))))) (x))) (((((((rewrite_r) (nat)) (((times) (p)) (((div) (n)) (p)))) (\lambda Joker_ : nat. (((eq) (nat)) (((plus) (((plus) (((times) (((times) (Joker_)) (((div) (m)) (p)))) (p))) (((times) (((times) (((div) (n)) (p))) (((mod) (m)) (p)))) (p)))) (((times) (((mod) (n)) (p))) (((times) (((div) (m)) (p))) (p))))) (((plus) (((times) (((plus) (((times) (((times) (((div) (n)) (p))) (p))) (((div) (m)) (p)))) (((times) (((div) (n)) (p))) (((mod) (m)) (p))))) (p))) (((times) (((times) (((mod) (n)) (p))) (((div) (m)) (p)))) (p))))) (((((((rewrite_r) (nat)) (((times) (((div) (m)) (p))) (((times) (p)) (((div) (n)) (p))))) (\lambda Joker_ : nat. (((eq) (nat)) (((plus) (((plus) (((times) (Joker_)) (p))) (((times) (((times) (((div) (n)) (p))) (((mod) (m)) (p)))) (p)))) (((times) (((mod) (n)) (p))) (((times) (((div) (m)) (p))) (p))))) (((plus) (((times) (((plus) (((times) (((times) (((div) (n)) (p))) (p))) (((div) (m)) (p)))) (((times) (((div) (n)) (p))) (((mod) (m)) (p))))) (p))) (((times) (((times) (((mod) (n)) (p))) (((div) (m)) (p)))) (p))))) (((((((rewrite_r) (nat)) (((times) (p)) (((times) (((div) (m)) (p))) (((div) (n)) (p))))) (\lambda Joker_ : nat. (((eq) (nat)) (((plus) (((plus) (((times) (Joker_)) (p))) (((times) (((times) (((div) (n)) (p))) (((mod) (m)) (p)))) (p)))) (((times) (((mod) (n)) (p))) (((times) (((div) (m)) (p))) (p))))) (((plus) (((times) (((plus) (((times) (((times) (((div) (n)) (p))) (p))) (((div) (m)) (p)))) (((times) (((div) (n)) (p))) (((mod) (m)) (p))))) (p))) (((times) (((times) (((mod) (n)) (p))) (((div) (m)) (p)))) (p))))) (((((((rewrite_r) (nat)) (((times) (((div) (n)) (p))) (((div) (m)) (p)))) (\lambda Joker_ : nat. (((eq) (nat)) (((plus) (((plus) (((times) (((times) (p)) (Joker_))) (p))) (((times) (((times) (((div) (n)) (p))) (((mod) (m)) (p)))) (p)))) (((times) (((mod) (n)) (p))) (((times) (((div) (m)) (p))) (p))))) (((plus) (((times) (((plus) (((times) (((times) (((div) (n)) (p))) (p))) (((div) (m)) (p)))) (((times) (((div) (n)) (p))) (((mod) (m)) (p))))) (p))) (((times) (((times) (((mod) (n)) (p))) (((div) (m)) (p)))) (p))))) (((((((rewrite_r) (nat)) (((times) (p)) (((times) (p)) (((times) (((div) (n)) (p))) (((div) (m)) (p)))))) (\lambda Joker_ : nat. (((eq) (nat)) (((plus) (((plus) (Joker_)) (((times) (((times) (((div) (n)) (p))) (((mod) (m)) (p)))) (p)))) (((times) (((mod) (n)) (p))) (((times) (((div) (m)) (p))) (p))))) (((plus) (((times) (((plus) (((times) (((times) (((div) (n)) (p))) (p))) (((div) (m)) (p)))) (((times) (((div) (n)) (p))) (((mod) (m)) (p))))) (p))) (((times) (((times) (((mod) (n)) (p))) (((div) (m)) (p)))) (p))))) (((((((rewrite_r) (nat)) (((times) (p)) (((times) (((div) (n)) (p))) (((mod) (m)) (p))))) (\lambda Joker_ : nat. (((eq) (nat)) (((plus) (((plus) (((times) (p)) (((times) (p)) (((times) (((div) (n)) (p))) (((div) (m)) (p)))))) (Joker_))) (((times) (((mod) (n)) (p))) (((times) (((div) (m)) (p))) (p))))) (((plus) (((times) (((plus) (((times) (((times) (((div) (n)) (p))) (p))) (((div) (m)) (p)))) (((times) (((div) (n)) (p))) (((mod) (m)) (p))))) (p))) (((times) (((times) (((mod) (n)) (p))) (((div) (m)) (p)))) (p))))) (((((((rewrite_l) (nat)) (((times) (p)) (((plus) (((times) (p)) (((times) (((div) (n)) (p))) (((div) (m)) (p))))) (((times) (((div) (n)) (p))) (((mod) (m)) (p)))))) (\lambda Joker_ : nat. (((eq) (nat)) (((plus) (Joker_)) (((times) (((mod) (n)) (p))) (((times) (((div) (m)) (p))) (p))))) (((plus) (((times) (((plus) (((times) (((times) (((div) (n)) (p))) (p))) (((div) (m)) (p)))) (((times) (((div) (n)) (p))) (((mod) (m)) (p))))) (p))) (((times) (((times) (((mod) (n)) (p))) (((div) (m)) (p)))) (p))))) (((((((rewrite_r) (nat)) (((times) (p)) (((div) (m)) (p)))) (\lambda Joker_ : nat. (((eq) (nat)) (((plus) (((times) (p)) (((plus) (((times) (p)) (((times) (((div) (n)) (p))) (((div) (m)) (p))))) (((times) (((div) (n)) (p))) (((mod) (m)) (p)))))) (((times) (((mod) (n)) (p))) (Joker_)))) (((plus) (((times) (((plus) (((times) (((times) (((div) (n)) (p))) (p))) (((div) (m)) (p)))) (((times) (((div) (n)) (p))) (((mod) (m)) (p))))) (p))) (((times) (((times) (((mod) (n)) (p))) (((div) (m)) (p)))) (p))))) (((((((rewrite_r) (nat)) (((times) (p)) (((times) (((mod) (n)) (p))) (((div) (m)) (p))))) (\lambda Joker_ : nat. (((eq) (nat)) (((plus) (((times) (p)) (((plus) (((times) (p)) (((times) (((div) (n)) (p))) (((div) (m)) (p))))) (((times) (((div) (n)) (p))) (((mod) (m)) (p)))))) (Joker_))) (((plus) (((times) (((plus) (((times) (((times) (((div) (n)) (p))) (p))) (((div) (m)) (p)))) (((times) (((div) (n)) (p))) (((mod) (m)) (p))))) (p))) (((times) (((times) (((mod) (n)) (p))) (((div) (m)) (p)))) (p))))) (((((((rewrite_r) (nat)) (((times) (((div) (m)) (p))) (((mod) (n)) (p)))) (\lambda Joker_ : nat. (((eq) (nat)) (((plus) (((times) (p)) (((plus) (((times) (p)) (((times) (((div) (n)) (p))) (((div) (m)) (p))))) (((times) (((div) (n)) (p))) (((mod) (m)) (p)))))) (((times) (p)) (Joker_)))) (((plus) (((times) (((plus) (((times) (((times) (((div) (n)) (p))) (p))) (((div) (m)) (p)))) (((times) (((div) (n)) (p))) (((mod) (m)) (p))))) (p))) (((times) (((times) (((mod) (n)) (p))) (((div) (m)) (p)))) (p))))) (((((((rewrite_r) (nat)) (((plus) (((times) (p)) (((times) (((div) (m)) (p))) (((mod) (n)) (p))))) (((times) (p)) (((plus) (((times) (p)) (((times) (((div) (n)) (p))) (((div) (m)) (p))))) (((times) (((div) (n)) (p))) (((mod) (m)) (p))))))) (\lambda Joker_ : nat. (((eq) (nat)) (Joker_)) (((plus) (((times) (((plus) (((times) (((times) (((div) (n)) (p))) (p))) (((div) (m)) (p)))) (((times) (((div) (n)) (p))) (((mod) (m)) (p))))) (p))) (((times) (((times) (((mod) (n)) (p))) (((div) (m)) (p)))) (p))))) (((((((rewrite_l) (nat)) (((times) (p)) (((plus) (((times) (((div) (m)) (p))) (((mod) (n)) (p)))) (((plus) (((times) (p)) (((times) (((div) (n)) (p))) (((div) (m)) (p))))) (((times) (((div) (n)) (p))) (((mod) (m)) (p))))))) (\lambda Joker_ : nat. (((eq) (nat)) (Joker_)) (((plus) (((times) (((plus) (((times) (((times) (((div) (n)) (p))) (p))) (((div) (m)) (p)))) (((times) (((div) (n)) (p))) (((mod) (m)) (p))))) (p))) (((times) (((times) (((mod) (n)) (p))) (((div) (m)) (p)))) (p))))) (((((((rewrite_r) (nat)) (((plus) (((times) (p)) (((times) (((div) (n)) (p))) (((div) (m)) (p))))) (((plus) (((times) (((div) (m)) (p))) (((mod) (n)) (p)))) (((times) (((div) (n)) (p))) (((mod) (m)) (p)))))) (\lambda Joker_ : nat. (((eq) (nat)) (((times) (p)) (Joker_))) (((plus) (((times) (((plus) (((times) (((times) (((div) (n)) (p))) (p))) (((div) (m)) (p)))) (((times) (((div) (n)) (p))) (((mod) (m)) (p))))) (p))) (((times) (((times) (((mod) (n)) (p))) (((div) (m)) (p)))) (p))))) (((((((rewrite_r) (nat)) (((plus) (((times) (((div) (n)) (p))) (((mod) (m)) (p)))) (((times) (((div) (m)) (p))) (((mod) (n)) (p))))) (\lambda Joker_ : nat. (((eq) (nat)) (((times) (p)) (((plus) (((times) (p)) (((times) (((div) (n)) (p))) (((div) (m)) (p))))) (Joker_)))) (((plus) (((times) (((plus) (((times) (((times) (((div) (n)) (p))) (p))) (((div) (m)) (p)))) (((times) (((div) (n)) (p))) (((mod) (m)) (p))))) (p))) (((times) (((times) (((mod) (n)) (p))) (((div) (m)) (p)))) (p))))) (((((((rewrite_r) (nat)) (((times) (p)) (((div) (n)) (p)))) (\lambda Joker_ : nat. (((eq) (nat)) (((times) (p)) (((plus) (((times) (p)) (((times) (((div) (n)) (p))) (((div) (m)) (p))))) (((plus) (((times) (((div) (n)) (p))) (((mod) (m)) (p)))) (((times) (((div) (m)) (p))) (((mod) (n)) (p))))))) (((plus) (((times) (((plus) (((times) (Joker_)) (((div) (m)) (p)))) (((times) (((div) (n)) (p))) (((mod) (m)) (p))))) (p))) (((times) (((times) (((mod) (n)) (p))) (((div) (m)) (p)))) (p))))) (((((((rewrite_r) (nat)) (((times) (((div) (m)) (p))) (((times) (p)) (((div) (n)) (p))))) (\lambda Joker_ : nat. (((eq) (nat)) (((times) (p)) (((plus) (((times) (p)) (((times) (((div) (n)) (p))) (((div) (m)) (p))))) (((plus) (((times) (((div) (n)) (p))) (((mod) (m)) (p)))) (((times) (((div) (m)) (p))) (((mod) (n)) (p))))))) (((plus) (((times) (((plus) (Joker_)) (((times) (((div) (n)) (p))) (((mod) (m)) (p))))) (p))) (((times) (((times) (((mod) (n)) (p))) (((div) (m)) (p)))) (p))))) (((((((rewrite_r) (nat)) (((times) (p)) (((times) (((div) (m)) (p))) (((div) (n)) (p))))) (\lambda Joker_ : nat. (((eq) (nat)) (((times) (p)) (((plus) (((times) (p)) (((times) (((div) (n)) (p))) (((div) (m)) (p))))) (((plus) (((times) (((div) (n)) (p))) (((mod) (m)) (p)))) (((times) (((div) (m)) (p))) (((mod) (n)) (p))))))) (((plus) (((times) (((plus) (Joker_)) (((times) (((div) (n)) (p))) (((mod) (m)) (p))))) (p))) (((times) (((times) (((mod) (n)) (p))) (((div) (m)) (p)))) (p))))) (((((((rewrite_r) (nat)) (((times) (((div) (n)) (p))) (((div) (m)) (p)))) (\lambda Joker_ : nat. (((eq) (nat)) (((times) (p)) (((plus) (((times) (p)) (((times) (((div) (n)) (p))) (((div) (m)) (p))))) (((plus) (((times) (((div) (n)) (p))) (((mod) (m)) (p)))) (((times) (((div) (m)) (p))) (((mod) (n)) (p))))))) (((plus) (((times) (((plus) (((times) (p)) (Joker_))) (((times) (((div) (n)) (p))) (((mod) (m)) (p))))) (p))) (((times) (((times) (((mod) (n)) (p))) (((div) (m)) (p)))) (p))))) (((((((rewrite_r) (nat)) (((times) (p)) (((plus) (((times) (p)) (((times) (((div) (n)) (p))) (((div) (m)) (p))))) (((times) (((div) (n)) (p))) (((mod) (m)) (p)))))) (\lambda Joker_ : nat. (((eq) (nat)) (((times) (p)) (((plus) (((times) (p)) (((times) (((div) (n)) (p))) (((div) (m)) (p))))) (((plus) (((times) (((div) (n)) (p))) (((mod) (m)) (p)))) (((times) (((div) (m)) (p))) (((mod) (n)) (p))))))) (((plus) (Joker_)) (((times) (((times) (((mod) (n)) (p))) (((div) (m)) (p)))) (p))))) (((((((rewrite_r) (nat)) (((times) (((div) (m)) (p))) (((mod) (n)) (p)))) (\lambda Joker_ : nat. (((eq) (nat)) (((times) (p)) (((plus) (((times) (p)) (((times) (((div) (n)) (p))) (((div) (m)) (p))))) (((plus) (((times) (((div) (n)) (p))) (((mod) (m)) (p)))) (((times) (((div) (m)) (p))) (((mod) (n)) (p))))))) (((plus) (((times) (p)) (((plus) (((times) (p)) (((times) (((div) (n)) (p))) (((div) (m)) (p))))) (((times) (((div) (n)) (p))) (((mod) (m)) (p)))))) (((times) (Joker_)) (p))))) (((((((rewrite_r) (nat)) (((times) (p)) (((times) (((div) (m)) (p))) (((mod) (n)) (p))))) (\lambda Joker_ : nat. (((eq) (nat)) (((times) (p)) (((plus) (((times) (p)) (((times) (((div) (n)) (p))) (((div) (m)) (p))))) (((plus) (((times) (((div) (n)) (p))) (((mod) (m)) (p)))) (((times) (((div) (m)) (p))) (((mod) (n)) (p))))))) (((plus) (((times) (p)) (((plus) (((times) (p)) (((times) (((div) (n)) (p))) (((div) (m)) (p))))) (((times) (((div) (n)) (p))) (((mod) (m)) (p)))))) (Joker_)))) (((((((rewrite_r) (nat)) (((plus) (((times) (p)) (((times) (((div) (m)) (p))) (((mod) (n)) (p))))) (((times) (p)) (((plus) (((times) (p)) (((times) (((div) (n)) (p))) (((div) (m)) (p))))) (((times) (((div) (n)) (p))) (((mod) (m)) (p))))))) (\lambda Joker_ : nat. (((eq) (nat)) (((times) (p)) (((plus) (((times) (p)) (((times) (((div) (n)) (p))) (((div) (m)) (p))))) (((plus) (((times) (((div) (n)) (p))) (((mod) (m)) (p)))) (((times) (((div) (m)) (p))) (((mod) (n)) (p))))))) (Joker_))) (((((((rewrite_l) (nat)) (((times) (p)) (((plus) (((times) (((div) (m)) (p))) (((mod) (n)) (p)))) (((plus) (((times) (p)) (((times) (((div) (n)) (p))) (((div) (m)) (p))))) (((times) (((div) (n)) (p))) (((mod) (m)) (p))))))) (\lambda Joker_ : nat. (((eq) (nat)) (((times) (p)) (((plus) (((times) (p)) (((times) (((div) (n)) (p))) (((div) (m)) (p))))) (((plus) (((times) (((div) (n)) (p))) (((mod) (m)) (p)))) (((times) (((div) (m)) (p))) (((mod) (n)) (p))))))) (Joker_))) (((((((rewrite_r) (nat)) (((plus) (((times) (p)) (((times) (((div) (n)) (p))) (((div) (m)) (p))))) (((plus) (((times) (((div) (m)) (p))) (((mod) (n)) (p)))) (((times) (((div) (n)) (p))) (((mod) (m)) (p)))))) (\lambda Joker_ : nat. (((eq) (nat)) (((times) (p)) (((plus) (((times) (p)) (((times) (((div) (n)) (p))) (((div) (m)) (p))))) (((plus) (((times) (((div) (n)) (p))) (((mod) (m)) (p)))) (((times) (((div) (m)) (p))) (((mod) (n)) (p))))))) (((times) (p)) (Joker_)))) (((((((rewrite_r) (nat)) (((plus) (((times) (((div) (n)) (p))) (((mod) (m)) (p)))) (((times) (((div) (m)) (p))) (((mod) (n)) (p))))) (\lambda Joker_ : nat. (((eq) (nat)) (((times) (p)) (((plus) (((times) (p)) (((times) (((div) (n)) (p))) (((div) (m)) (p))))) (((plus) (((times) (((div) (n)) (p))) (((mod) (m)) (p)))) (((times) (((div) (m)) (p))) (((mod) (n)) (p))))))) (((times) (p)) (((plus) (((times) (p)) (((times) (((div) (n)) (p))) (((div) (m)) (p))))) (Joker_))))) (((refl) (nat)) (((times) (p)) (((plus) (((times) (p)) (((times) (((div) (n)) (p))) (((div) (m)) (p))))) (((plus) (((times) (((div) (n)) (p))) (((mod) (m)) (p)))) (((times) (((div) (m)) (p))) (((mod) (n)) (p)))))))) (((plus) (((times) (((div) (m)) (p))) (((mod) (n)) (p)))) (((times) (((div) (n)) (p))) (((mod) (m)) (p))))) (((commutative_plus) (((times) (((div) (m)) (p))) (((mod) (n)) (p)))) (((times) (((div) (n)) (p))) (((mod) (m)) (p)))))) (((plus) (((times) (((div) (m)) (p))) (((mod) (n)) (p)))) (((plus) (((times) (p)) (((times) (((div) (n)) (p))) (((div) (m)) (p))))) (((times) (((div) (n)) (p))) (((mod) (m)) (p)))))) ((((((((let_clause_73) (n)) (m)) (p)) (posp)) (((times) (((div) (m)) (p))) (((mod) (n)) (p)))) (((times) (p)) (((times) (((div) (n)) (p))) (((div) (m)) (p))))) (((times) (((div) (n)) (p))) (((mod) (m)) (p)))))) (((plus) (((times) (p)) (((times) (((div) (m)) (p))) (((mod) (n)) (p))))) (((times) (p)) (((plus) (((times) (p)) (((times) (((div) (n)) (p))) (((div) (m)) (p))))) (((times) (((div) (n)) (p))) (((mod) (m)) (p))))))) ((((distributive_times_plus) (p)) (((times) (((div) (m)) (p))) (((mod) (n)) (p)))) (((plus) (((times) (p)) (((times) (((div) (n)) (p))) (((div) (m)) (p))))) (((times) (((div) (n)) (p))) (((mod) (m)) (p))))))) (((plus) (((times) (p)) (((plus) (((times) (p)) (((times) (((div) (n)) (p))) (((div) (m)) (p))))) (((times) (((div) (n)) (p))) (((mod) (m)) (p)))))) (((times) (p)) (((times) (((div) (m)) (p))) (((mod) (n)) (p)))))) (((commutative_plus) (((times) (p)) (((plus) (((times) (p)) (((times) (((div) (n)) (p))) (((div) (m)) (p))))) (((times) (((div) (n)) (p))) (((mod) (m)) (p)))))) (((times) (p)) (((times) (((div) (m)) (p))) (((mod) (n)) (p))))))) (((times) (((times) (((div) (m)) (p))) (((mod) (n)) (p)))) (p))) (((commutative_times) (((times) (((div) (m)) (p))) (((mod) (n)) (p)))) (p)))) (((times) (((mod) (n)) (p))) (((div) (m)) (p)))) (((commutative_times) (((mod) (n)) (p))) (((div) (m)) (p))))) (((times) (((plus) (((times) (p)) (((times) (((div) (n)) (p))) (((div) (m)) (p))))) (((times) (((div) (n)) (p))) (((mod) (m)) (p))))) (p))) (((commutative_times) (((plus) (((times) (p)) (((times) (((div) (n)) (p))) (((div) (m)) (p))))) (((times) (((div) (n)) (p))) (((mod) (m)) (p))))) (p)))) (((times) (((div) (m)) (p))) (((div) (n)) (p)))) (((commutative_times) (((div) (m)) (p))) (((div) (n)) (p))))) (((times) (((div) (m)) (p))) (((times) (p)) (((div) (n)) (p))))) ((((times_times) (((div) (m)) (p))) (p)) (((div) (n)) (p))))) (((times) (((times) (p)) (((div) (n)) (p)))) (((div) (m)) (p)))) (((commutative_times) (((times) (p)) (((div) (n)) (p)))) (((div) (m)) (p))))) (((times) (((div) (n)) (p))) (p))) (((commutative_times) (((div) (n)) (p))) (p)))) (((plus) (((times) (((div) (m)) (p))) (((mod) (n)) (p)))) (((times) (((div) (n)) (p))) (((mod) (m)) (p))))) (((commutative_plus) (((times) (((div) (m)) (p))) (((mod) (n)) (p)))) (((times) (((div) (n)) (p))) (((mod) (m)) (p)))))) (((plus) (((times) (((div) (m)) (p))) (((mod) (n)) (p)))) (((plus) (((times) (p)) (((times) (((div) (n)) (p))) (((div) (m)) (p))))) (((times) (((div) (n)) (p))) (((mod) (m)) (p)))))) ((((((((let_clause_73) (n)) (m)) (p)) (posp)) (((times) (((div) (m)) (p))) (((mod) (n)) (p)))) (((times) (p)) (((times) (((div) (n)) (p))) (((div) (m)) (p))))) (((times) (((div) (n)) (p))) (((mod) (m)) (p)))))) (((plus) (((times) (p)) (((times) (((div) (m)) (p))) (((mod) (n)) (p))))) (((times) (p)) (((plus) (((times) (p)) (((times) (((div) (n)) (p))) (((div) (m)) (p))))) (((times) (((div) (n)) (p))) (((mod) (m)) (p))))))) ((((distributive_times_plus) (p)) (((times) (((div) (m)) (p))) (((mod) (n)) (p)))) (((plus) (((times) (p)) (((times) (((div) (n)) (p))) (((div) (m)) (p))))) (((times) (((div) (n)) (p))) (((mod) (m)) (p))))))) (((plus) (((times) (p)) (((plus) (((times) (p)) (((times) (((div) (n)) (p))) (((div) (m)) (p))))) (((times) (((div) (n)) (p))) (((mod) (m)) (p)))))) (((times) (p)) (((times) (((div) (m)) (p))) (((mod) (n)) (p)))))) (((commutative_plus) (((times) (p)) (((plus) (((times) (p)) (((times) (((div) (n)) (p))) (((div) (m)) (p))))) (((times) (((div) (n)) (p))) (((mod) (m)) (p)))))) (((times) (p)) (((times) (((div) (m)) (p))) (((mod) (n)) (p))))))) (((times) (((mod) (n)) (p))) (((div) (m)) (p)))) (((commutative_times) (((mod) (n)) (p))) (((div) (m)) (p))))) (((times) (((mod) (n)) (p))) (((times) (p)) (((div) (m)) (p))))) ((((times_times) (((mod) (n)) (p))) (p)) (((div) (m)) (p))))) (((times) (((div) (m)) (p))) (p))) (((commutative_times) (((div) (m)) (p))) (p)))) (((plus) (((times) (p)) (((times) (p)) (((times) (((div) (n)) (p))) (((div) (m)) (p)))))) (((times) (p)) (((times) (((div) (n)) (p))) (((mod) (m)) (p)))))) ((((distributive_times_plus) (p)) (((times) (p)) (((times) (((div) (n)) (p))) (((div) (m)) (p))))) (((times) (((div) (n)) (p))) (((mod) (m)) (p)))))) (((times) (((times) (((div) (n)) (p))) (((mod) (m)) (p)))) (p))) (((commutative_times) (((times) (((div) (n)) (p))) (((mod) (m)) (p)))) (p)))) (((times) (((times) (p)) (((times) (((div) (n)) (p))) (((div) (m)) (p))))) (p))) (((commutative_times) (((times) (p)) (((times) (((div) (n)) (p))) (((div) (m)) (p))))) (p)))) (((times) (((div) (m)) (p))) (((div) (n)) (p)))) (((commutative_times) (((div) (m)) (p))) (((div) (n)) (p))))) (((times) (((div) (m)) (p))) (((times) (p)) (((div) (n)) (p))))) ((((times_times) (((div) (m)) (p))) (p)) (((div) (n)) (p))))) (((times) (((times) (p)) (((div) (n)) (p)))) (((div) (m)) (p)))) (((commutative_times) (((times) (p)) (((div) (n)) (p)))) (((div) (m)) (p))))) (((times) (((div) (n)) (p))) (p))) (((commutative_times) (((div) (n)) (p))) (p)))) (((times) (((plus) (((plus) (((times) (((times) (((div) (n)) (p))) (p))) (((div) (m)) (p)))) (((times) (((div) (n)) (p))) (((mod) (m)) (p))))) (((times) (((mod) (n)) (p))) (((div) (m)) (p))))) (p))) ((((distributive_times_plus_r) (p)) (((plus) (((times) (((times) (((div) (n)) (p))) (p))) (((div) (m)) (p)))) (((times) (((div) (n)) (p))) (((mod) (m)) (p))))) (((times) (((mod) (n)) (p))) (((div) (m)) (p)))))) (((times) (((div) (n)) (p))) (((times) (((mod) (m)) (p))) (p)))) ((((associative_times) (((div) (n)) (p))) (((mod) (m)) (p))) (p)))) (((times) (p)) (((mod) (m)) (p)))) (((commutative_times) (p)) (((mod) (m)) (p))))) (((times) (((times) (((div) (n)) (p))) (p))) (((mod) (m)) (p)))) ((((associative_times) (((div) (n)) (p))) (p)) (((mod) (m)) (p))))) (((times) (((times) (((div) (n)) (p))) (p))) (((times) (((div) (m)) (p))) (p)))) ((((associative_times) (((times) (((div) (n)) (p))) (p))) (((div) (m)) (p))) (p)))) (((refl) (nat)) (((times) (((mod) (n)) (p))) (((mod) (m)) (p))))))).
definition congruent_times : \forall n : nat. \forall m : nat. \forall n1 : nat. \forall m1 : nat. \forall p : nat. (((lt) (O)) (p)) \to ((((congruent) (n)) (n1)) (p)) \to ((((congruent) (m)) (m1)) (p)) \to (((congruent) (((times) (n)) (m))) (((times) (n1)) (m1))) (p) := \lambda n : nat. \lambda m : nat. \lambda n1 : nat. \lambda m1 : nat. \lambda p : nat. \lambda posp : ((lt) (O)) (p). \lambda Hcongn : (((congruent) (n)) (n1)) (p). \lambda Hcongm : (((congruent) (m)) (m1)) (p). ((((((eq_ind_r) (nat)) (((mod) (((times) (((mod) (n)) (p))) (((mod) (m)) (p)))) (p))) (\lambda x : nat. (((eq) (nat)) (x)) (((mod) (((times) (n1)) (m1))) (p)))) (((((((eq_ind_r) (nat)) (((mod) (n1)) (p))) (\lambda x : nat. (((eq) (nat)) (((mod) (((times) (x)) (((mod) (m)) (p)))) (p))) (((mod) (((times) (n1)) (m1))) (p)))) (((((((eq_ind_r) (nat)) (((mod) (m1)) (p))) (\lambda x : nat. (((eq) (nat)) (((mod) (((times) (((mod) (n1)) (p))) (x))) (p))) (((mod) (((times) (n1)) (m1))) (p)))) (((((sym_eq) (nat)) (((mod) (((times) (n1)) (m1))) (p))) (((mod) (((times) (((mod) (n1)) (p))) (((mod) (m1)) (p)))) (p))) (((((mod_times) (n1)) (m1)) (p)) (posp)))) (((mod) (m)) (p))) (Hcongm))) (((mod) (n)) (p))) (Hcongn))) (((mod) (((times) (n)) (m))) (p))) (((((mod_times) (n)) (m)) (p)) (posp)).
axiom fact : (nat) \to nat.
axiom fact_body : (nat) \to nat.
axiom eq_fact : \forall n : nat. (((leibniz) (nat)) ((fact) (n))) ((((filter_nat_type) (nat)) (fact_body)) (n)).
definition sym_eq_fact : \forall n : nat. (((leibniz) (nat)) ((((filter_nat_type) (nat)) (fact_body)) (n))) ((fact) (n)) := \lambda n : nat. ((((sym_leibniz) (nat)) ((fact) (n))) ((((filter_nat_type) (nat)) (fact_body)) (n))) ((eq_fact) (n)).
axiom eq_fact_body_O : (((leibniz) (nat)) ((fact_body) (O))) ((S) (O)).
definition sym_eq_fact_body_O : (((leibniz) (nat)) ((S) (O))) ((fact_body) (O)) := ((((sym_leibniz) (nat)) ((fact_body) (O))) ((S) (O))) (eq_fact_body_O).
axiom eq_fact_body_S : \forall n : nat. (((leibniz) (nat)) ((fact_body) ((S) (n)))) (((times) ((fact) (n))) ((S) (n))).
definition sym_eq_fact_body_S : \forall n : nat. (((leibniz) (nat)) (((times) ((fact) (n))) ((S) (n)))) ((fact_body) ((S) (n))) := \lambda n : nat. ((((sym_leibniz) (nat)) ((fact_body) ((S) (n)))) (((times) ((fact) (n))) ((S) (n)))) ((eq_fact_body_S) (n)).
definition prime_to_not_divides_fact : \forall p : nat. ((prime) (p)) \to \forall n : nat. (((lt) (n)) (p)) \to (Not) (((divides) (p)) ((fact) (n))) := \lambda p : nat. \lambda primep : (prime) (p). \lambda n : nat. ((((nat_ind) (\lambda Jokerx_365 : nat. (((lt) (Jokerx_365)) (p)) \to (Not) (((divides) (p)) ((fact) (Jokerx_365))))) ((((sym_eq_fact) (O)) (\lambda y : nat. (((lt) (O)) (p)) \to (Not) (((divides) (p)) (y)))) (((((sym_eq_filter_nat_type_O) (nat)) (fact_body)) (\lambda y : nat. (((lt) (O)) (p)) \to (Not) (((divides) (p)) (y)))) (((sym_eq_fact_body_O) (\lambda y : nat. (((lt) (O)) (p)) \to (Not) (((divides) (p)) (y)))) (\lambda Joker_ : ((le) ((S) (O))) (p). \lambda divp : ((divides) (p)) ((S) (O)). (((absurd) (((le) (p)) ((S) (O)))) (((((divides_to_le) (p)) ((S) (O))) ((lt_O_S) (O))) (divp))) ((((lt_to_not_le) ((S) (O))) (p)) (((prime_to_lt_SO) (p)) (primep)))))))) (\lambda n1 : nat. (((sym_eq_fact) ((S) (n1))) (\lambda y : nat. ((((lt) (n1)) (p)) \to (Not) (((divides) (p)) ((fact) (n1)))) \to (((lt) ((S) (n1))) (p)) \to (Not) (((divides) (p)) (y)))) ((((((sym_eq_filter_nat_type_S) (nat)) (fact_body)) (n1)) (\lambda y : nat. ((((lt) (n1)) (p)) \to (Not) (((divides) (p)) ((fact) (n1)))) \to (((lt) ((S) (n1))) (p)) \to (Not) (((divides) (p)) (y)))) ((((sym_eq_fact_body_S) (n1)) (\lambda y : nat. ((((lt) (n1)) (p)) \to (Not) (((divides) (p)) ((fact) (n1)))) \to (((lt) ((S) (n1))) (p)) \to (Not) (((divides) (p)) (y)))) (\lambda Hind : (((lt) (n1)) (p)) \to (Not) (((divides) (p)) ((fact) (n1))). \lambda ltn1 : ((lt) ((S) (n1))) (p). \lambda Hdiv : ((divides) (p)) (((times) ((fact) (n1))) ((S) (n1))). ((((((match_Or_prop) (((divides) (p)) ((fact) (n1)))) (((divides) (p)) ((S) (n1)))) (False)) (\lambda Hdiv0 : ((divides) (p)) ((fact) (n1)). (((absurd) (((divides) (p)) ((fact) (n1)))) (Hdiv0)) ((Hind) ((((lt_to_le) ((S) (n1))) (p)) (ltn1))))) (\lambda Hdiv0 : ((divides) (p)) ((S) (n1)). (((absurd) (((le) (p)) ((S) (n1)))) (((((divides_to_le) (p)) ((S) (n1))) ((lt_O_S) (n1))) (Hdiv0))) ((((lt_to_not_le) ((S) (n1))) (p)) (ltn1)))) ((((((divides_times_to_divides) (p)) ((fact) (n1))) ((S) (n1))) (primep)) (Hdiv))))))) (n).
definition permut_mod : \forall p : nat. \forall a : nat. ((prime) (p)) \to ((Not) (((divides) (p)) (a))) \to ((permut) (\lambda n : nat. ((mod) (((times) (a)) (n))) (p))) ((pred) (p)) := \lambda p : nat. \lambda a : nat. \lambda primep : (prime) (p). \lambda ndiv : (Not) (((divides) (p)) (a)). \lambda z : Prop. \lambda f : (\forall x : nat. (((le) (x)) ((pred) (p))) \to ((le) (((mod) (((times) (a)) (x))) (p))) ((pred) (p))) \to (((injn) (\lambda n : nat. ((mod) (((times) (a)) (n))) (p))) ((pred) (p))) \to z. ((f) (\lambda i : nat. \lambda lei : ((le) (i)) ((pred) (p)). (((le_S_S_to_le) (((mod) (((times) (a)) (i))) (p))) ((pred) (p))) ((((((transitive_le) ((S) (((mod) (((times) (a)) (i))) (p)))) (p)) ((S) ((pred) (p)))) ((((lt_mod_m_m) (((times) (a)) (i))) (p)) (((prime_to_lt_O) (p)) (primep)))) (((((((eq_ind_r) (nat)) (p)) (\lambda x : nat. ((le) (p)) (x))) ((le_n) (p))) ((S) ((pred) (p)))) (((S_pred) (p)) (((prime_to_lt_O) (p)) (primep))))))) (\lambda i : nat. \lambda j : nat. \lambda lei : ((le) (i)) ((pred) (p)). \lambda lej : ((le) (j)) ((pred) (p)). \lambda H : (((eq) (nat)) (((mod) (((times) (a)) (i))) (p))) (((mod) (((times) (a)) (j))) (p)). ((((((match_Or_prop) (((lt) (i)) (j))) ((Not) (((lt) (i)) (j)))) ((((eq) (nat)) (i)) (j))) (\lambda ltij : ((lt) (i)) (j). ((falsity) ((((eq) (nat)) (i)) (j))) ((((absurd) (((lt) (((minus) (j)) (i))) (p))) (((((((eq_ind) (nat)) ((S) ((pred) (p)))) (\lambda x_1 : nat. ((lt) (((minus) (j)) (i))) (x_1))) ((((le_S_S) (((minus) (j)) (i))) ((pred) (p))) (((((le_plus_to_minus) (j)) (i)) ((pred) (p))) ((((((transitive_le) (j)) ((pred) (p))) (((plus) ((pred) (p))) (i))) (lej)) (((le_plus_n_r) (i)) ((pred) (p))))))) (p)) (((S_pred) (p)) (((prime_to_lt_O) (p)) (primep))))) ((((le_to_not_lt) (p)) (((minus) (j)) (i))) (((((divides_to_le) (p)) (((minus) (j)) (i))) (((((lt_plus_to_minus_r) (O)) (i)) (j)) ((((sym_eq_plus) (O)) (\lambda y : (nat) \to nat. ((le) ((S) ((y) (i)))) (j))) (((((sym_eq_filter_nat_type_O) ((nat) \to nat)) (plus_body)) (\lambda y : (nat) \to nat. ((le) ((S) ((y) (i)))) (j))) (((sym_eq_plus_body_O) (\lambda y : (nat) \to nat. ((le) ((S) ((y) (i)))) (j))) (ltij)))))) (((((((match_Or_prop) (((divides) (p)) (a))) (((divides) (p)) (((minus) (j)) (i)))) (((divides) (p)) (((minus) (j)) (i)))) (\lambda Hdiv : ((divides) (p)) (a). ((falsity) (((divides) (p)) (((minus) (j)) (i)))) ((((absurd) (((divides) (p)) (a))) (Hdiv)) (ndiv)))) (\lambda auto : ((divides) (p)) (((minus) (j)) (i)). auto)) ((((((divides_times_to_divides) (p)) (a)) (((minus) (j)) (i))) (primep)) (((((((eq_ind_r) (nat)) (((minus) (((times) (a)) (j))) (((times) (a)) (i)))) (\lambda x : nat. ((divides) (p)) (x))) ((((((eq_mod_to_divides) (((times) (a)) (j))) (((times) (a)) (i))) (p)) (((prime_to_lt_O) (p)) (primep))) (((((((rewrite_l) (nat)) (((mod) (((times) (a)) (i))) (p))) (\lambda Joker_ : nat. (((eq) (nat)) (Joker_)) (((mod) (((times) (a)) (i))) (p)))) (((refl) (nat)) (((mod) (((times) (a)) (i))) (p)))) (((mod) (((times) (a)) (j))) (p))) (H)))) (((times) (a)) (((minus) (j)) (i)))) ((((distributive_times_minus) (a)) (j)) (i)))))))))) (\lambda Hij : (Not) (((lt) (i)) (j)). ((((((match_Or_prop) (((lt) (j)) (i))) ((((eq) (nat)) (j)) (i))) ((((eq) (nat)) (i)) (j))) (\lambda Hij0 : ((lt) (j)) (i). ((falsity) ((((eq) (nat)) (i)) (j))) ((((absurd) (((lt) (((minus) (i)) (j))) (p))) (((((((eq_ind) (nat)) ((S) ((pred) (p)))) (\lambda x_1 : nat. ((lt) (((minus) (i)) (j))) (x_1))) ((((le_S_S) (((minus) (i)) (j))) ((pred) (p))) (((((le_plus_to_minus) (i)) (j)) ((pred) (p))) ((((((transitive_le) (i)) ((pred) (p))) (((plus) ((pred) (p))) (j))) (lei)) (((le_plus_n_r) (j)) ((pred) (p))))))) (p)) (((S_pred) (p)) (((prime_to_lt_O) (p)) (primep))))) ((((le_to_not_lt) (p)) (((minus) (i)) (j))) (((((divides_to_le) (p)) (((minus) (i)) (j))) (((((lt_plus_to_minus_r) (O)) (j)) (i)) ((((sym_eq_plus) (O)) (\lambda y : (nat) \to nat. ((le) ((S) ((y) (j)))) (i))) (((((sym_eq_filter_nat_type_O) ((nat) \to nat)) (plus_body)) (\lambda y : (nat) \to nat. ((le) ((S) ((y) (j)))) (i))) (((sym_eq_plus_body_O) (\lambda y : (nat) \to nat. ((le) ((S) ((y) (j)))) (i))) (Hij0)))))) (((((((match_Or_prop) (((divides) (p)) (a))) (((divides) (p)) (((minus) (i)) (j)))) (((divides) (p)) (((minus) (i)) (j)))) (\lambda Hdiv : ((divides) (p)) (a). ((falsity) (((divides) (p)) (((minus) (i)) (j)))) ((((absurd) (((divides) (p)) (a))) (Hdiv)) (ndiv)))) (\lambda auto : ((divides) (p)) (((minus) (i)) (j)). auto)) ((((((divides_times_to_divides) (p)) (a)) (((minus) (i)) (j))) (primep)) (((((((eq_ind_r) (nat)) (((minus) (((times) (a)) (i))) (((times) (a)) (j)))) (\lambda x : nat. ((divides) (p)) (x))) ((((((eq_mod_to_divides) (((times) (a)) (i))) (((times) (a)) (j))) (p)) (((prime_to_lt_O) (p)) (primep))) (((((((rewrite_l) (nat)) (((mod) (((times) (a)) (i))) (p))) (\lambda Joker_ : nat. (((eq) (nat)) (((mod) (((times) (a)) (i))) (p))) (Joker_))) (((refl) (nat)) (((mod) (((times) (a)) (i))) (p)))) (((mod) (((times) (a)) (j))) (p))) (H)))) (((times) (a)) (((minus) (i)) (j)))) ((((distributive_times_minus) (a)) (i)) (j)))))))))) (\lambda Hij0 : (((eq) (nat)) (j)) (i). ((((((rewrite_r) (nat)) (i)) (\lambda Joker_ : nat. (((eq) (nat)) (i)) (Joker_))) (((refl) (nat)) (i))) (j)) (Hij0))) ((((le_to_or_lt_eq) (j)) (i)) ((((not_lt_to_le) (i)) (j)) (Hij))))) (((decidable_lt) (i)) (j))).
definition eq_fact_pi_p : \forall n : nat. (((eq) (nat)) ((fact) (n))) (((((((bigop) (nat)) (((minus) ((S) (n))) ((S) (O)))) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. ((plus) (i)) ((S) (O)))) := \lambda n : nat. ((((nat_ind) (\lambda Jokerx_365 : nat. (((eq) (nat)) ((fact) (Jokerx_365))) (((((((bigop) (nat)) (((minus) ((S) (Jokerx_365))) ((S) (O)))) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. ((plus) (i)) ((S) (O)))))) ((((sym_eq_minus) ((S) (O))) (\lambda y : (nat) \to nat. (((eq) (nat)) ((fact) (O))) (((((((bigop) (nat)) ((y) ((S) (O)))) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. ((plus) (i)) ((S) (O)))))) ((((((sym_eq_filter_nat_type_S) ((nat) \to nat)) (minus_body)) (O)) (\lambda y : (nat) \to nat. (((eq) (nat)) ((fact) (O))) (((((((bigop) (nat)) ((y) ((S) (O)))) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. ((plus) (i)) ((S) (O)))))) ((((sym_eq_minus_body_S) (O)) (\lambda y : (nat) \to nat. (((eq) (nat)) ((fact) (O))) (((((((bigop) (nat)) ((y) ((S) (O)))) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. ((plus) (i)) ((S) (O)))))) (((((((sym_eq_match_nat_type_S) (nat)) ((S) (O))) (\lambda q : nat. ((minus) (O)) (q))) (O)) (\lambda y : nat. (((eq) (nat)) ((fact) (O))) (((((((bigop) (nat)) (y)) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. ((plus) (i)) ((S) (O)))))) ((((sym_eq_minus) (O)) (\lambda y : (nat) \to nat. (((eq) (nat)) ((fact) (O))) (((((((bigop) (nat)) ((y) (O))) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. ((plus) (i)) ((S) (O)))))) (((((sym_eq_filter_nat_type_O) ((nat) \to nat)) (minus_body)) (\lambda y : (nat) \to nat. (((eq) (nat)) ((fact) (O))) (((((((bigop) (nat)) ((y) (O))) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. ((plus) (i)) ((S) (O)))))) (((sym_eq_minus_body_O) (\lambda y : (nat) \to nat. (((eq) (nat)) ((fact) (O))) (((((((bigop) (nat)) ((y) (O))) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. ((plus) (i)) ((S) (O)))))) ((((sym_eq_bigop_O) (nat)) (\lambda y : ((nat) \to bool) \to (nat) \to ((nat) \to (nat) \to nat) \to ((nat) \to nat) \to nat. (((eq) (nat)) ((fact) (O))) (((((y) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. ((plus) (i)) ((S) (O)))))) ((((sym_eq_bigop_body_O) (nat)) (\lambda y : ((nat) \to bool) \to (nat) \to ((nat) \to (nat) \to nat) \to ((nat) \to nat) \to nat. (((eq) (nat)) ((fact) (O))) (((((y) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. ((plus) (i)) ((S) (O)))))) (((eq_fact_body_O) (\lambda y : nat. (((eq) (nat)) ((fact) (O))) (y))) (((((eq_filter_nat_type_O) (nat)) (fact_body)) (\lambda y : nat. (((eq) (nat)) ((fact) (O))) (y))) ((((eq_fact) (O)) (\lambda y : nat. (((eq) (nat)) ((fact) (O))) (y))) (((refl) (nat)) ((fact) (O)))))))))))))))) (\lambda n1 : nat. (((sym_eq_fact) ((S) (n1))) (\lambda y : nat. ((((eq) (nat)) ((fact) (n1))) (((((((bigop) (nat)) (((minus) ((S) (n1))) ((S) (O)))) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. ((plus) (i)) ((S) (O))))) \to (((eq) (nat)) (y)) (((((((bigop) (nat)) (((minus) ((S) ((S) (n1)))) ((S) (O)))) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. ((plus) (i)) ((S) (O)))))) ((((((sym_eq_filter_nat_type_S) (nat)) (fact_body)) (n1)) (\lambda y : nat. ((((eq) (nat)) ((fact) (n1))) (((((((bigop) (nat)) (((minus) ((S) (n1))) ((S) (O)))) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. ((plus) (i)) ((S) (O))))) \to (((eq) (nat)) (y)) (((((((bigop) (nat)) (((minus) ((S) ((S) (n1)))) ((S) (O)))) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. ((plus) (i)) ((S) (O)))))) ((((sym_eq_fact_body_S) (n1)) (\lambda y : nat. ((((eq) (nat)) ((fact) (n1))) (((((((bigop) (nat)) (((minus) ((S) (n1))) ((S) (O)))) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. ((plus) (i)) ((S) (O))))) \to (((eq) (nat)) (y)) (((((((bigop) (nat)) (((minus) ((S) ((S) (n1)))) ((S) (O)))) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. ((plus) (i)) ((S) (O)))))) (\lambda Hind : (((eq) (nat)) ((fact) (n1))) (((((((bigop) (nat)) (((minus) ((S) (n1))) ((S) (O)))) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. ((plus) (i)) ((S) (O)))). ((((((eq_ind_r) (nat)) (((times) ((S) (n1))) ((fact) (n1)))) (\lambda x : nat. (((eq) (nat)) (x)) (((((((bigop) (nat)) (((minus) ((S) ((S) (n1)))) ((S) (O)))) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. ((plus) (i)) ((S) (O)))))) ((((sym_eq_minus) ((S) ((S) (n1)))) (\lambda y : (nat) \to nat. (((eq) (nat)) (((times) ((S) (n1))) ((fact) (n1)))) (((((((bigop) (nat)) ((y) ((S) (O)))) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. ((plus) (i)) ((S) (O)))))) ((((((sym_eq_filter_nat_type_S) ((nat) \to nat)) (minus_body)) ((S) (n1))) (\lambda y : (nat) \to nat. (((eq) (nat)) (((times) ((S) (n1))) ((fact) (n1)))) (((((((bigop) (nat)) ((y) ((S) (O)))) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. ((plus) (i)) ((S) (O)))))) ((((sym_eq_minus_body_S) ((S) (n1))) (\lambda y : (nat) \to nat. (((eq) (nat)) (((times) ((S) (n1))) ((fact) (n1)))) (((((((bigop) (nat)) ((y) ((S) (O)))) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. ((plus) (i)) ((S) (O)))))) (((((((sym_eq_match_nat_type_S) (nat)) ((S) ((S) (n1)))) (\lambda q : nat. ((minus) ((S) (n1))) (q))) (O)) (\lambda y : nat. (((eq) (nat)) (((times) ((S) (n1))) ((fact) (n1)))) (((((((bigop) (nat)) (y)) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. ((plus) (i)) ((S) (O)))))) ((((sym_eq_minus) ((S) (n1))) (\lambda y : (nat) \to nat. (((eq) (nat)) (((times) ((S) (n1))) ((fact) (n1)))) (((((((bigop) (nat)) ((y) (O))) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. ((plus) (i)) ((S) (O)))))) ((((((sym_eq_filter_nat_type_S) ((nat) \to nat)) (minus_body)) (n1)) (\lambda y : (nat) \to nat. (((eq) (nat)) (((times) ((S) (n1))) ((fact) (n1)))) (((((((bigop) (nat)) ((y) (O))) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. ((plus) (i)) ((S) (O)))))) ((((sym_eq_minus_body_S) (n1)) (\lambda y : (nat) \to nat. (((eq) (nat)) (((times) ((S) (n1))) ((fact) (n1)))) (((((((bigop) (nat)) ((y) (O))) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. ((plus) (i)) ((S) (O)))))) ((((((sym_eq_match_nat_type_O) (nat)) ((S) (n1))) (\lambda q : nat. ((minus) (n1)) (q))) (\lambda y : nat. (((eq) (nat)) (((times) ((S) (n1))) ((fact) (n1)))) (((((((bigop) (nat)) (y)) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. ((plus) (i)) ((S) (O)))))) (((((((eq_ind_r) (nat)) (((times) (((plus) (n1)) ((S) (O)))) (((((((bigop) (nat)) (n1)) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. ((plus) (i)) ((S) (O)))))) (\lambda x : nat. (((eq) (nat)) (((times) ((S) (n1))) ((fact) (n1)))) (x))) (((((((eq_ind) (nat)) ((S) (((plus) (n1)) (O)))) (\lambda x_1 : nat. (((eq) (nat)) (((times) ((S) (n1))) ((fact) (n1)))) (((times) (x_1)) (((((((bigop) (nat)) (n1)) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. ((plus) (i)) ((S) (O))))))) (((((((eq_ind) (nat)) (n1)) (\lambda x_1 : nat. (((eq) (nat)) (((times) ((S) (n1))) ((fact) (n1)))) (((times) ((S) (x_1))) (((((((bigop) (nat)) (n1)) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. ((plus) (i)) ((S) (O))))))) (((((((eq_f) (nat)) (nat)) ((times) ((S) (n1)))) ((fact) (n1))) (((((((bigop) (nat)) (n1)) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. ((plus) (i)) ((S) (O))))) (((((((eq_ind) (nat)) (((minus) ((S) (n1))) ((S) (O)))) (\lambda x_1 : nat. (((eq) (nat)) ((fact) (n1))) (((((((bigop) (nat)) (x_1)) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. ((plus) (i)) ((S) (O)))))) (Hind)) (n1)) ((((sym_eq_minus) ((S) (n1))) (\lambda y : (nat) \to nat. (((eq) (nat)) ((y) ((S) (O)))) (n1))) ((((((sym_eq_filter_nat_type_S) ((nat) \to nat)) (minus_body)) (n1)) (\lambda y : (nat) \to nat. (((eq) (nat)) ((y) ((S) (O)))) (n1))) ((((sym_eq_minus_body_S) (n1)) (\lambda y : (nat) \to nat. (((eq) (nat)) ((y) ((S) (O)))) (n1))) (((((((sym_eq_match_nat_type_S) (nat)) ((S) (n1))) (\lambda q : nat. ((minus) (n1)) (q))) (O)) (\lambda y : nat. (((eq) (nat)) (y)) (n1))) (((((((rewrite_l) (nat)) (n1)) (\lambda Joker_ : nat. (((eq) (nat)) (Joker_)) (n1))) (((refl) (nat)) (n1))) (((minus) (n1)) (O))) ((minus_n_O) (n1)))))))))) (((plus) (n1)) (O))) ((plus_n_O) (n1)))) (((plus) (n1)) ((S) (O)))) (((plus_n_Sm) (n1)) (O)))) (((((((bigop) (nat)) ((S) (n1))) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. ((plus) (i)) ((S) (O))))) ((((((((bigop_Strue) (nat)) (n1)) (\lambda Joker_ : nat. true)) ((S) (O))) (times)) (\lambda Joker_ : nat. ((plus) (Joker_)) ((S) (O)))) (((refl) (bool)) (true))))))))))))) (((times) ((fact) (n1))) ((S) (n1)))) (((commutative_times) ((fact) (n1))) ((S) (n1)))))))) (n).
definition congruent_pi : \forall f : (nat) \to nat. \forall n : nat. \forall p : nat. (((lt) (O)) (p)) \to (((congruent) (((((((bigop) (nat)) (n)) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. (f) (i)))) (((((((bigop) (nat)) (n)) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. ((mod) ((f) (i))) (p)))) (p) := \lambda f : (nat) \to nat. \lambda n : nat. ((((nat_ind) (\lambda Jokerx_365 : nat. \forall p : nat. (((lt) (O)) (p)) \to (((congruent) (((((((bigop) (nat)) (Jokerx_365)) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. (f) (i)))) (((((((bigop) (nat)) (Jokerx_365)) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. ((mod) ((f) (i))) (p)))) (p))) (\lambda p : nat. (((sym_eq_bigop_O) (nat)) (\lambda y : ((nat) \to bool) \to (nat) \to ((nat) \to (nat) \to nat) \to ((nat) \to nat) \to nat. (((lt) (O)) (p)) \to (((congruent) (((((((bigop) (nat)) (O)) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. (f) (i)))) (((((y) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. ((mod) ((f) (i))) (p)))) (p))) ((((sym_eq_bigop_body_O) (nat)) (\lambda y : ((nat) \to bool) \to (nat) \to ((nat) \to (nat) \to nat) \to ((nat) \to nat) \to nat. (((lt) (O)) (p)) \to (((congruent) (((((((bigop) (nat)) (O)) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. (f) (i)))) (((((y) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. ((mod) ((f) (i))) (p)))) (p))) ((((eq_bigop_body_O) (nat)) (\lambda y : ((nat) \to bool) \to (nat) \to ((nat) \to (nat) \to nat) \to ((nat) \to nat) \to nat. (((lt) (O)) (p)) \to (((congruent) (((((((bigop) (nat)) (O)) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. (f) (i)))) (((((y) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. (f) (i)))) (p))) ((((eq_bigop_O) (nat)) (\lambda y : ((nat) \to bool) \to (nat) \to ((nat) \to (nat) \to nat) \to ((nat) \to nat) \to nat. (((lt) (O)) (p)) \to (((congruent) (((((((bigop) (nat)) (O)) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. (f) (i)))) (((((y) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. (f) (i)))) (p))) (\lambda auto : ((lt) (O)) (p). ((congruent_n_n) (((((((bigop) (nat)) (O)) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. (f) (i)))) (p))))))) (\lambda n1 : nat. \lambda Hind : \forall p : nat. (((lt) (O)) (p)) \to (((congruent) (((((((bigop) (nat)) (n1)) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. (f) (i)))) (((((((bigop) (nat)) (n1)) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. ((mod) ((f) (i))) (p)))) (p). \lambda p : nat. \lambda posp : ((lt) (O)) (p). ((((((eq_ind_r) (nat)) (((times) ((f) (n1))) (((((((bigop) (nat)) (n1)) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. (f) (i))))) (\lambda x : nat. (((congruent) (x)) (((((((bigop) (nat)) ((S) (n1))) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. ((mod) ((f) (i))) (p)))) (p))) (((((sym_eq_bigop_S) (nat)) (n1)) (\lambda y : ((nat) \to bool) \to (nat) \to ((nat) \to (nat) \to nat) \to ((nat) \to nat) \to nat. (((congruent) (((times) ((f) (n1))) (((((((bigop) (nat)) (n1)) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. (f) (i))))) (((((y) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. ((mod) ((f) (i))) (p)))) (p))) (((((sym_eq_bigop_body_S) (nat)) (n1)) (\lambda y : ((nat) \to bool) \to (nat) \to ((nat) \to (nat) \to nat) \to ((nat) \to nat) \to nat. (((congruent) (((times) ((f) (n1))) (((((((bigop) (nat)) (n1)) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. (f) (i))))) (((((y) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. ((mod) ((f) (i))) (p)))) (p))) ((((((sym_eq_match_bool_type_true) (nat)) (((times) (((mod) ((f) (n1))) (p))) (((((((bigop) (nat)) (n1)) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. ((mod) ((f) (i))) (p))))) (((((((bigop) (nat)) (n1)) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. ((mod) ((f) (i))) (p)))) (\lambda y : nat. (((congruent) (((times) ((f) (n1))) (((((((bigop) (nat)) (n1)) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. (f) (i))))) (y)) (p))) (((((((((congruent_times) ((f) (n1))) (((((((bigop) (nat)) (n1)) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. (f) (i)))) (((mod) ((f) (n1))) (p))) (((((((bigop) (nat)) (n1)) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. ((mod) ((f) (i))) (p)))) (p)) (posp)) ((((congruent_n_mod_n) ((f) (n1))) (p)) (posp))) (((Hind) (p)) (posp))))))) (((((((bigop) (nat)) ((S) (n1))) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. (f) (i)))) ((((((((bigop_Strue) (nat)) (n1)) (\lambda Joker_ : nat. true)) ((S) (O))) (times)) (f)) (((refl) (bool)) (true))))) (n).
definition congruent_exp_pred_SO : \forall p : nat. \forall a : nat. ((prime) (p)) \to ((Not) (((divides) (p)) (a))) \to (((congruent) (((exp) (a)) ((pred) (p)))) ((S) (O))) (p) := \lambda p : nat. \lambda a : nat. \lambda primep : (prime) (p). \lambda ndiv : (Not) (((divides) (p)) (a)). ((((((divides_to_congruent) (((exp) (a)) ((pred) (p)))) ((S) (O))) (p)) (((prime_to_lt_O) (p)) (primep))) ((((lt_O_exp) (a)) ((pred) (p))) ((((((match_nat_prop) (\lambda Joker_ : nat. ((Not) (((divides) (p)) (Joker_))) \to ((lt) (O)) (Joker_))) (\lambda Jokerclearme : (Not) (((divides) (p)) (O)). ((((Not_ind) (((divides) (p)) (O))) (((lt) (O)) (O))) (\lambda div0 : (((divides) (p)) (O)) \to False. ((falsity) (((lt) (O)) (O))) ((div0) (((((quotient) (p)) (O)) (O)) (((((((rewrite_l) (nat)) (O)) (\lambda Joker_ : nat. (((eq) (nat)) (O)) (Joker_))) (((refl) (nat)) (O))) (((times) (p)) (O))) ((times_n_O) (p))))))) (Jokerclearme))) (\lambda auto : nat. \lambda auto' : (Not) (((divides) (p)) ((S) (auto))). (lt_O_S) (auto))) (a)) (ndiv)))) (((((((match_Or_prop) (((divides) (p)) (((minus) (((exp) (a)) ((pred) (p)))) ((S) (O))))) (((divides) (p)) ((fact) ((pred) (p))))) (((divides) (p)) (((minus) (((exp) (a)) ((pred) (p)))) ((S) (O))))) (\lambda auto : ((divides) (p)) (((minus) (((exp) (a)) ((pred) (p)))) ((S) (O))). auto)) (\lambda Hdiv : ((divides) (p)) ((fact) ((pred) (p))). ((falsity) (((divides) (p)) (((minus) (((exp) (a)) ((pred) (p)))) ((S) (O))))) ((((absurd) (((divides) (p)) ((fact) ((pred) (p))))) (Hdiv)) (((((prime_to_not_divides_fact) (p)) (primep)) ((pred) (p))) ((((le_S_S_to_le) ((S) ((pred) (p)))) (p)) (((((((eq_ind_r) (nat)) (p)) (\lambda x : nat. ((le) ((S) (x))) ((S) (p)))) ((le_n) ((S) (p)))) ((S) ((pred) (p)))) (((S_pred) (p)) (((prime_to_lt_O) (p)) (primep))))))))) ((((((divides_times_to_divides) (p)) (((minus) (((exp) (a)) ((pred) (p)))) ((S) (O)))) ((fact) ((pred) (p)))) (primep)) (((((((eq_ind_r) (nat)) (((times) ((fact) ((pred) (p)))) (((minus) (((exp) (a)) ((pred) (p)))) ((S) (O))))) (\lambda x : nat. ((divides) (p)) (x))) (((((((eq_ind_r) (nat)) (((minus) (((times) ((fact) ((pred) (p)))) (((exp) (a)) ((pred) (p))))) (((times) ((fact) ((pred) (p)))) ((S) (O))))) (\lambda x : nat. ((divides) (p)) (x))) (((((((eq_ind) (nat)) ((fact) ((pred) (p)))) (\lambda x_1 : nat. ((divides) (p)) (((minus) (((times) ((fact) ((pred) (p)))) (((exp) (a)) ((pred) (p))))) (x_1)))) (((((((eq_ind_r) (nat)) (((((((bigop) (nat)) (((minus) ((S) ((pred) (p)))) ((S) (O)))) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. ((plus) (i)) ((S) (O))))) (\lambda x : nat. ((divides) (p)) (((minus) (((times) (x)) (((exp) (a)) ((pred) (p))))) (x)))) (((((((eq_ind_r) (nat)) (((times) (((exp) (a)) ((pred) (p)))) (((((((bigop) (nat)) (((minus) ((S) ((pred) (p)))) ((S) (O)))) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. ((plus) (i)) ((S) (O)))))) (\lambda x : nat. ((divides) (p)) (((minus) (x)) (((((((bigop) (nat)) (((minus) ((S) ((pred) (p)))) ((S) (O)))) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. ((plus) (i)) ((S) (O))))))) (((((((eq_ind_r) (nat)) (((minus) ((S) ((pred) (p)))) ((S) (O)))) (\lambda x : nat. ((divides) (p)) (((minus) (((times) (((exp) (a)) (x))) (((((((bigop) (nat)) (((minus) ((S) ((pred) (p)))) ((S) (O)))) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. ((plus) (i)) ((S) (O)))))) (((((((bigop) (nat)) (((minus) ((S) ((pred) (p)))) ((S) (O)))) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. ((plus) (i)) ((S) (O))))))) (((((((eq_ind_r) (nat)) (((((((bigop) (nat)) (((minus) ((S) ((pred) (p)))) ((S) (O)))) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. ((times) (a)) (((plus) (i)) ((S) (O)))))) (\lambda x : nat. ((divides) (p)) (((minus) (x)) (((((((bigop) (nat)) (((minus) ((S) ((pred) (p)))) ((S) (O)))) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. ((plus) (i)) ((S) (O))))))) ((((((congruent_to_divides) (((((((bigop) (nat)) (((minus) ((S) ((pred) (p)))) ((S) (O)))) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. ((times) (a)) (((plus) (i)) ((S) (O)))))) (((((((bigop) (nat)) (((minus) ((S) ((pred) (p)))) ((S) (O)))) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. ((plus) (i)) ((S) (O))))) (p)) (((prime_to_lt_O) (p)) (primep))) (((((((transitive_congruent) (p)) (((((((bigop) (nat)) (((minus) ((S) ((pred) (p)))) ((S) (O)))) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. ((times) (a)) (((plus) (i)) ((S) (O)))))) (((((((bigop) (nat)) (((minus) ((S) ((pred) (p)))) ((S) (O)))) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. ((mod) (((times) (a)) (((plus) (i)) ((S) (O))))) (p)))) (((((((bigop) (nat)) (((minus) ((S) ((pred) (p)))) ((S) (O)))) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. ((plus) (i)) ((S) (O))))) (((((congruent_pi) (\lambda m : nat. ((times) (a)) (((plus) (m)) ((S) (O))))) (((minus) ((S) ((pred) (p)))) ((S) (O)))) (p)) (((prime_to_lt_O) (p)) (primep)))) (((((((eq_ind) (nat)) (((((((bigop) (nat)) (((minus) ((S) ((pred) (p)))) ((S) (O)))) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. ((plus) (i)) ((S) (O))))) (\lambda x_1 : nat. (((congruent) (x_1)) (((((((bigop) (nat)) (((minus) ((S) ((pred) (p)))) ((S) (O)))) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. ((plus) (i)) ((S) (O))))) (p))) (((congruent_n_n) (((((((bigop) (nat)) (((minus) ((S) ((pred) (p)))) ((S) (O)))) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. ((plus) (i)) ((S) (O))))) (p))) (((((((bigop) (nat)) (((minus) ((S) ((pred) (p)))) ((S) (O)))) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. ((mod) (((times) (a)) (((plus) (i)) ((S) (O))))) (p)))) (((((((eq_ind_r) (nat)) (((((((bigop) (nat)) ((S) ((pred) (p)))) (\lambda i : nat. ((andb) (((leb) ((S) (O))) (i))) (true))) ((S) (O))) (times)) (\lambda i : nat. i))) (\lambda x : nat. (((eq) (nat)) (x)) (((((((bigop) (nat)) (((minus) ((S) ((pred) (p)))) ((S) (O)))) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. ((mod) (((times) (a)) (((plus) (i)) ((S) (O))))) (p))))) (((((((eq_ind_r) (nat)) (((((((bigop) (nat)) ((S) ((pred) (p)))) (\lambda i : nat. ((andb) (((leb) ((S) (O))) (i))) (true))) ((S) (O))) (times)) (\lambda i : nat. ((mod) (((times) (a)) (i))) (p)))) (\lambda x : nat. (((eq) (nat)) (((((((bigop) (nat)) ((S) ((pred) (p)))) (\lambda i : nat. ((andb) (((leb) ((S) (O))) (i))) (true))) ((S) (O))) (times)) (\lambda i : nat. i))) (x))) (((((sym_eq) (nat)) (((((((bigop) (nat)) ((S) ((pred) (p)))) (\lambda i : nat. ((andb) (((leb) ((S) (O))) (i))) (true))) ((S) (O))) (times)) (\lambda i : nat. ((mod) (((times) (a)) (i))) (p)))) (((((((bigop) (nat)) ((S) ((pred) (p)))) (\lambda i : nat. ((andb) (((leb) ((S) (O))) (i))) (true))) ((S) (O))) (times)) (\lambda i : nat. i))) ((((((((bigop_iso) ((S) ((pred) (p)))) ((S) ((pred) (p)))) (\lambda Joker_ : nat. ((andb) (((leb) ((S) (O))) (Joker_))) (true))) (\lambda Joker_ : nat. ((andb) (((leb) ((S) (O))) (Joker_))) (true))) (\lambda Joker_ : nat. ((mod) (((times) (a)) (Joker_))) (p))) (\lambda Joker_ : nat. Joker_)) (\lambda z : Prop. \lambda f : \forall x : (nat) \to nat. (((Ex) ((nat) \to nat)) (\lambda k : (nat) \to nat. ((And) (((And) (\forall i : nat. (((lt) (i)) ((S) ((pred) (p)))) \to ((((eq) (bool)) (((andb) (((leb) ((S) (O))) (i))) (true))) (true)) \to (((eq) (nat)) (((mod) (((times) (a)) (i))) (p))) ((x) (i)))) (((((((((sub_hk) (x)) (k)) ((S) ((pred) (p)))) ((S) ((pred) (p)))) (\lambda Joker0 : nat. ((andb) (((leb) ((S) (O))) (Joker0))) (true))) (\lambda Joker0 : nat. ((andb) (((leb) ((S) (O))) (Joker0))) (true))) (\lambda Joker0 : nat. ((mod) (((times) (a)) (Joker0))) (p))) (\lambda Joker0 : nat. Joker0)))) (((((((((sub_hk) (k)) (x)) ((S) ((pred) (p)))) ((S) ((pred) (p)))) (\lambda Joker0 : nat. ((andb) (((leb) ((S) (O))) (Joker0))) (true))) (\lambda Joker0 : nat. ((andb) (((leb) ((S) (O))) (Joker0))) (true))) (\lambda Joker0 : nat. Joker0)) (\lambda Joker0 : nat. ((mod) (((times) (a)) (Joker0))) (p))))) \to z. ((f) (\lambda i : nat. ((mod) (((times) (a)) (i))) (p))) (\lambda z0 : Prop. \lambda f2 : \forall y : (nat) \to nat. (((And) (((And) (\forall i : nat. (((lt) (i)) ((S) ((pred) (p)))) \to ((((eq) (bool)) (((andb) (((leb) ((S) (O))) (i))) (true))) (true)) \to (((eq) (nat)) (((mod) (((times) (a)) (i))) (p))) (((mod) (((times) (a)) (i))) (p)))) (((((((((sub_hk) (\lambda i : nat. ((mod) (((times) (a)) (i))) (p))) (y)) ((S) ((pred) (p)))) ((S) ((pred) (p)))) (\lambda Joker0 : nat. ((andb) (((leb) ((S) (O))) (Joker0))) (true))) (\lambda Joker0 : nat. ((andb) (((leb) ((S) (O))) (Joker0))) (true))) (\lambda Joker0 : nat. ((mod) (((times) (a)) (Joker0))) (p))) (\lambda Joker0 : nat. Joker0)))) (((((((((sub_hk) (y)) (\lambda i : nat. ((mod) (((times) (a)) (i))) (p))) ((S) ((pred) (p)))) ((S) ((pred) (p)))) (\lambda Joker0 : nat. ((andb) (((leb) ((S) (O))) (Joker0))) (true))) (\lambda Joker0 : nat. ((andb) (((leb) ((S) (O))) (Joker0))) (true))) (\lambda Joker0 : nat. Joker0)) (\lambda Joker0 : nat. ((mod) (((times) (a)) (Joker0))) (p)))) \to z0. ((f2) (((invert_permut) ((pred) (p))) (\lambda i : nat. ((mod) (((times) (a)) (i))) (p)))) (\lambda z1 : Prop. \lambda f0 : (((And) (\forall i : nat. (((lt) (i)) ((S) ((pred) (p)))) \to ((((eq) (bool)) (((andb) (((leb) ((S) (O))) (i))) (true))) (true)) \to (((eq) (nat)) (((mod) (((times) (a)) (i))) (p))) (((mod) (((times) (a)) (i))) (p)))) (((((((((sub_hk) (\lambda i : nat. ((mod) (((times) (a)) (i))) (p))) (((invert_permut) ((pred) (p))) (\lambda i : nat. ((mod) (((times) (a)) (i))) (p)))) ((S) ((pred) (p)))) ((S) ((pred) (p)))) (\lambda Joker0 : nat. ((andb) (((leb) ((S) (O))) (Joker0))) (true))) (\lambda Joker0 : nat. ((andb) (((leb) ((S) (O))) (Joker0))) (true))) (\lambda Joker0 : nat. ((mod) (((times) (a)) (Joker0))) (p))) (\lambda Joker0 : nat. Joker0))) \to (((((((((sub_hk) (((invert_permut) ((pred) (p))) (\lambda i : nat. ((mod) (((times) (a)) (i))) (p)))) (\lambda i : nat. ((mod) (((times) (a)) (i))) (p))) ((S) ((pred) (p)))) ((S) ((pred) (p)))) (\lambda Joker0 : nat. ((andb) (((leb) ((S) (O))) (Joker0))) (true))) (\lambda Joker0 : nat. ((andb) (((leb) ((S) (O))) (Joker0))) (true))) (\lambda Joker0 : nat. Joker0)) (\lambda Joker0 : nat. ((mod) (((times) (a)) (Joker0))) (p))) \to z1. ((f0) (\lambda z2 : Prop. \lambda f20 : (\forall x : nat. (((lt) (x)) ((S) ((pred) (p)))) \to ((((eq) (bool)) (((andb) (((leb) ((S) (O))) (x))) (true))) (true)) \to (((eq) (nat)) (((mod) (((times) (a)) (x))) (p))) (((mod) (((times) (a)) (x))) (p))) \to (((((((((sub_hk) (\lambda i : nat. ((mod) (((times) (a)) (i))) (p))) (((invert_permut) ((pred) (p))) (\lambda i : nat. ((mod) (((times) (a)) (i))) (p)))) ((S) ((pred) (p)))) ((S) ((pred) (p)))) (\lambda Joker0 : nat. ((andb) (((leb) ((S) (O))) (Joker0))) (true))) (\lambda Joker0 : nat. ((andb) (((leb) ((S) (O))) (Joker0))) (true))) (\lambda Joker0 : nat. ((mod) (((times) (a)) (Joker0))) (p))) (\lambda Joker0 : nat. Joker0)) \to z2. ((f20) (\lambda i : nat. \lambda lti : ((lt) (i)) ((S) ((pred) (p))). \lambda Joker_ : (((eq) (bool)) (((andb) (((leb) ((S) (O))) (i))) (true))) (true). ((refl) (nat)) (((mod) (((times) (a)) (i))) (p)))) (\lambda i : nat. \lambda lti : ((lt) (i)) ((S) ((pred) (p))). \lambda posi : (((eq) (bool)) (((andb) (((leb) ((S) (O))) (i))) (true))) (true). \lambda z3 : Prop. \lambda f3 : (((And) (((lt) (((mod) (((times) (a)) (i))) (p))) ((S) ((pred) (p))))) ((((eq) (bool)) (((andb) (((leb) ((S) (O))) (((mod) (((times) (a)) (i))) (p)))) (true))) (true))) \to ((((eq) (nat)) ((((invert_permut) ((pred) (p))) (\lambda i0 : nat. ((mod) (((times) (a)) (i0))) (p))) (((mod) (((times) (a)) (i))) (p)))) (i)) \to z3. ((f3) (\lambda z4 : Prop. \lambda f4 : (((lt) (((mod) (((times) (a)) (i))) (p))) ((S) ((pred) (p)))) \to ((((eq) (bool)) (((andb) (((leb) ((S) (O))) (((mod) (((times) (a)) (i))) (p)))) (true))) (true)) \to z4. ((f4) (((((((eq_ind_r) (nat)) (p)) (\lambda x : nat. ((lt) (((mod) (((times) (a)) (i))) (p))) (x))) ((((lt_mod_m_m) (((times) (a)) (i))) (p)) (((prime_to_lt_O) (p)) (primep)))) ((S) ((pred) (p)))) (((S_pred) (p)) (((prime_to_lt_O) (p)) (primep))))) (((((((eq_ind_r) (bool)) (true)) (\lambda x : bool. (((eq) (bool)) (((andb) (x)) (true))) (true))) ((((((eq_match_bool_type_true) (bool)) (true)) (false)) (\lambda y : bool. (((eq) (bool)) (((andb) (true)) (true))) (y))) (((refl) (bool)) (((andb) (true)) (true))))) (((leb) ((S) (O))) (((mod) (((times) (a)) (i))) (p)))) ((((le_to_leb_true) ((S) (O))) (((mod) (((times) (a)) (i))) (p))) (((((((match_Or_prop) (((lt) (O)) (((mod) (((times) (a)) (i))) (p)))) ((((eq) (nat)) (O)) (((mod) (((times) (a)) (i))) (p)))) (((le) ((S) (O))) (((mod) (((times) (a)) (i))) (p)))) (\lambda auto : ((lt) (O)) (((mod) (((times) (a)) (i))) (p)). auto)) (\lambda H : (((eq) (nat)) (O)) (((mod) (((times) (a)) (i))) (p)). ((falsity) (((le) ((S) (O))) (((mod) (((times) (a)) (i))) (p)))) ((((absurd) (((divides) (p)) (((times) (a)) (i)))) (((((mod_O_to_divides) (p)) (((times) (a)) (i))) (((prime_to_lt_O) (p)) (primep))) (((((sym_eq) (nat)) (O)) (((mod) (((times) (a)) (i))) (p))) (H)))) (((((not_to_not) (((divides) (p)) (((times) (a)) (i)))) (((divides) (p)) (a))) (\lambda Hdiv : ((divides) (p)) (((times) (a)) (i)). ((((((match_Or_prop) (((divides) (p)) (a))) (((divides) (p)) (i))) (((divides) (p)) (a))) (\lambda auto : ((divides) (p)) (a). auto)) (\lambda divpi : ((divides) (p)) (i). ((falsity) (((divides) (p)) (a))) ((((absurd) (((lt) (i)) ((S) ((pred) (p))))) (lti)) ((((le_to_not_lt) ((S) ((pred) (p)))) (i)) (((((((eq_ind_r) (nat)) (p)) (\lambda x : nat. ((le) (x)) (i))) (((((divides_to_le) (p)) (i)) ((((leb_true_to_le) ((S) (O))) (i)) ((((andb_true_l) (((leb) ((S) (O))) (i))) (true)) (posi)))) (divpi))) ((S) ((pred) (p)))) (((S_pred) (p)) (((prime_to_lt_O) (p)) (primep)))))))) ((((((divides_times_to_divides) (p)) (a)) (i)) (primep)) (Hdiv)))) (ndiv))))) ((((le_to_or_lt_eq) (O)) (((mod) (((times) (a)) (i))) (p))) ((le_O_n) (((mod) (((times) (a)) (i))) (p))))))))) ((((((invert_permut_f) (\lambda i0 : nat. ((mod) (((times) (a)) (i0))) (p))) ((pred) (p))) (i)) ((((le_S_S_to_le) (i)) ((pred) (p))) (lti))) ((((((match_And_prop) (\forall i1 : nat. (((le) (i1)) ((pred) (p))) \to ((le) (((mod) (((times) (a)) (i1))) (p))) ((pred) (p)))) (((injn) (\lambda n : nat. ((mod) (((times) (a)) (n))) (p))) ((pred) (p)))) (((injn) (\lambda i0 : nat. ((mod) (((times) (a)) (i0))) (p))) ((pred) (p)))) (\lambda auto : \forall i0 : nat. (((le) (i0)) ((pred) (p))) \to ((le) (((mod) (((times) (a)) (i0))) (p))) ((pred) (p)). \lambda auto' : ((injn) (\lambda n : nat. ((mod) (((times) (a)) (n))) (p))) ((pred) (p)). auto')) (((((permut_mod) (p)) (a)) (primep)) (ndiv))))))) ((((((match_And_prop) (\forall i : nat. (((le) (i)) ((pred) (p))) \to ((le) ((((invert_permut) ((pred) (p))) (\lambda n : nat. ((mod) (((times) (a)) (n))) (p))) (i))) ((pred) (p)))) (((injn) (((invert_permut) ((pred) (p))) (\lambda n : nat. ((mod) (((times) (a)) (n))) (p)))) ((pred) (p)))) (((((((((sub_hk) (((invert_permut) ((pred) (p))) (\lambda i : nat. ((mod) (((times) (a)) (i))) (p)))) (\lambda i : nat. ((mod) (((times) (a)) (i))) (p))) ((S) ((pred) (p)))) ((S) ((pred) (p)))) (\lambda Joker0 : nat. ((andb) (((leb) ((S) (O))) (Joker0))) (true))) (\lambda Joker0 : nat. ((andb) (((leb) ((S) (O))) (Joker0))) (true))) (\lambda Joker0 : nat. Joker0)) (\lambda Joker0 : nat. ((mod) (((times) (a)) (Joker0))) (p)))) (\lambda le_invert_permut : \forall i : nat. (((le) (i)) ((pred) (p))) \to ((le) ((((invert_permut) ((pred) (p))) (\lambda n : nat. ((mod) (((times) (a)) (n))) (p))) (i))) ((pred) (p)). \lambda inj_inv_permut : ((injn) (((invert_permut) ((pred) (p))) (\lambda n : nat. ((mod) (((times) (a)) (n))) (p)))) ((pred) (p)). \lambda i : nat. \lambda lti : ((lt) (i)) ((S) ((pred) (p))). \lambda posi : (((eq) (bool)) (((andb) (((leb) ((S) (O))) (i))) (true))) (true). \lambda z2 : Prop. \lambda f5 : (((And) (((lt) ((((invert_permut) ((pred) (p))) (\lambda i0 : nat. ((mod) (((times) (a)) (i0))) (p))) (i))) ((S) ((pred) (p))))) ((((eq) (bool)) (((andb) (((leb) ((S) (O))) ((((invert_permut) ((pred) (p))) (\lambda i0 : nat. ((mod) (((times) (a)) (i0))) (p))) (i)))) (true))) (true))) \to ((((eq) (nat)) (((mod) (((times) (a)) ((((invert_permut) ((pred) (p))) (\lambda i0 : nat. ((mod) (((times) (a)) (i0))) (p))) (i)))) (p))) (i)) \to z2. ((f5) (\lambda z3 : Prop. \lambda f6 : (((lt) ((((invert_permut) ((pred) (p))) (\lambda i0 : nat. ((mod) (((times) (a)) (i0))) (p))) (i))) ((S) ((pred) (p)))) \to ((((eq) (bool)) (((andb) (((leb) ((S) (O))) ((((invert_permut) ((pred) (p))) (\lambda i0 : nat. ((mod) (((times) (a)) (i0))) (p))) (i)))) (true))) (true)) \to z3. ((f6) ((((le_S_S) ((((invert_permut) ((pred) (p))) (\lambda i0 : nat. ((mod) (((times) (a)) (i0))) (p))) (i))) ((pred) (p))) (((le_invert_permut) (i)) ((((le_S_S_to_le) (i)) ((pred) (p))) (lti))))) (((((((eq_ind_r) (bool)) (true)) (\lambda x : bool. (((eq) (bool)) (((andb) (x)) (true))) (true))) ((((((eq_match_bool_type_true) (bool)) (true)) (false)) (\lambda y : bool. (((eq) (bool)) (((andb) (true)) (true))) (y))) (((refl) (bool)) (((andb) (true)) (true))))) (((leb) ((S) (O))) ((((invert_permut) ((pred) (p))) (\lambda i0 : nat. ((mod) (((times) (a)) (i0))) (p))) (i)))) ((((le_to_leb_true) ((S) (O))) ((((invert_permut) ((pred) (p))) (\lambda i0 : nat. ((mod) (((times) (a)) (i0))) (p))) (i))) (((((((match_Or_prop) (((lt) (O)) ((((invert_permut) ((pred) (p))) (\lambda i0 : nat. ((mod) (((times) (a)) (i0))) (p))) (i)))) ((((eq) (nat)) (O)) ((((invert_permut) ((pred) (p))) (\lambda i0 : nat. ((mod) (((times) (a)) (i0))) (p))) (i)))) (((le) ((S) (O))) ((((invert_permut) ((pred) (p))) (\lambda i0 : nat. ((mod) (((times) (a)) (i0))) (p))) (i)))) (\lambda auto : ((lt) (O)) ((((invert_permut) ((pred) (p))) (\lambda i0 : nat. ((mod) (((times) (a)) (i0))) (p))) (i)). auto)) (\lambda H : (((eq) (nat)) (O)) ((((invert_permut) ((pred) (p))) (\lambda i0 : nat. ((mod) (((times) (a)) (i0))) (p))) (i)). ((falsity) (((le) ((S) (O))) ((((invert_permut) ((pred) (p))) (\lambda i0 : nat. ((mod) (((times) (a)) (i0))) (p))) (i)))) ((((((((eq_ind_r) (nat)) (O)) (\lambda x : nat. ((((eq) (nat)) (x)) (((mod) (((times) (a)) ((((invert_permut) ((pred) (p))) (\lambda i0 : nat. ((mod) (((times) (a)) (i0))) (p))) (i)))) (p))) \to False)) (((((((eq_ind_r) (nat)) (i)) (\lambda x : nat. ((((eq) (nat)) (O)) (x)) \to False)) (\lambda eq0i : (((eq) (nat)) (O)) (i). (((((((eq_ind) (nat)) (O)) (\lambda x_1 : nat. ((((eq) (bool)) (((andb) (((leb) ((S) (O))) (x_1))) (true))) (true)) \to False)) ((((sym_eq_leb) ((S) (O))) (\lambda y : (nat) \to bool. ((((eq) (bool)) (((andb) ((y) (O))) (true))) (true)) \to False)) ((((((sym_eq_filter_nat_type_S) ((nat) \to bool)) (leb_body)) (O)) (\lambda y : (nat) \to bool. ((((eq) (bool)) (((andb) ((y) (O))) (true))) (true)) \to False)) ((((sym_eq_leb_body_S) (O)) (\lambda y : (nat) \to bool. ((((eq) (bool)) (((andb) ((y) (O))) (true))) (true)) \to False)) ((((((sym_eq_match_nat_type_O) (bool)) (false)) (\lambda q : nat. ((leb) (O)) (q))) (\lambda y : bool. ((((eq) (bool)) (((andb) (y)) (true))) (true)) \to False)) ((((((sym_eq_match_bool_type_false) (bool)) (true)) (false)) (\lambda y : bool. ((((eq) (bool)) (y)) (true)) \to False)) (\lambda H0 : (((eq) (bool)) (false)) (true). ((((((eq_match_bool_type_true) Prop) (\forall P : Prop. P)) (\forall P : Prop. (P) \to P)) (\lambda y : Prop. y)) ((((((eq_match_bool_type_false) Prop) (((((match_bool_type) Prop) (\forall P : Prop. (P) \to P)) (\forall P : Prop. P)) (true))) (((((match_bool_type) Prop) (\forall P : Prop. P)) (\forall P : Prop. (P) \to P)) (true))) (\lambda y : Prop. y)) ((((bool_discr) (false)) (true)) (H0)))) (False)))))))) (i)) (eq0i)) (posi))) (((mod) (((times) (a)) ((((invert_permut) ((pred) (p))) (\lambda i0 : nat. ((mod) (((times) (a)) (i0))) (p))) (i)))) (p))) ((((((f_invert_permut) (\lambda i0 : nat. ((mod) (((times) (a)) (i0))) (p))) ((pred) (p))) (i)) ((((le_S_S_to_le) (i)) ((pred) (p))) (lti))) (((((permut_mod) (p)) (a)) (primep)) (ndiv))))) (((mod) (((times) (a)) (O))) (p))) (((((((eq_ind) (nat)) (O)) (\lambda x_1 : nat. (((eq) (nat)) (((mod) (x_1)) (p))) (O))) (((((((rewrite_r) (nat)) (O)) (\lambda Joker_ : nat. (((eq) (nat)) (Joker_)) (O))) (((refl) (nat)) (O))) (((mod) (O)) (p))) ((mod_O_n) (p)))) (((times) (a)) (O))) ((times_n_O) (a)))) (((((((eq_f) (nat)) (nat)) (\lambda i0 : nat. ((mod) (((times) (a)) (i0))) (p))) (O)) ((((invert_permut) ((pred) (p))) (\lambda i0 : nat. ((mod) (((times) (a)) (i0))) (p))) (i))) (((((((rewrite_l) (nat)) (O)) (\lambda Joker_ : nat. (((eq) (nat)) (O)) (Joker_))) (((refl) (nat)) (O))) ((((invert_permut) ((pred) (p))) (\lambda i0 : nat. ((mod) (((times) (a)) (i0))) (p))) (i))) (H)))))) ((((le_to_or_lt_eq) (O)) ((((invert_permut) ((pred) (p))) (\lambda i0 : nat. ((mod) (((times) (a)) (i0))) (p))) (i))) ((le_O_n) ((((invert_permut) ((pred) (p))) (\lambda i0 : nat. ((mod) (((times) (a)) (i0))) (p))) (i))))))))) ((((((f_invert_permut) (\lambda Joker_ : nat. ((mod) (((times) (a)) (Joker_))) (p))) ((pred) (p))) (i)) ((((le_S_S_to_le) (i)) ((pred) (p))) (lti))) (((((permut_mod) (p)) (a)) (primep)) (ndiv))))) ((((permut_invert_permut) (\lambda n : nat. ((mod) (((times) (a)) (n))) (p))) ((pred) (p))) (((((permut_mod) (p)) (a)) (primep)) (ndiv)))))))))) (((((((bigop) (nat)) (((minus) ((S) ((pred) (p)))) ((S) (O)))) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. ((mod) (((times) (a)) (((plus) (i)) ((S) (O))))) (p)))) ((((((bigop_I_gen) ((S) (O))) ((S) ((pred) (p)))) (\lambda Joker_ : nat. true)) (\lambda Joker_ : nat. ((mod) (((times) (a)) (Joker_))) (p))) ((lt_O_S) ((pred) (p)))))) (((((((bigop) (nat)) (((minus) ((S) ((pred) (p)))) ((S) (O)))) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. ((plus) (i)) ((S) (O))))) ((((((bigop_I_gen) ((S) (O))) ((S) ((pred) (p)))) (\lambda Joker_ : nat. true)) (\lambda Joker_ : nat. Joker_)) ((lt_O_S) ((pred) (p))))))))) (((times) (((exp) (a)) (((minus) ((S) ((pred) (p)))) ((S) (O))))) (((((((bigop) (nat)) (((minus) ((S) ((pred) (p)))) ((S) (O)))) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. ((plus) (i)) ((S) (O)))))) (((((exp_pi_bc) (a)) ((S) (O))) ((S) ((pred) (p)))) (\lambda Joker_ : nat. Joker_)))) ((pred) (p))) (((((((rewrite_r) (nat)) (((minus) ((pred) (p))) (O))) (\lambda Joker_ : nat. (((eq) (nat)) ((pred) (p))) (Joker_))) (((((((rewrite_l) (nat)) ((pred) (p))) (\lambda Joker_ : nat. (((eq) (nat)) ((pred) (p))) (Joker_))) (((refl) (nat)) ((pred) (p)))) (((minus) ((pred) (p))) (O))) ((minus_n_O) ((pred) (p))))) (((minus) ((S) ((pred) (p)))) ((S) (O)))) (((minus_S_S) ((pred) (p))) (O))))) (((times) (((((((bigop) (nat)) (((minus) ((S) ((pred) (p)))) ((S) (O)))) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. ((plus) (i)) ((S) (O))))) (((exp) (a)) ((pred) (p))))) (((commutative_times) (((((((bigop) (nat)) (((minus) ((S) ((pred) (p)))) ((S) (O)))) (\lambda i : nat. true)) ((S) (O))) (times)) (\lambda i : nat. ((plus) (i)) ((S) (O))))) (((exp) (a)) ((pred) (p)))))) ((fact) ((pred) (p)))) ((eq_fact_pi_p) ((pred) (p))))) (((times) ((fact) ((pred) (p)))) ((S) (O)))) ((times_n_1) ((fact) ((pred) (p)))))) (((times) ((fact) ((pred) (p)))) (((minus) (((exp) (a)) ((pred) (p)))) ((S) (O))))) ((((distributive_times_minus) ((fact) ((pred) (p)))) (((exp) (a)) ((pred) (p)))) ((S) (O))))) (((times) (((minus) (((exp) (a)) ((pred) (p)))) ((S) (O)))) ((fact) ((pred) (p))))) (((commutative_times) (((minus) (((exp) (a)) ((pred) (p)))) ((S) (O)))) ((fact) ((pred) (p))))))).
